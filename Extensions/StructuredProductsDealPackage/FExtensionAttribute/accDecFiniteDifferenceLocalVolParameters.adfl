[StructuredProductsDealPackage]FInstrument:accDecFiniteDifferenceLocalVolParameters = {underlyingValue->underlyingValueModel, volatility->volatilityInformation, volatilityProvider->instrumentVolatilityValueProvider, unshiftedVolatilityProvider->select(instrumentUnshiftedVolatilityValueProvider, 
  nil->nil, 
  default->instrumentUnshiftedVolatilityValueProvider), strikeValue->accDecCurrentStrikeAsArray, discountRate->discountRate, carryCost->accDecCarryCostAsArray, carryCostIsDivYield->false, isCall->accDecIsCallAsArray, timeToExpiry->accDecTimeToExpiryModelAdjustedAsArray, timeToCarry->timeToCarryAsArray, timeToDiscount->timeToDiscountAsArray, dividends->accDecUnderlyingDividendInformationUpToSkewAfterExpiryAsArray, valuationTime->valuationStartDateTime, spotDate->valuationStartSpotDate, isAmerican->isExerciseAmerican, isKnockIn->barrierIsKnockIn, isLowerBarrier->isLowerBarrier, isUpperBarrier->isUpperBarrier, barrier->accDecCurrentBarrierValueForFiniteDifferenceModelAsArray, barrier2->accDecBarrier2ValueForFiniteDifferenceModelAsArray, rebate->rebateValue, payRebateOnExpiry->payRebateOnExpiry, pDESettings->pdeSettings, supressGreek->nil, isCrossed->barrierIsCrossed, isCashSettled->isCashSettled, isDigital->isDigital, digitalBarrierType->digitalBarrierType, barrierMonitoring->barrierMonitoringType, barrierDiscreteMonitoringDates->accDecBarrierMonitoringDates, barrierWindowMonitoringDates->accDecBarrierWindowMonitoringDates, vFxQuanto->fxVolatilityForQuantoAdjustedCarryCostOrNil, vFlatDriftQuanto->volatilityForQuantoAdjustedCarryCostOrNil, corrQuanto->underlyingFXCorrelation};