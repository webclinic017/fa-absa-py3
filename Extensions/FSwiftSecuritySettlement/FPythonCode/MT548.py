# C:\Projects\Code\SwiftMessagingSolution_Python3\base\extensions\SwiftIntegration\Utilities\TemplateFiles\MT548.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2019-11-07 14:17:35.298752 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com


import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:3e6db7b6-013b-11ea-8955-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_20C_Type_Pattern
class MT548_SequenceA_GeneralInformation_20C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_20C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 3, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_20C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_20C_Type_Pattern._CF_pattern.addPattern(pattern="(:(SEME)//[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT548_SequenceA_GeneralInformation_20C_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_20C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_20C_Type_Pattern', MT548_SequenceA_GeneralInformation_20C_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_20C_Type_Pattern = MT548_SequenceA_GeneralInformation_20C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_23G_Type_Pattern
class MT548_SequenceA_GeneralInformation_23G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_23G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 16, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_23G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_23G_Type_Pattern._CF_pattern.addPattern(pattern='((CAST|INST|PENA)(/(CODU|COPY|DUPL))?)')
MT548_SequenceA_GeneralInformation_23G_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_23G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_23G_Type_Pattern', MT548_SequenceA_GeneralInformation_23G_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_23G_Type_Pattern = MT548_SequenceA_GeneralInformation_23G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98A_Type_Pattern
class MT548_SequenceA_GeneralInformation_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 29, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PREP)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceA_GeneralInformation_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98A_Type_Pattern', MT548_SequenceA_GeneralInformation_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_98A_Type_Pattern = MT548_SequenceA_GeneralInformation_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98C_Type_Pattern
class MT548_SequenceA_GeneralInformation_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 42, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(PREP)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceA_GeneralInformation_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98C_Type_Pattern', MT548_SequenceA_GeneralInformation_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_98C_Type_Pattern = MT548_SequenceA_GeneralInformation_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98E_Type_Pattern
class MT548_SequenceA_GeneralInformation_98E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 55, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_98E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_98E_Type_Pattern._CF_pattern.addPattern(pattern='(:(PREP)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[1-3])(([0-5][0-9]))?)?)')
MT548_SequenceA_GeneralInformation_98E_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_98E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98E_Type_Pattern', MT548_SequenceA_GeneralInformation_98E_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_98E_Type_Pattern = MT548_SequenceA_GeneralInformation_98E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 68, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern._CF_pattern.addPattern(pattern='(:(LINK)//[A-Z0-9]{3})')
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 81, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern._CF_pattern.addPattern(pattern="(:(LINK)/([A-Z0-9]{1,8})?/[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30}[^/])")
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 94, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern._CF_pattern.addPattern(pattern="(:(POOL|PREV|RELA|TRRF|COMM|CORP|TCTR|CLTR|CLCI|TRCI|NTSP|MITI|PCTI)//[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 107, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern._CF_pattern.addPattern(pattern="(:(TRRF)//[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 120, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern._CF_pattern.addPattern(pattern='(:(CPRC|IPRC|MTCH|SETT|SPRC|CALL|INMH|TPRC)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 133, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern._CF_pattern.addPattern(pattern='(:(CAND|CANP|CACK|CGEN|DEND|MOPN|NMAT|PACK|PEND|PENF|PPRC|REJT|REPR)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 146, 1)
    _Documentation = None
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern._CF_pattern.addPattern(pattern="(:(REAS)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern._InitializeFacetMap(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern)
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 159, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern._CF_pattern.addPattern(pattern="(:(TRAD|SAFE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4}(/[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30}[^/])?)")
MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 172, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern._CF_pattern.addPattern(pattern='(:(SAFE)//[A-Z]{2})')
MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 185, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern._CF_pattern.addPattern(pattern='(:(SAFE)//[A-Z0-9]{4}/[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 198, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern._CF_pattern.addPattern(pattern='(:(CLEA)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 211, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern._CF_pattern.addPattern(pattern='(:(CLEA|TRAD|SAFE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 224, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern._CF_pattern.addPattern(pattern="((ISIN {1}[A-Z0-9]{12})?(\\n)?((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})?)")
MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 237, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern._CF_pattern.addPattern(pattern='(:(SETT)//(AMOR|FAMT|UNIT)/[0-9,(?0-9)]{1,15})')
MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 250, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern._CF_pattern.addPattern(pattern='(:(OCMT|SETT)//(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 263, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 276, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(ACOW)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 289, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(ACOW)/[A-Z0-9]{1,8}/[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}[^/])")
MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 302, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE)//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 315, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 328, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(SETR|STCO|TRCA|STAM|RTGS|REGT|BENE|CASY|TCPI|REPT|MACL|BLOC|REST|SETS|NETT|CCPT|LEOG|COLA|COLE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 341, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern._CF_pattern.addPattern(pattern='(:(REDE|PAYM)//[A-Z0-9]{4})')
MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 354, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXSE|SETT|ADEL|TRAD|EXVA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 367, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern._CF_pattern.addPattern(pattern='(:(SETT|TRAD)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 380, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXSE|SETT|ADEL|TRAD|EXVA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 393, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern._CF_pattern.addPattern(pattern='(:(TRAD)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[1-3])(([0-5][0-9]))?)?)')
MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 406, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(SPRO)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 419, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern._CF_pattern.addPattern(pattern='(:(PSET)//[A-Z]{2})')
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 432, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 445, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(BUYR|DEAG|DECU|DEI1|DEI2|PSET|REAG|RECU|REI1|REI2|SELL)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 458, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern._CF_pattern.addPattern(pattern="(:(BUYR|DEAG|DECU|DEI1|DEI2|PSET|REAG|RECU|REI1|REI2|SELL)//[^/](([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4}[^/])")
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 471, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(BUYR|DEAG|DECU|DEI1|DEI2|REAG|RECU|REI1|REI2|SELL)/[A-Z0-9]{1,8}/[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}[^/])")
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 484, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE)//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 497, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 510, 1)
    _Documentation = None
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern._CF_pattern.addPattern(pattern="(:(PROC)//[^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern._InitializeFacetMap(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern)
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_69A_Type_Pattern
class MT548_SequenceC_Penalties_69A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_69A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 523, 1)
    _Documentation = None
MT548_SequenceC_Penalties_69A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_69A_Type_Pattern._CF_pattern.addPattern(pattern='(:(STAT)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceC_Penalties_69A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_69A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_69A_Type_Pattern', MT548_SequenceC_Penalties_69A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_69A_Type_Pattern = MT548_SequenceC_Penalties_69A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_69B_Type_Pattern
class MT548_SequenceC_Penalties_69B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_69B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 536, 1)
    _Documentation = None
MT548_SequenceC_Penalties_69B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_69B_Type_Pattern._CF_pattern.addPattern(pattern='(:(STAT)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_69B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_69B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_69B_Type_Pattern', MT548_SequenceC_Penalties_69B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_69B_Type_Pattern = MT548_SequenceC_Penalties_69B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_22F_Type_Pattern
class MT548_SequenceC_Penalties_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 549, 1)
    _Documentation = None
MT548_SequenceC_Penalties_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(CODE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_22F_Type_Pattern', MT548_SequenceC_Penalties_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_22F_Type_Pattern = MT548_SequenceC_Penalties_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_95L_Type_Pattern
class MT548_SequenceC_Penalties_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 562, 1)
    _Documentation = None
MT548_SequenceC_Penalties_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ASDP)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceC_Penalties_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_95L_Type_Pattern', MT548_SequenceC_Penalties_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_95L_Type_Pattern = MT548_SequenceC_Penalties_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_95P_Type_Pattern
class MT548_SequenceC_Penalties_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 575, 1)
    _Documentation = None
MT548_SequenceC_Penalties_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceC_Penalties_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_95P_Type_Pattern', MT548_SequenceC_Penalties_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_95P_Type_Pattern = MT548_SequenceC_Penalties_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 588, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PECU)//(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 601, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(DACO)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 614, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(DACO)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 627, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 640, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(CASD|REPA)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 653, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern._CF_pattern.addPattern(pattern="(:(REPA)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 666, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(REP)/[A-Z0-9]{1,8}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 679, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(TRCA)//([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 692, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 705, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(ASDP|REPA)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 718, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern._CF_pattern.addPattern(pattern="(:(REPA|ASDP)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 731, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(REPA|ASDP)/[A-Z0-9]{1,8}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 744, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(TRCA)//([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 757, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern._CF_pattern.addPattern(pattern='(:(AGNT)//(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 770, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern._CF_pattern.addPattern(pattern="(:(PREF|PCOM)//(^/)([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}(^/))")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 783, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(PNTP)/(C)?{1,8}/(LMFP|SEEP))|(:(CALM)/([A-Z0-9]{1,8})?/(BOTH|CASH|MIXE|SECU))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 796, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern._CF_pattern.addPattern(pattern='(:(CMPU)//(N|Y))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 809, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern._CF_pattern.addPattern(pattern='(:(PNST)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 822, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern._CF_pattern.addPattern(pattern='(:(ACTV|REMO|UPDT)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 835, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern._CF_pattern.addPattern(pattern="(:(REAS)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 848, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern._CF_pattern.addPattern(pattern='(:(AMCO)//(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 861, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern._CF_pattern.addPattern(pattern='(:(DAAC)//(N)?[0-9]{3})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 874, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PEDA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 887, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(PEDA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 900, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern._CF_pattern.addPattern(pattern='(:(PEDA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 913, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern._CF_pattern.addPattern(pattern='(:(MRED)//(N|Y))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 926, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern._CF_pattern.addPattern(pattern="((ISIN {1}[A-Z0-9]{12})?(\\n)?((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})?)")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 939, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern._CF_pattern.addPattern(pattern="(:(CLAS)/([A-Z0-9]{1,8})?/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 952, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern._CF_pattern.addPattern(pattern='(:(CLAS)/[A-Z0-9]{6})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 965, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern._CF_pattern.addPattern(pattern='(:(LIQU|SMEM)//(N|Y))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 978, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern._CF_pattern.addPattern(pattern='(:(AMNT)//(DISC|PRCT|PREM|YIEL)/(N)?[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 991, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern._CF_pattern.addPattern(pattern='(:(AMNT)//(ACTU|DISC|PREM)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1004, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern._CF_pattern.addPattern(pattern="(:(PRIC|TRAD)/([A-Z0-9]{1,8})?/[A-Z0-9]{4}(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})?)")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1017, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern._CF_pattern.addPattern(pattern='(:(TRAD)/([A-Z0-9]{1,8})?//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1030, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PRIC|EXCH)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1043, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(PRIC|EXCH)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1056, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern._CF_pattern.addPattern(pattern='(:(CBON|GBON|GOMB|ILSH|LISH|NBON|OTHR)(N)?[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1069, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXCH)//(ACTU|DISC|PREM)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)/[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1082, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(FIAN)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1095, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PDRA)//(N)?[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1108, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXCH)//(ACTU|DISC|PREM)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)/[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1121, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern._CF_pattern.addPattern(pattern='(:(SECU|CASH)//(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1134, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern._CF_pattern.addPattern(pattern="(:[A-Z0-9]{4}//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1147, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern._CF_pattern.addPattern(pattern='(:(TRTR|SETR)([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1160, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXSE|SETT|ADEL|TRAD|EXVA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1173, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern._CF_pattern.addPattern(pattern='(:(SETT|TRAD)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1186, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern._CF_pattern.addPattern(pattern='(:(EXSE|SETT|ADEL|TRAD|EXVA)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))|(:(ASTS|MTCH|CUTS)//[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9]))')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1199, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE|CASH)//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1212, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern._CF_pattern.addPattern(pattern="(:(SAFE)/([A-Z0-9]{1,8})?/[A-Z0-9]{4}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1225, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern._CF_pattern.addPattern(pattern="(:(CASH)//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1238, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1251, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(ACOW|CACO)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1264, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern._CF_pattern.addPattern(pattern="(:(ACOW)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1277, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(ACOW)/[A-Z0-9]{1,8}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1290, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern._CF_pattern.addPattern(pattern='(:(REDE|PAYM)//[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1303, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern._CF_pattern.addPattern(pattern='(:(PSTA)//(AMOR|FAMT|UNIT)/[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1316, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern._CF_pattern.addPattern(pattern='(:(PSTA)//(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1329, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern._CF_pattern.addPattern(pattern='(:(MTCH/SETT)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1342, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern._CF_pattern.addPattern(pattern='(:(NMAT|PENF)/([A-Z0-9]{1,8})?/[A-Z0-9]{4})')
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1355, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern._CF_pattern.addPattern(pattern="(:(REAS)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1368, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1381, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1394, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1407, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1420, 1)
    _Documentation = None
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceC_Penalties_70E_Type_Pattern
class MT548_SequenceC_Penalties_70E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_70E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1433, 1)
    _Documentation = None
MT548_SequenceC_Penalties_70E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceC_Penalties_70E_Type_Pattern._CF_pattern.addPattern(pattern="(:(ADTX)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,10})")
MT548_SequenceC_Penalties_70E_Type_Pattern._InitializeFacetMap(MT548_SequenceC_Penalties_70E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_70E_Type_Pattern', MT548_SequenceC_Penalties_70E_Type_Pattern)
_module_typeBindings.MT548_SequenceC_Penalties_70E_Type_Pattern = MT548_SequenceC_Penalties_70E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95C_Type_Pattern
class MT548_SequenceD_AdditionalInformation_95C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1446, 1)
    _Documentation = None
MT548_SequenceD_AdditionalInformation_95C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceD_AdditionalInformation_95C_Type_Pattern._CF_pattern.addPattern(pattern='(:(INVE)//[A-Z]{2})')
MT548_SequenceD_AdditionalInformation_95C_Type_Pattern._InitializeFacetMap(MT548_SequenceD_AdditionalInformation_95C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95C_Type_Pattern', MT548_SequenceD_AdditionalInformation_95C_Type_Pattern)
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95C_Type_Pattern = MT548_SequenceD_AdditionalInformation_95C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95L_Type_Pattern
class MT548_SequenceD_AdditionalInformation_95L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1459, 1)
    _Documentation = None
MT548_SequenceD_AdditionalInformation_95L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceD_AdditionalInformation_95L_Type_Pattern._CF_pattern.addPattern(pattern='(:(ALTE)//[A-Z0-9]{18}[0-9]{2})')
MT548_SequenceD_AdditionalInformation_95L_Type_Pattern._InitializeFacetMap(MT548_SequenceD_AdditionalInformation_95L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95L_Type_Pattern', MT548_SequenceD_AdditionalInformation_95L_Type_Pattern)
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95L_Type_Pattern = MT548_SequenceD_AdditionalInformation_95L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95P_Type_Pattern
class MT548_SequenceD_AdditionalInformation_95P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1472, 1)
    _Documentation = None
MT548_SequenceD_AdditionalInformation_95P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceD_AdditionalInformation_95P_Type_Pattern._CF_pattern.addPattern(pattern='(:(MEOR|MERE|INVE|QFIN)//[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT548_SequenceD_AdditionalInformation_95P_Type_Pattern._InitializeFacetMap(MT548_SequenceD_AdditionalInformation_95P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95P_Type_Pattern', MT548_SequenceD_AdditionalInformation_95P_Type_Pattern)
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95P_Type_Pattern = MT548_SequenceD_AdditionalInformation_95P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern
class MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1485, 1)
    _Documentation = None
MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern._CF_pattern.addPattern(pattern="(:(MEOR|MERE|INVE|QFIN)//(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern._InitializeFacetMap(MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern', MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern)
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern = MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95R_Type_Pattern
class MT548_SequenceD_AdditionalInformation_95R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1498, 1)
    _Documentation = None
MT548_SequenceD_AdditionalInformation_95R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT548_SequenceD_AdditionalInformation_95R_Type_Pattern._CF_pattern.addPattern(pattern="(:(MEOR|MERE|INVE|QFIN)/[A-Z0-9]{1,8}/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT548_SequenceD_AdditionalInformation_95R_Type_Pattern._InitializeFacetMap(MT548_SequenceD_AdditionalInformation_95R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95R_Type_Pattern', MT548_SequenceD_AdditionalInformation_95R_Type_Pattern)
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95R_Type_Pattern = MT548_SequenceD_AdditionalInformation_95R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT548_16R_Type
class MT548_16R_Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_16R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1511, 1)
    _Documentation = None
MT548_16R_Type._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'MT548_16R_Type', MT548_16R_Type)
_module_typeBindings.MT548_16R_Type = MT548_16R_Type

# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation with content type ELEMENT_ONLY
class MT548_SequenceA_GeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1514, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SendersMessageReference uses Python identifier SendersMessageReference
    __SendersMessageReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersMessageReference'), 'SendersMessageReference', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comSendersMessageReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1516, 3), )

    
    SendersMessageReference = property(__SendersMessageReference.value, __SendersMessageReference.set, None, None)

    
    # Element {http://www.w3schools.com}FunctionOfTheMessage uses Python identifier FunctionOfTheMessage
    __FunctionOfTheMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FunctionOfTheMessage'), 'FunctionOfTheMessage', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comFunctionOfTheMessage', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1517, 3), )

    
    FunctionOfTheMessage = property(__FunctionOfTheMessage.value, __FunctionOfTheMessage.set, None, None)

    
    # Element {http://www.w3schools.com}PreparationDateTime_A uses Python identifier PreparationDateTime_A
    __PreparationDateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_A'), 'PreparationDateTime_A', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comPreparationDateTime_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1519, 4), )

    
    PreparationDateTime_A = property(__PreparationDateTime_A.value, __PreparationDateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}PreparationDateTime_C uses Python identifier PreparationDateTime_C
    __PreparationDateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_C'), 'PreparationDateTime_C', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comPreparationDateTime_C', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1520, 4), )

    
    PreparationDateTime_C = property(__PreparationDateTime_C.value, __PreparationDateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}PreparationDateTime_E uses Python identifier PreparationDateTime_E
    __PreparationDateTime_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_E'), 'PreparationDateTime_E', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comPreparationDateTime_E', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1521, 4), )

    
    PreparationDateTime_E = property(__PreparationDateTime_E.value, __PreparationDateTime_E.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceA1_Linkages uses Python identifier SubSequenceA1_Linkages
    __SubSequenceA1_Linkages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA1_Linkages'), 'SubSequenceA1_Linkages', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comSubSequenceA1_Linkages', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1523, 3), )

    
    SubSequenceA1_Linkages = property(__SubSequenceA1_Linkages.value, __SubSequenceA1_Linkages.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceA2_Status uses Python identifier SubSequenceA2_Status
    __SubSequenceA2_Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2_Status'), 'SubSequenceA2_Status', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_httpwww_w3schools_comSubSequenceA2_Status', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1524, 3), )

    
    SubSequenceA2_Status = property(__SubSequenceA2_Status.value, __SubSequenceA2_Status.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1526, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1526, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1527, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1527, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='GENL')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1528, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1528, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SendersMessageReference.name() : __SendersMessageReference,
        __FunctionOfTheMessage.name() : __FunctionOfTheMessage,
        __PreparationDateTime_A.name() : __PreparationDateTime_A,
        __PreparationDateTime_C.name() : __PreparationDateTime_C,
        __PreparationDateTime_E.name() : __PreparationDateTime_E,
        __SubSequenceA1_Linkages.name() : __SubSequenceA1_Linkages,
        __SubSequenceA2_Status.name() : __SubSequenceA2_Status
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation = MT548_SequenceA_GeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation', MT548_SequenceA_GeneralInformation)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages with content type ELEMENT_ONLY
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1530, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}NumberIdentification_A uses Python identifier NumberIdentification_A
    __NumberIdentification_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_A'), 'NumberIdentification_A', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_httpwww_w3schools_comNumberIdentification_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1533, 4), )

    
    NumberIdentification_A = property(__NumberIdentification_A.value, __NumberIdentification_A.set, None, None)

    
    # Element {http://www.w3schools.com}NumberIdentification_B uses Python identifier NumberIdentification_B
    __NumberIdentification_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_B'), 'NumberIdentification_B', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_httpwww_w3schools_comNumberIdentification_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1534, 4), )

    
    NumberIdentification_B = property(__NumberIdentification_B.value, __NumberIdentification_B.set, None, None)

    
    # Element {http://www.w3schools.com}Reference_C uses Python identifier Reference_C
    __Reference_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference_C'), 'Reference_C', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_httpwww_w3schools_comReference_C', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1537, 4), )

    
    Reference_C = property(__Reference_C.value, __Reference_C.set, None, None)

    
    # Element {http://www.w3schools.com}Reference_U uses Python identifier Reference_U
    __Reference_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference_U'), 'Reference_U', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_httpwww_w3schools_comReference_U', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1538, 4), )

    
    Reference_U = property(__Reference_U.value, __Reference_U.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1541, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1541, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1542, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1542, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='LINK')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1543, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1543, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __NumberIdentification_A.name() : __NumberIdentification_A,
        __NumberIdentification_B.name() : __NumberIdentification_B,
        __Reference_C.name() : __Reference_C,
        __Reference_U.name() : __Reference_U
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status with content type ELEMENT_ONLY
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1545, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StatusCode uses Python identifier StatusCode
    __StatusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatusCode'), 'StatusCode', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_httpwww_w3schools_comStatusCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1547, 3), )

    
    StatusCode = property(__StatusCode.value, __StatusCode.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceA2a_Reason uses Python identifier SubSequenceA2a_Reason
    __SubSequenceA2a_Reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2a_Reason'), 'SubSequenceA2a_Reason', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_httpwww_w3schools_comSubSequenceA2a_Reason', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1548, 3), )

    
    SubSequenceA2a_Reason = property(__SubSequenceA2a_Reason.value, __SubSequenceA2a_Reason.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1550, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1550, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1551, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1551, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='STAT')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1552, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1552, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __StatusCode.name() : __StatusCode,
        __SubSequenceA2a_Reason.name() : __SubSequenceA2a_Reason
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason with content type ELEMENT_ONLY
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1554, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReasonCode uses Python identifier ReasonCode
    __ReasonCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), 'ReasonCode', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_httpwww_w3schools_comReasonCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1556, 3), )

    
    ReasonCode = property(__ReasonCode.value, __ReasonCode.set, None, None)

    
    # Element {http://www.w3schools.com}ReasonNarrative uses Python identifier ReasonNarrative
    __ReasonNarrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), 'ReasonNarrative', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_httpwww_w3schools_comReasonNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1557, 3), )

    
    ReasonNarrative = property(__ReasonNarrative.value, __ReasonNarrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1559, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1559, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1560, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1560, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='REAS')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1561, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1561, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __ReasonCode.name() : __ReasonCode,
        __ReasonNarrative.name() : __ReasonNarrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails with content type ELEMENT_ONLY
class MT548_SequenceB_SettlementTransactionDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1563, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Place_B uses Python identifier Place_B
    __Place_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_B'), 'Place_B', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comPlace_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1566, 4), )

    
    Place_B = property(__Place_B.value, __Place_B.set, None, None)

    
    # Element {http://www.w3schools.com}Place_C uses Python identifier Place_C
    __Place_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_C'), 'Place_C', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comPlace_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1567, 4), )

    
    Place_C = property(__Place_C.value, __Place_C.set, None, None)

    
    # Element {http://www.w3schools.com}Place_F uses Python identifier Place_F
    __Place_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_F'), 'Place_F', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comPlace_F', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1568, 4), )

    
    Place_F = property(__Place_F.value, __Place_F.set, None, None)

    
    # Element {http://www.w3schools.com}Place_H uses Python identifier Place_H
    __Place_H = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_H'), 'Place_H', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comPlace_H', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1569, 4), )

    
    Place_H = property(__Place_H.value, __Place_H.set, None, None)

    
    # Element {http://www.w3schools.com}Place_L uses Python identifier Place_L
    __Place_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_L'), 'Place_L', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comPlace_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1570, 4), )

    
    Place_L = property(__Place_L.value, __Place_L.set, None, None)

    
    # Element {http://www.w3schools.com}IdentificationOfTheFinancialInstrument uses Python identifier IdentificationOfTheFinancialInstrument
    __IdentificationOfTheFinancialInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfTheFinancialInstrument'), 'IdentificationOfTheFinancialInstrument', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comIdentificationOfTheFinancialInstrument', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1572, 3), )

    
    IdentificationOfTheFinancialInstrument = property(__IdentificationOfTheFinancialInstrument.value, __IdentificationOfTheFinancialInstrument.set, None, None)

    
    # Element {http://www.w3schools.com}QuantityOfFinancialInstrumentToBeSettled uses Python identifier QuantityOfFinancialInstrumentToBeSettled
    __QuantityOfFinancialInstrumentToBeSettled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrumentToBeSettled'), 'QuantityOfFinancialInstrumentToBeSettled', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comQuantityOfFinancialInstrumentToBeSettled', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1573, 3), )

    
    QuantityOfFinancialInstrumentToBeSettled = property(__QuantityOfFinancialInstrumentToBeSettled.value, __QuantityOfFinancialInstrumentToBeSettled.set, None, None)

    
    # Element {http://www.w3schools.com}Amount uses Python identifier Amount
    __Amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Amount'), 'Amount', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comAmount', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1574, 3), )

    
    Amount = property(__Amount.value, __Amount.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1576, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1577, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1578, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Element {http://www.w3schools.com}SafekeepingAccount_A uses Python identifier SafekeepingAccount_A
    __SafekeepingAccount_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A'), 'SafekeepingAccount_A', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comSafekeepingAccount_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1581, 4), )

    
    SafekeepingAccount_A = property(__SafekeepingAccount_A.value, __SafekeepingAccount_A.set, None, None)

    
    # Element {http://www.w3schools.com}SafekeepingAccount_B uses Python identifier SafekeepingAccount_B
    __SafekeepingAccount_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B'), 'SafekeepingAccount_B', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comSafekeepingAccount_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1582, 4), )

    
    SafekeepingAccount_B = property(__SafekeepingAccount_B.value, __SafekeepingAccount_B.set, None, None)

    
    # Element {http://www.w3schools.com}Indicator_F uses Python identifier Indicator_F
    __Indicator_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Indicator_F'), 'Indicator_F', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comIndicator_F', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1585, 4), )

    
    Indicator_F = property(__Indicator_F.value, __Indicator_F.set, None, None)

    
    # Element {http://www.w3schools.com}Indicator_H uses Python identifier Indicator_H
    __Indicator_H = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Indicator_H'), 'Indicator_H', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comIndicator_H', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1586, 4), )

    
    Indicator_H = property(__Indicator_H.value, __Indicator_H.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_A uses Python identifier DateTime_A
    __DateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), 'DateTime_A', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comDateTime_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1589, 4), )

    
    DateTime_A = property(__DateTime_A.value, __DateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_B uses Python identifier DateTime_B
    __DateTime_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B'), 'DateTime_B', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comDateTime_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1590, 4), )

    
    DateTime_B = property(__DateTime_B.value, __DateTime_B.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_C uses Python identifier DateTime_C
    __DateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), 'DateTime_C', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comDateTime_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1591, 4), )

    
    DateTime_C = property(__DateTime_C.value, __DateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_E uses Python identifier DateTime_E
    __DateTime_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_E'), 'DateTime_E', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comDateTime_E', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1592, 4), )

    
    DateTime_E = property(__DateTime_E.value, __DateTime_E.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementInstructionProcessingNarrative uses Python identifier SettlementInstructionProcessingNarrative
    __SettlementInstructionProcessingNarrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementInstructionProcessingNarrative'), 'SettlementInstructionProcessingNarrative', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comSettlementInstructionProcessingNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1594, 3), )

    
    SettlementInstructionProcessingNarrative = property(__SettlementInstructionProcessingNarrative.value, __SettlementInstructionProcessingNarrative.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceB1_SettlementParties uses Python identifier SubSequenceB1_SettlementParties
    __SubSequenceB1_SettlementParties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceB1_SettlementParties'), 'SubSequenceB1_SettlementParties', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_httpwww_w3schools_comSubSequenceB1_SettlementParties', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1595, 3), )

    
    SubSequenceB1_SettlementParties = property(__SubSequenceB1_SettlementParties.value, __SubSequenceB1_SettlementParties.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1597, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1597, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1598, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1598, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='SETTRAN')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1599, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1599, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Place_B.name() : __Place_B,
        __Place_C.name() : __Place_C,
        __Place_F.name() : __Place_F,
        __Place_H.name() : __Place_H,
        __Place_L.name() : __Place_L,
        __IdentificationOfTheFinancialInstrument.name() : __IdentificationOfTheFinancialInstrument,
        __QuantityOfFinancialInstrumentToBeSettled.name() : __QuantityOfFinancialInstrumentToBeSettled,
        __Amount.name() : __Amount,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_R.name() : __Party_R,
        __SafekeepingAccount_A.name() : __SafekeepingAccount_A,
        __SafekeepingAccount_B.name() : __SafekeepingAccount_B,
        __Indicator_F.name() : __Indicator_F,
        __Indicator_H.name() : __Indicator_H,
        __DateTime_A.name() : __DateTime_A,
        __DateTime_B.name() : __DateTime_B,
        __DateTime_C.name() : __DateTime_C,
        __DateTime_E.name() : __DateTime_E,
        __SettlementInstructionProcessingNarrative.name() : __SettlementInstructionProcessingNarrative,
        __SubSequenceB1_SettlementParties.name() : __SubSequenceB1_SettlementParties
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails = MT548_SequenceB_SettlementTransactionDetails
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails', MT548_SequenceB_SettlementTransactionDetails)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties with content type ELEMENT_ONLY
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1601, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Party_C uses Python identifier Party_C
    __Party_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_C'), 'Party_C', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comParty_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1604, 4), )

    
    Party_C = property(__Party_C.value, __Party_C.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1605, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1606, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_Q uses Python identifier Party_Q
    __Party_Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), 'Party_Q', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comParty_Q', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1607, 4), )

    
    Party_Q = property(__Party_Q.value, __Party_Q.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1608, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Element {http://www.w3schools.com}SafekeepingAccount_A uses Python identifier SafekeepingAccount_A
    __SafekeepingAccount_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A'), 'SafekeepingAccount_A', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comSafekeepingAccount_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1611, 4), )

    
    SafekeepingAccount_A = property(__SafekeepingAccount_A.value, __SafekeepingAccount_A.set, None, None)

    
    # Element {http://www.w3schools.com}SafekeepingAccount_B uses Python identifier SafekeepingAccount_B
    __SafekeepingAccount_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B'), 'SafekeepingAccount_B', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comSafekeepingAccount_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1612, 4), )

    
    SafekeepingAccount_B = property(__SafekeepingAccount_B.value, __SafekeepingAccount_B.set, None, None)

    
    # Element {http://www.w3schools.com}ProcessingReference uses Python identifier ProcessingReference
    __ProcessingReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProcessingReference'), 'ProcessingReference', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_httpwww_w3schools_comProcessingReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1614, 3), )

    
    ProcessingReference = property(__ProcessingReference.value, __ProcessingReference.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1616, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1616, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1617, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1617, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='SETPRTY')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1618, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1618, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Party_C.name() : __Party_C,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_Q.name() : __Party_Q,
        __Party_R.name() : __Party_R,
        __SafekeepingAccount_A.name() : __SafekeepingAccount_A,
        __SafekeepingAccount_B.name() : __SafekeepingAccount_B,
        __ProcessingReference.name() : __ProcessingReference
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1620, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StatementPeriod_A uses Python identifier StatementPeriod_A
    __StatementPeriod_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_A'), 'StatementPeriod_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comStatementPeriod_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1623, 4), )

    
    StatementPeriod_A = property(__StatementPeriod_A.value, __StatementPeriod_A.set, None, None)

    
    # Element {http://www.w3schools.com}StatementPeriod_B uses Python identifier StatementPeriod_B
    __StatementPeriod_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_B'), 'StatementPeriod_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comStatementPeriod_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1624, 4), )

    
    StatementPeriod_B = property(__StatementPeriod_B.value, __StatementPeriod_B.set, None, None)

    
    # Element {http://www.w3schools.com}CompleteUpdatesIndicator uses Python identifier CompleteUpdatesIndicator
    __CompleteUpdatesIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CompleteUpdatesIndicator'), 'CompleteUpdatesIndicator', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comCompleteUpdatesIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1626, 3), )

    
    CompleteUpdatesIndicator = property(__CompleteUpdatesIndicator.value, __CompleteUpdatesIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1628, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1629, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1_PenaltiesPerCurrencyForAParty uses Python identifier SubSequenceC1_PenaltiesPerCurrencyForAParty
    __SubSequenceC1_PenaltiesPerCurrencyForAParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1_PenaltiesPerCurrencyForAParty'), 'SubSequenceC1_PenaltiesPerCurrencyForAParty', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comSubSequenceC1_PenaltiesPerCurrencyForAParty', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1631, 3), )

    
    SubSequenceC1_PenaltiesPerCurrencyForAParty = property(__SubSequenceC1_PenaltiesPerCurrencyForAParty.value, __SubSequenceC1_PenaltiesPerCurrencyForAParty.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1632, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1634, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1634, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1635, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1635, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='PENA')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1636, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1636, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __StatementPeriod_A.name() : __StatementPeriod_A,
        __StatementPeriod_B.name() : __StatementPeriod_B,
        __CompleteUpdatesIndicator.name() : __CompleteUpdatesIndicator,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __SubSequenceC1_PenaltiesPerCurrencyForAParty.name() : __SubSequenceC1_PenaltiesPerCurrencyForAParty,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties = MT548_SequenceC_Penalties
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties', MT548_SequenceC_Penalties)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1638, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}CurrencyOfPenalties uses Python identifier CurrencyOfPenalties
    __CurrencyOfPenalties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOfPenalties'), 'CurrencyOfPenalties', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comCurrencyOfPenalties', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1640, 3), )

    
    CurrencyOfPenalties = property(__CurrencyOfPenalties.value, __CurrencyOfPenalties.set, None, None)

    
    # Element {http://www.w3schools.com}ComputationDateTime_A uses Python identifier ComputationDateTime_A
    __ComputationDateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_A'), 'ComputationDateTime_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comComputationDateTime_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1642, 4), )

    
    ComputationDateTime_A = property(__ComputationDateTime_A.value, __ComputationDateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}ComputationDateTime_C uses Python identifier ComputationDateTime_C
    __ComputationDateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_C'), 'ComputationDateTime_C', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comComputationDateTime_C', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1643, 4), )

    
    ComputationDateTime_C = property(__ComputationDateTime_C.value, __ComputationDateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1646, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1647, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_Q uses Python identifier Party_Q
    __Party_Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), 'Party_Q', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comParty_Q', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1648, 4), )

    
    Party_Q = property(__Party_Q.value, __Party_Q.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1649, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Element {http://www.w3schools.com}PartyCapacityIndicator uses Python identifier PartyCapacityIndicator
    __PartyCapacityIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator'), 'PartyCapacityIndicator', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comPartyCapacityIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1651, 3), )

    
    PartyCapacityIndicator = property(__PartyCapacityIndicator.value, __PartyCapacityIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a_PenaltiesPerCounterParty uses Python identifier SubSequenceC1a_PenaltiesPerCounterParty
    __SubSequenceC1a_PenaltiesPerCounterParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a_PenaltiesPerCounterParty'), 'SubSequenceC1a_PenaltiesPerCounterParty', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comSubSequenceC1a_PenaltiesPerCounterParty', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1652, 3), )

    
    SubSequenceC1a_PenaltiesPerCounterParty = property(__SubSequenceC1a_PenaltiesPerCounterParty.value, __SubSequenceC1a_PenaltiesPerCounterParty.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1653, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1655, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1655, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1656, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1656, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='PENACUR')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1657, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1657, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __CurrencyOfPenalties.name() : __CurrencyOfPenalties,
        __ComputationDateTime_A.name() : __ComputationDateTime_A,
        __ComputationDateTime_C.name() : __ComputationDateTime_C,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_Q.name() : __Party_Q,
        __Party_R.name() : __Party_R,
        __PartyCapacityIndicator.name() : __PartyCapacityIndicator,
        __SubSequenceC1a_PenaltiesPerCounterParty.name() : __SubSequenceC1a_PenaltiesPerCounterParty,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1659, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1662, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1663, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_Q uses Python identifier Party_Q
    __Party_Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), 'Party_Q', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comParty_Q', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1664, 4), )

    
    Party_Q = property(__Party_Q.value, __Party_Q.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1665, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Element {http://www.w3schools.com}PartyCapacityIndicator uses Python identifier PartyCapacityIndicator
    __PartyCapacityIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator'), 'PartyCapacityIndicator', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comPartyCapacityIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1667, 3), )

    
    PartyCapacityIndicator = property(__PartyCapacityIndicator.value, __PartyCapacityIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}BilateralNetAmount uses Python identifier BilateralNetAmount
    __BilateralNetAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BilateralNetAmount'), 'BilateralNetAmount', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comBilateralNetAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1668, 3), )

    
    BilateralNetAmount = property(__BilateralNetAmount.value, __BilateralNetAmount.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1_PenaltyDetails uses Python identifier SubSequenceC1a1_PenaltyDetails
    __SubSequenceC1a1_PenaltyDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1_PenaltyDetails'), 'SubSequenceC1a1_PenaltyDetails', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comSubSequenceC1a1_PenaltyDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1669, 3), )

    
    SubSequenceC1a1_PenaltyDetails = property(__SubSequenceC1a1_PenaltyDetails.value, __SubSequenceC1a1_PenaltyDetails.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1670, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1672, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1672, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1673, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1673, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='PENACOUNT')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1674, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1674, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_Q.name() : __Party_Q,
        __Party_R.name() : __Party_R,
        __PartyCapacityIndicator.name() : __PartyCapacityIndicator,
        __BilateralNetAmount.name() : __BilateralNetAmount,
        __SubSequenceC1a1_PenaltyDetails.name() : __SubSequenceC1a1_PenaltyDetails,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1676, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Reference uses Python identifier Reference
    __Reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference'), 'Reference', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comReference', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1678, 3), )

    
    Reference = property(__Reference.value, __Reference.set, None, None)

    
    # Element {http://www.w3schools.com}PenaltyType uses Python identifier PenaltyType
    __PenaltyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PenaltyType'), 'PenaltyType', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comPenaltyType', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1679, 3), )

    
    PenaltyType = property(__PenaltyType.value, __PenaltyType.set, None, None)

    
    # Element {http://www.w3schools.com}AmountComputedFlag uses Python identifier AmountComputedFlag
    __AmountComputedFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmountComputedFlag'), 'AmountComputedFlag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comAmountComputedFlag', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1680, 3), )

    
    AmountComputedFlag = property(__AmountComputedFlag.value, __AmountComputedFlag.set, None, None)

    
    # Element {http://www.w3schools.com}PenaltyStatus uses Python identifier PenaltyStatus
    __PenaltyStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PenaltyStatus'), 'PenaltyStatus', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comPenaltyStatus', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1681, 3), )

    
    PenaltyStatus = property(__PenaltyStatus.value, __PenaltyStatus.set, None, None)

    
    # Element {http://www.w3schools.com}ReasonCode uses Python identifier ReasonCode
    __ReasonCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), 'ReasonCode', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comReasonCode', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1682, 3), )

    
    ReasonCode = property(__ReasonCode.value, __ReasonCode.set, None, None)

    
    # Element {http://www.w3schools.com}ReasonNarrative uses Python identifier ReasonNarrative
    __ReasonNarrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), 'ReasonNarrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comReasonNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1683, 3), )

    
    ReasonNarrative = property(__ReasonNarrative.value, __ReasonNarrative.set, None, None)

    
    # Element {http://www.w3schools.com}AmountComputed uses Python identifier AmountComputed
    __AmountComputed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmountComputed'), 'AmountComputed', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comAmountComputed', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1684, 3), )

    
    AmountComputed = property(__AmountComputed.value, __AmountComputed.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationMethod uses Python identifier CalculationMethod
    __CalculationMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationMethod'), 'CalculationMethod', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comCalculationMethod', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1685, 3), )

    
    CalculationMethod = property(__CalculationMethod.value, __CalculationMethod.set, None, None)

    
    # Element {http://www.w3schools.com}NumberDays uses Python identifier NumberDays
    __NumberDays = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberDays'), 'NumberDays', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comNumberDays', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1686, 3), )

    
    NumberDays = property(__NumberDays.value, __NumberDays.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A_CalculationDetails uses Python identifier SubSequenceC1a1A_CalculationDetails
    __SubSequenceC1a1A_CalculationDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A_CalculationDetails'), 'SubSequenceC1a1A_CalculationDetails', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comSubSequenceC1a1A_CalculationDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1687, 3), )

    
    SubSequenceC1a1A_CalculationDetails = property(__SubSequenceC1a1A_CalculationDetails.value, __SubSequenceC1a1A_CalculationDetails.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1688, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1690, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1690, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1691, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1691, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='PENDET')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1692, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1692, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Reference.name() : __Reference,
        __PenaltyType.name() : __PenaltyType,
        __AmountComputedFlag.name() : __AmountComputedFlag,
        __PenaltyStatus.name() : __PenaltyStatus,
        __ReasonCode.name() : __ReasonCode,
        __ReasonNarrative.name() : __ReasonNarrative,
        __AmountComputed.name() : __AmountComputed,
        __CalculationMethod.name() : __CalculationMethod,
        __NumberDays.name() : __NumberDays,
        __SubSequenceC1a1A_CalculationDetails.name() : __SubSequenceC1a1A_CalculationDetails,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1694, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}PenaltyDateTime_A uses Python identifier PenaltyDateTime_A
    __PenaltyDateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_A'), 'PenaltyDateTime_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comPenaltyDateTime_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1697, 4), )

    
    PenaltyDateTime_A = property(__PenaltyDateTime_A.value, __PenaltyDateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}PenaltyDateTime_C uses Python identifier PenaltyDateTime_C
    __PenaltyDateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_C'), 'PenaltyDateTime_C', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comPenaltyDateTime_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1698, 4), )

    
    PenaltyDateTime_C = property(__PenaltyDateTime_C.value, __PenaltyDateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}PenaltyDateTime_E uses Python identifier PenaltyDateTime_E
    __PenaltyDateTime_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_E'), 'PenaltyDateTime_E', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comPenaltyDateTime_E', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1699, 4), )

    
    PenaltyDateTime_E = property(__PenaltyDateTime_E.value, __PenaltyDateTime_E.set, None, None)

    
    # Element {http://www.w3schools.com}MissingReferenceData uses Python identifier MissingReferenceData
    __MissingReferenceData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingReferenceData'), 'MissingReferenceData', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comMissingReferenceData', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1701, 3), )

    
    MissingReferenceData = property(__MissingReferenceData.value, __MissingReferenceData.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A1_FinancialInstrumentAttributes uses Python identifier SubSequenceC1a1A1_FinancialInstrumentAttributes
    __SubSequenceC1a1A1_FinancialInstrumentAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A1_FinancialInstrumentAttributes'), 'SubSequenceC1a1A1_FinancialInstrumentAttributes', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comSubSequenceC1a1A1_FinancialInstrumentAttributes', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1702, 3), )

    
    SubSequenceC1a1A1_FinancialInstrumentAttributes = property(__SubSequenceC1a1A1_FinancialInstrumentAttributes.value, __SubSequenceC1a1A1_FinancialInstrumentAttributes.set, None, None)

    
    # Element {http://www.w3schools.com}Rate_A uses Python identifier Rate_A
    __Rate_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Rate_A'), 'Rate_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comRate_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1704, 4), )

    
    Rate_A = property(__Rate_A.value, __Rate_A.set, None, None)

    
    # Element {http://www.w3schools.com}Rate_B uses Python identifier Rate_B
    __Rate_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Rate_B'), 'Rate_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comRate_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1705, 4), )

    
    Rate_B = property(__Rate_B.value, __Rate_B.set, None, None)

    
    # Element {http://www.w3schools.com}Amount uses Python identifier Amount
    __Amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Amount'), 'Amount', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comAmount', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1707, 3), )

    
    Amount = property(__Amount.value, __Amount.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A2_RelatedTransaction uses Python identifier SubSequenceC1a1A2_RelatedTransaction
    __SubSequenceC1a1A2_RelatedTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2_RelatedTransaction'), 'SubSequenceC1a1A2_RelatedTransaction', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comSubSequenceC1a1A2_RelatedTransaction', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1708, 3), )

    
    SubSequenceC1a1A2_RelatedTransaction = property(__SubSequenceC1a1A2_RelatedTransaction.value, __SubSequenceC1a1A2_RelatedTransaction.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1709, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1711, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1711, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1712, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1712, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='CALDET')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1713, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1713, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __PenaltyDateTime_A.name() : __PenaltyDateTime_A,
        __PenaltyDateTime_C.name() : __PenaltyDateTime_C,
        __PenaltyDateTime_E.name() : __PenaltyDateTime_E,
        __MissingReferenceData.name() : __MissingReferenceData,
        __SubSequenceC1a1A1_FinancialInstrumentAttributes.name() : __SubSequenceC1a1A1_FinancialInstrumentAttributes,
        __Rate_A.name() : __Rate_A,
        __Rate_B.name() : __Rate_B,
        __Amount.name() : __Amount,
        __SubSequenceC1a1A2_RelatedTransaction.name() : __SubSequenceC1a1A2_RelatedTransaction,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1715, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}IdentificationOfFinancialInstrument uses Python identifier IdentificationOfFinancialInstrument
    __IdentificationOfFinancialInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument'), 'IdentificationOfFinancialInstrument', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comIdentificationOfFinancialInstrument', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1717, 3), )

    
    IdentificationOfFinancialInstrument = property(__IdentificationOfFinancialInstrument.value, __IdentificationOfFinancialInstrument.set, None, None)

    
    # Element {http://www.w3schools.com}TypeOfFinancialInstrument_A uses Python identifier TypeOfFinancialInstrument_A
    __TypeOfFinancialInstrument_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_A'), 'TypeOfFinancialInstrument_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comTypeOfFinancialInstrument_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1719, 4), )

    
    TypeOfFinancialInstrument_A = property(__TypeOfFinancialInstrument_A.value, __TypeOfFinancialInstrument_A.set, None, None)

    
    # Element {http://www.w3schools.com}TypeOfFinancialInstrument_C uses Python identifier TypeOfFinancialInstrument_C
    __TypeOfFinancialInstrument_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_C'), 'TypeOfFinancialInstrument_C', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comTypeOfFinancialInstrument_C', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1720, 4), )

    
    TypeOfFinancialInstrument_C = property(__TypeOfFinancialInstrument_C.value, __TypeOfFinancialInstrument_C.set, None, None)

    
    # Element {http://www.w3schools.com}Flag uses Python identifier Flag
    __Flag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Flag'), 'Flag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comFlag', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1722, 3), )

    
    Flag = property(__Flag.value, __Flag.set, None, None)

    
    # Element {http://www.w3schools.com}Price_A uses Python identifier Price_A
    __Price_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Price_A'), 'Price_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comPrice_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1724, 4), )

    
    Price_A = property(__Price_A.value, __Price_A.set, None, None)

    
    # Element {http://www.w3schools.com}Price_B uses Python identifier Price_B
    __Price_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Price_B'), 'Price_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comPrice_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1725, 4), )

    
    Price_B = property(__Price_B.value, __Price_B.set, None, None)

    
    # Element {http://www.w3schools.com}Place_B uses Python identifier Place_B
    __Place_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_B'), 'Place_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comPlace_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1728, 4), )

    
    Place_B = property(__Place_B.value, __Place_B.set, None, None)

    
    # Element {http://www.w3schools.com}Place_L uses Python identifier Place_L
    __Place_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Place_L'), 'Place_L', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comPlace_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1729, 4), )

    
    Place_L = property(__Place_L.value, __Place_L.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_A uses Python identifier DateTime_A
    __DateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), 'DateTime_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comDateTime_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1732, 4), )

    
    DateTime_A = property(__DateTime_A.value, __DateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_C uses Python identifier DateTime_C
    __DateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), 'DateTime_C', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comDateTime_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1733, 4), )

    
    DateTime_C = property(__DateTime_C.value, __DateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}Rate_A uses Python identifier Rate_A
    __Rate_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Rate_A'), 'Rate_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comRate_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1736, 4), )

    
    Rate_A = property(__Rate_A.value, __Rate_A.set, None, None)

    
    # Element {http://www.w3schools.com}Rate_B uses Python identifier Rate_B
    __Rate_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Rate_B'), 'Rate_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comRate_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1737, 4), )

    
    Rate_B = property(__Rate_B.value, __Rate_B.set, None, None)

    
    # Element {http://www.w3schools.com}FinancialInstrumentAttributeNarrative uses Python identifier FinancialInstrumentAttributeNarrative
    __FinancialInstrumentAttributeNarrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstrumentAttributeNarrative'), 'FinancialInstrumentAttributeNarrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_httpwww_w3schools_comFinancialInstrumentAttributeNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1739, 3), )

    
    FinancialInstrumentAttributeNarrative = property(__FinancialInstrumentAttributeNarrative.value, __FinancialInstrumentAttributeNarrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1741, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1741, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1742, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1742, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='FIA')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1743, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1743, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __IdentificationOfFinancialInstrument.name() : __IdentificationOfFinancialInstrument,
        __TypeOfFinancialInstrument_A.name() : __TypeOfFinancialInstrument_A,
        __TypeOfFinancialInstrument_C.name() : __TypeOfFinancialInstrument_C,
        __Flag.name() : __Flag,
        __Price_A.name() : __Price_A,
        __Price_B.name() : __Price_B,
        __Place_B.name() : __Place_B,
        __Place_L.name() : __Place_L,
        __DateTime_A.name() : __DateTime_A,
        __DateTime_C.name() : __DateTime_C,
        __Rate_A.name() : __Rate_A,
        __Rate_B.name() : __Rate_B,
        __FinancialInstrumentAttributeNarrative.name() : __FinancialInstrumentAttributeNarrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1745, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Reference uses Python identifier Reference
    __Reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference'), 'Reference', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_httpwww_w3schools_comReference', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1747, 3), )

    
    Reference = property(__Reference.value, __Reference.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A2a_TransactionDetails uses Python identifier SubSequenceC1a1A2a_TransactionDetails
    __SubSequenceC1a1A2a_TransactionDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a_TransactionDetails'), 'SubSequenceC1a1A2a_TransactionDetails', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_httpwww_w3schools_comSubSequenceC1a1A2a_TransactionDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1748, 3), )

    
    SubSequenceC1a1A2a_TransactionDetails = property(__SubSequenceC1a1A2a_TransactionDetails.value, __SubSequenceC1a1A2a_TransactionDetails.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1750, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1750, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1751, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1751, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='RELTRAN')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1752, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1752, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Reference.name() : __Reference,
        __SubSequenceC1a1A2a_TransactionDetails.name() : __SubSequenceC1a1A2a_TransactionDetails
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1754, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TypeIndicator uses Python identifier TypeIndicator
    __TypeIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeIndicator'), 'TypeIndicator', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comTypeIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1756, 3), )

    
    TypeIndicator = property(__TypeIndicator.value, __TypeIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_A uses Python identifier DateTime_A
    __DateTime_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), 'DateTime_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comDateTime_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1758, 4), )

    
    DateTime_A = property(__DateTime_A.value, __DateTime_A.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_B uses Python identifier DateTime_B
    __DateTime_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B'), 'DateTime_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comDateTime_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1759, 4), )

    
    DateTime_B = property(__DateTime_B.value, __DateTime_B.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime_C uses Python identifier DateTime_C
    __DateTime_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), 'DateTime_C', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comDateTime_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1760, 4), )

    
    DateTime_C = property(__DateTime_C.value, __DateTime_C.set, None, None)

    
    # Element {http://www.w3schools.com}Account_A uses Python identifier Account_A
    __Account_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Account_A'), 'Account_A', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comAccount_A', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1763, 4), )

    
    Account_A = property(__Account_A.value, __Account_A.set, None, None)

    
    # Element {http://www.w3schools.com}Account_B uses Python identifier Account_B
    __Account_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Account_B'), 'Account_B', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comAccount_B', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1764, 4), )

    
    Account_B = property(__Account_B.value, __Account_B.set, None, None)

    
    # Element {http://www.w3schools.com}Account_E uses Python identifier Account_E
    __Account_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Account_E'), 'Account_E', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comAccount_E', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1765, 4), )

    
    Account_E = property(__Account_E.value, __Account_E.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1768, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1769, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_Q uses Python identifier Party_Q
    __Party_Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), 'Party_Q', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comParty_Q', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1770, 4), )

    
    Party_Q = property(__Party_Q.value, __Party_Q.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1771, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Element {http://www.w3schools.com}Indicator uses Python identifier Indicator
    __Indicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Indicator'), 'Indicator', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comIndicator', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1773, 3), )

    
    Indicator = property(__Indicator.value, __Indicator.set, None, None)

    
    # Element {http://www.w3schools.com}QuantityOfFinancialInstrument uses Python identifier QuantityOfFinancialInstrument
    __QuantityOfFinancialInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrument'), 'QuantityOfFinancialInstrument', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comQuantityOfFinancialInstrument', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1774, 3), )

    
    QuantityOfFinancialInstrument = property(__QuantityOfFinancialInstrument.value, __QuantityOfFinancialInstrument.set, None, None)

    
    # Element {http://www.w3schools.com}PostingAmount uses Python identifier PostingAmount
    __PostingAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PostingAmount'), 'PostingAmount', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comPostingAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1775, 3), )

    
    PostingAmount = property(__PostingAmount.value, __PostingAmount.set, None, None)

    
    # Element {http://www.w3schools.com}DateTime uses Python identifier DateTime
    __DateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTime'), 'DateTime', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comDateTime', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1776, 3), )

    
    DateTime = property(__DateTime.value, __DateTime.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A2a1_Status uses Python identifier SubSequenceC1a1A2a1_Status
    __SubSequenceC1a1A2a1_Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1_Status'), 'SubSequenceC1a1A2a1_Status', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comSubSequenceC1a1A2a1_Status', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1777, 3), )

    
    SubSequenceC1a1A2a1_Status = property(__SubSequenceC1a1A2a1_Status.value, __SubSequenceC1a1A2a1_Status.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1778, 3), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1780, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1780, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1781, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1781, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='TRAN')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1782, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1782, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __TypeIndicator.name() : __TypeIndicator,
        __DateTime_A.name() : __DateTime_A,
        __DateTime_B.name() : __DateTime_B,
        __DateTime_C.name() : __DateTime_C,
        __Account_A.name() : __Account_A,
        __Account_B.name() : __Account_B,
        __Account_E.name() : __Account_E,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_Q.name() : __Party_Q,
        __Party_R.name() : __Party_R,
        __Indicator.name() : __Indicator,
        __QuantityOfFinancialInstrument.name() : __QuantityOfFinancialInstrument,
        __PostingAmount.name() : __PostingAmount,
        __DateTime.name() : __DateTime,
        __SubSequenceC1a1A2a1_Status.name() : __SubSequenceC1a1A2a1_Status,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1784, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StatusCode uses Python identifier StatusCode
    __StatusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatusCode'), 'StatusCode', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_httpwww_w3schools_comStatusCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1786, 3), )

    
    StatusCode = property(__StatusCode.value, __StatusCode.set, None, None)

    
    # Element {http://www.w3schools.com}SubSequenceC1a1A2a1A_Reason uses Python identifier SubSequenceC1a1A2a1A_Reason
    __SubSequenceC1a1A2a1A_Reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1A_Reason'), 'SubSequenceC1a1A2a1A_Reason', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_httpwww_w3schools_comSubSequenceC1a1A2a1A_Reason', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1787, 3), )

    
    SubSequenceC1a1A2a1A_Reason = property(__SubSequenceC1a1A2a1A_Reason.value, __SubSequenceC1a1A2a1A_Reason.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1789, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1789, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1790, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1790, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='STAT')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1791, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1791, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __StatusCode.name() : __StatusCode,
        __SubSequenceC1a1A2a1A_Reason.name() : __SubSequenceC1a1A2a1A_Reason
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason with content type ELEMENT_ONLY
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1793, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReasonCode uses Python identifier ReasonCode
    __ReasonCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), 'ReasonCode', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_httpwww_w3schools_comReasonCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1795, 3), )

    
    ReasonCode = property(__ReasonCode.value, __ReasonCode.set, None, None)

    
    # Element {http://www.w3schools.com}ReasonNarrative uses Python identifier ReasonNarrative
    __ReasonNarrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), 'ReasonNarrative', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_httpwww_w3schools_comReasonNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1796, 3), )

    
    ReasonNarrative = property(__ReasonNarrative.value, __ReasonNarrative.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1798, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1798, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1799, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1799, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='REAS')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1800, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1800, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __ReasonCode.name() : __ReasonCode,
        __ReasonNarrative.name() : __ReasonNarrative
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation with content type ELEMENT_ONLY
class MT548_SequenceD_AdditionalInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1802, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}Party_C uses Python identifier Party_C
    __Party_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_C'), 'Party_C', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_httpwww_w3schools_comParty_C', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1805, 4), )

    
    Party_C = property(__Party_C.value, __Party_C.set, None, None)

    
    # Element {http://www.w3schools.com}Party_L uses Python identifier Party_L
    __Party_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), 'Party_L', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_httpwww_w3schools_comParty_L', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1806, 4), )

    
    Party_L = property(__Party_L.value, __Party_L.set, None, None)

    
    # Element {http://www.w3schools.com}Party_P uses Python identifier Party_P
    __Party_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), 'Party_P', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_httpwww_w3schools_comParty_P', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1807, 4), )

    
    Party_P = property(__Party_P.value, __Party_P.set, None, None)

    
    # Element {http://www.w3schools.com}Party_Q uses Python identifier Party_Q
    __Party_Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), 'Party_Q', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_httpwww_w3schools_comParty_Q', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1808, 4), )

    
    Party_Q = property(__Party_Q.value, __Party_Q.set, None, None)

    
    # Element {http://www.w3schools.com}Party_R uses Python identifier Party_R
    __Party_R = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), 'Party_R', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_httpwww_w3schools_comParty_R', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1809, 4), )

    
    Party_R = property(__Party_R.value, __Party_R.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1812, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1812, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1813, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1813, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='ADDINFO')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1814, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1814, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __Party_C.name() : __Party_C,
        __Party_L.name() : __Party_L,
        __Party_P.name() : __Party_P,
        __Party_Q.name() : __Party_Q,
        __Party_R.name() : __Party_R
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation = MT548_SequenceD_AdditionalInformation
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation', MT548_SequenceD_AdditionalInformation)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1817, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SequenceA_GeneralInformation uses Python identifier SequenceA_GeneralInformation
    __SequenceA_GeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), 'SequenceA_GeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceA_GeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1819, 4), )

    
    SequenceA_GeneralInformation = property(__SequenceA_GeneralInformation.value, __SequenceA_GeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceB_SettlementTransactionDetails uses Python identifier SequenceB_SettlementTransactionDetails
    __SequenceB_SettlementTransactionDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_SettlementTransactionDetails'), 'SequenceB_SettlementTransactionDetails', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceB_SettlementTransactionDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1820, 4), )

    
    SequenceB_SettlementTransactionDetails = property(__SequenceB_SettlementTransactionDetails.value, __SequenceB_SettlementTransactionDetails.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceC_Penalties uses Python identifier SequenceC_Penalties
    __SequenceC_Penalties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_Penalties'), 'SequenceC_Penalties', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceC_Penalties', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1821, 4), )

    
    SequenceC_Penalties = property(__SequenceC_Penalties.value, __SequenceC_Penalties.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceD_AdditionalInformation uses Python identifier SequenceD_AdditionalInformation
    __SequenceD_AdditionalInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AdditionalInformation'), 'SequenceD_AdditionalInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceD_AdditionalInformation', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1822, 4), )

    
    SequenceD_AdditionalInformation = property(__SequenceD_AdditionalInformation.value, __SequenceD_AdditionalInformation.set, None, None)

    _ElementMap.update({
        __SequenceA_GeneralInformation.name() : __SequenceA_GeneralInformation,
        __SequenceB_SettlementTransactionDetails.name() : __SequenceB_SettlementTransactionDetails,
        __SequenceC_Penalties.name() : __SequenceC_Penalties,
        __SequenceD_AdditionalInformation.name() : __SequenceD_AdditionalInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_20C_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_20C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_20C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_20C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_20C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_20C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_20C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_20C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_20C_Type = MT548_SequenceA_GeneralInformation_20C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_20C_Type', MT548_SequenceA_GeneralInformation_20C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_23G_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_23G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_23G_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_23G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_23G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_23G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_23G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='23G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_23G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_23G_Type = MT548_SequenceA_GeneralInformation_23G_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_23G_Type', MT548_SequenceA_GeneralInformation_23G_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98A_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_98A_Type = MT548_SequenceA_GeneralInformation_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98A_Type', MT548_SequenceA_GeneralInformation_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98C_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_98C_Type = MT548_SequenceA_GeneralInformation_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98C_Type', MT548_SequenceA_GeneralInformation_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98E_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_98E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_98E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_98E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_98E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_98E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_98E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_98E_Type = MT548_SequenceA_GeneralInformation_98E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_98E_Type', MT548_SequenceA_GeneralInformation_98E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type = MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type', MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='24B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type with content type SIMPLE
class MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type = MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type', MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_94B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_94B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94B_Type = MT548_SequenceB_SettlementTransactionDetails_94B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94B_Type', MT548_SequenceB_SettlementTransactionDetails_94B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94C_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_94C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_94C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94C_Type = MT548_SequenceB_SettlementTransactionDetails_94C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94C_Type', MT548_SequenceB_SettlementTransactionDetails_94C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94F_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_94F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_94F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94F_Type = MT548_SequenceB_SettlementTransactionDetails_94F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94F_Type', MT548_SequenceB_SettlementTransactionDetails_94F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94H_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_94H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94H_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_94H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94H_Type = MT548_SequenceB_SettlementTransactionDetails_94H_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94H_Type', MT548_SequenceB_SettlementTransactionDetails_94H_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94L_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_94L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_94L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_94L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_94L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_94L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_94L_Type = MT548_SequenceB_SettlementTransactionDetails_94L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_94L_Type', MT548_SequenceB_SettlementTransactionDetails_94L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_35B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_35B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_35B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_35B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_35B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_35B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='35B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_35B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_35B_Type = MT548_SequenceB_SettlementTransactionDetails_35B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_35B_Type', MT548_SequenceB_SettlementTransactionDetails_35B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_36B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_36B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_36B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_36B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_36B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_36B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_36B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_36B_Type = MT548_SequenceB_SettlementTransactionDetails_36B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_36B_Type', MT548_SequenceB_SettlementTransactionDetails_36B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_19A_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_19A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_19A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_19A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_19A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_19A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_19A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_19A_Type = MT548_SequenceB_SettlementTransactionDetails_19A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_19A_Type', MT548_SequenceB_SettlementTransactionDetails_19A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95L_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95L_Type = MT548_SequenceB_SettlementTransactionDetails_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95L_Type', MT548_SequenceB_SettlementTransactionDetails_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95P_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95P_Type = MT548_SequenceB_SettlementTransactionDetails_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95P_Type', MT548_SequenceB_SettlementTransactionDetails_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95R_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_95R_Type = MT548_SequenceB_SettlementTransactionDetails_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_95R_Type', MT548_SequenceB_SettlementTransactionDetails_95R_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97A_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_97A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_97A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_97A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_97A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_97A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_97A_Type = MT548_SequenceB_SettlementTransactionDetails_97A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_97A_Type', MT548_SequenceB_SettlementTransactionDetails_97A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_97B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_97B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_97B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_97B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_97B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_97B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_97B_Type = MT548_SequenceB_SettlementTransactionDetails_97B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_97B_Type', MT548_SequenceB_SettlementTransactionDetails_97B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22F_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_22F_Type = MT548_SequenceB_SettlementTransactionDetails_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_22F_Type', MT548_SequenceB_SettlementTransactionDetails_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22H_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_22H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_22H_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_22H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_22H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_22H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_22H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_22H_Type = MT548_SequenceB_SettlementTransactionDetails_22H_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_22H_Type', MT548_SequenceB_SettlementTransactionDetails_22H_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98A_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98A_Type = MT548_SequenceB_SettlementTransactionDetails_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98A_Type', MT548_SequenceB_SettlementTransactionDetails_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_98B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_98B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98B_Type = MT548_SequenceB_SettlementTransactionDetails_98B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98B_Type', MT548_SequenceB_SettlementTransactionDetails_98B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98C_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98C_Type = MT548_SequenceB_SettlementTransactionDetails_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98C_Type', MT548_SequenceB_SettlementTransactionDetails_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98E_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_98E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_98E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_98E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_98E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_98E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_98E_Type = MT548_SequenceB_SettlementTransactionDetails_98E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_98E_Type', MT548_SequenceB_SettlementTransactionDetails_98E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_70E_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_70E_Type = MT548_SequenceB_SettlementTransactionDetails_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_70E_Type', MT548_SequenceB_SettlementTransactionDetails_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 502, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 505, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 505, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 506, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 506, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type with content type SIMPLE
class MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 515, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 518, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 518, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 519, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 519, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type = MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type', MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_69A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_69A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_69A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_69A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_69A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 528, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_69A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_69A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='69A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 531, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 531, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_69A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 532, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 532, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_69A_Type = MT548_SequenceC_Penalties_69A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_69A_Type', MT548_SequenceC_Penalties_69A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_69B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_69B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_69B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_69B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_69B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 541, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_69B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_69B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='69B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 544, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 544, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_69B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 545, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 545, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_69B_Type = MT548_SequenceC_Penalties_69B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_69B_Type', MT548_SequenceC_Penalties_69B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_22F_Type with content type SIMPLE
class MT548_SequenceC_Penalties_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 554, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 557, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 557, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 558, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 558, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_22F_Type = MT548_SequenceC_Penalties_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_22F_Type', MT548_SequenceC_Penalties_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_95L_Type with content type SIMPLE
class MT548_SequenceC_Penalties_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 570, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 570, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 571, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 571, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_95L_Type = MT548_SequenceC_Penalties_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_95L_Type', MT548_SequenceC_Penalties_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_95P_Type with content type SIMPLE
class MT548_SequenceC_Penalties_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 580, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 583, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 583, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 584, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 584, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_95P_Type = MT548_SequenceC_Penalties_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_95P_Type', MT548_SequenceC_Penalties_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 593, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='11A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 596, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 596, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 597, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 597, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 606, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 609, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 609, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 610, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 610, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 619, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 622, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 622, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 623, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 623, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 632, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 635, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 635, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 636, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 636, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 645, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 648, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 648, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 649, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 649, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 658, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 661, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 661, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 662, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 662, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 671, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 674, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 674, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 675, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 675, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 684, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 687, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 687, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 688, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 688, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 697, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 700, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 700, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 701, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 701, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 710, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 713, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 713, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 714, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 714, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 723, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 726, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 726, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 727, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 727, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 736, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 739, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 739, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 740, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 740, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 749, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 752, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 752, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 753, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 753, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 762, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 765, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 765, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 766, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 766, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 775, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 778, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 778, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 779, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 779, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 788, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 791, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 791, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 792, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 792, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 801, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 804, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 804, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 805, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 805, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 814, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 817, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 817, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 818, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 818, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 827, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='24B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 830, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 830, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 831, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 831, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 843, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 843, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 844, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 844, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 853, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 856, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 856, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 857, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 857, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 866, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='99A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 869, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 869, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 870, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 870, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 879, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 882, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 882, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 883, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 883, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 892, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 895, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 895, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 896, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 896, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 905, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 908, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 908, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 909, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 909, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 918, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 921, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 921, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 922, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 922, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 931, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='35B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 934, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 934, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 935, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 935, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 944, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 947, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 947, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 948, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 948, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 957, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 960, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 960, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 961, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 961, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 970, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 973, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 973, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 974, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 974, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 983, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='90A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 986, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 986, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 987, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 987, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 996, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='90B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 999, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 999, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1000, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1000, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1009, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1012, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1012, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1013, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1013, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1022, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1025, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1025, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1026, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1026, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1035, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1038, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1038, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1039, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1039, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1048, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1051, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1051, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1052, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1052, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1061, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='92A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1064, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1064, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1065, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1065, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1074, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='92B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1077, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1077, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1078, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1078, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1087, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1090, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1090, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1091, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1091, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1100, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='92A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1103, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1103, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1104, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1104, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1113, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='92B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1116, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1116, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1117, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1117, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1126, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1129, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1129, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1130, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1130, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1139, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1142, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1142, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1143, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1143, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1152, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1155, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1155, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1156, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1156, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1165, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1168, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1168, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1169, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1169, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1178, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1181, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1181, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1182, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1182, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1191, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1194, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1194, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1195, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1195, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1204, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1207, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1207, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1208, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1208, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1217, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1220, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1220, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1221, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1221, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1230, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='97E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1233, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1233, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1234, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1234, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1243, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1246, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1246, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1247, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1247, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1256, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1259, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1259, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1260, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1260, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1269, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1272, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1272, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1273, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1273, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1282, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1285, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1285, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1286, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1286, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1298, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1298, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1299, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1299, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1308, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1311, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1311, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1312, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1312, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1321, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1324, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1324, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1325, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1325, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1334, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1337, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1337, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1338, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1338, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1347, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='24B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1350, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1350, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1351, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1351, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1360, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1363, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1363, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1364, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1364, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1373, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1376, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1376, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1377, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1377, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1386, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1389, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1389, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1390, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1390, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1399, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1402, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1402, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1403, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1403, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1412, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1415, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1415, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1416, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1416, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1425, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1428, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1428, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1429, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1429, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type = MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type', MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_70E_Type with content type SIMPLE
class MT548_SequenceC_Penalties_70E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceC_Penalties_70E_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceC_Penalties_70E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceC_Penalties_70E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1438, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceC_Penalties_70E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_70E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1441, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1441, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceC_Penalties_70E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1442, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1442, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceC_Penalties_70E_Type = MT548_SequenceC_Penalties_70E_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceC_Penalties_70E_Type', MT548_SequenceC_Penalties_70E_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95C_Type with content type SIMPLE
class MT548_SequenceD_AdditionalInformation_95C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95C_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceD_AdditionalInformation_95C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1451, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceD_AdditionalInformation_95C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1454, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1454, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1455, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1455, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95C_Type = MT548_SequenceD_AdditionalInformation_95C_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95C_Type', MT548_SequenceD_AdditionalInformation_95C_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95L_Type with content type SIMPLE
class MT548_SequenceD_AdditionalInformation_95L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95L_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceD_AdditionalInformation_95L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1464, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceD_AdditionalInformation_95L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1467, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1467, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1468, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1468, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95L_Type = MT548_SequenceD_AdditionalInformation_95L_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95L_Type', MT548_SequenceD_AdditionalInformation_95L_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95P_Type with content type SIMPLE
class MT548_SequenceD_AdditionalInformation_95P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95P_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceD_AdditionalInformation_95P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1477, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceD_AdditionalInformation_95P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1480, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1480, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1481, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1481, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95P_Type = MT548_SequenceD_AdditionalInformation_95P_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95P_Type', MT548_SequenceD_AdditionalInformation_95P_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95Q_Type with content type SIMPLE
class MT548_SequenceD_AdditionalInformation_95Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95Q_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1490, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceD_AdditionalInformation_95Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1493, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1493, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1494, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1494, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95Q_Type = MT548_SequenceD_AdditionalInformation_95Q_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95Q_Type', MT548_SequenceD_AdditionalInformation_95Q_Type)


# Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95R_Type with content type SIMPLE
class MT548_SequenceD_AdditionalInformation_95R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT548_SequenceD_AdditionalInformation_95R_Type with content type SIMPLE"""
    _TypeDefinition = MT548_SequenceD_AdditionalInformation_95R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT548_SequenceD_AdditionalInformation_95R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1503, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT548_SequenceD_AdditionalInformation_95R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='95R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1506, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1506, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT548_SequenceD_AdditionalInformation_95R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1507, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1507, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT548_SequenceD_AdditionalInformation_95R_Type = MT548_SequenceD_AdditionalInformation_95R_Type
Namespace.addCategoryObject('typeBinding', 'MT548_SequenceD_AdditionalInformation_95R_Type', MT548_SequenceD_AdditionalInformation_95R_Type)


MT548 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT548'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1816, 1))
Namespace.addCategoryObject('elementBinding', MT548.name().localName(), MT548)



MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersMessageReference'), MT548_SequenceA_GeneralInformation_20C_Type, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1516, 3)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FunctionOfTheMessage'), MT548_SequenceA_GeneralInformation_23G_Type, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1517, 3)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_A'), MT548_SequenceA_GeneralInformation_98A_Type, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1519, 4)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_C'), MT548_SequenceA_GeneralInformation_98C_Type, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1520, 4)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_E'), MT548_SequenceA_GeneralInformation_98E_Type, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1521, 4)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA1_Linkages'), MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1523, 3)))

MT548_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2_Status'), MT548_SequenceA_GeneralInformation_SubSequenceA2_Status, scope=MT548_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1524, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1518, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1519, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1520, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1521, 4))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersMessageReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1516, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FunctionOfTheMessage')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1517, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1519, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1520, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PreparationDateTime_E')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1521, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA1_Linkages')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1523, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2_Status')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1524, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceA_GeneralInformation._Automaton = _BuildAutomaton()




MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_A'), MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13A_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1533, 4)))

MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_B'), MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_13B_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1534, 4)))

MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference_C'), MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20C_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1537, 4)))

MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference_U'), MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages_20U_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1538, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1532, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1533, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1534, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1536, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1537, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1538, 4))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1533, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberIdentification_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1534, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1537, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference_U')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1538, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT548_SequenceA_GeneralInformation_SubSequenceA1_Linkages._Automaton = _BuildAutomaton_()




MT548_SequenceA_GeneralInformation_SubSequenceA2_Status._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusCode'), MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_25D_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA2_Status, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1547, 3)))

MT548_SequenceA_GeneralInformation_SubSequenceA2_Status._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2a_Reason'), MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason, scope=MT548_SequenceA_GeneralInformation_SubSequenceA2_Status, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1548, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1548, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatusCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1547, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceA2a_Reason')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1548, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status._Automaton = _BuildAutomaton_2()




MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_24B_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1556, 3)))

MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason_70D_Type, scope=MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1557, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1557, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1556, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1557, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceA_GeneralInformation_SubSequenceA2_Status_SubSequenceA2a_Reason._Automaton = _BuildAutomaton_3()




MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_B'), MT548_SequenceB_SettlementTransactionDetails_94B_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1566, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_C'), MT548_SequenceB_SettlementTransactionDetails_94C_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1567, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_F'), MT548_SequenceB_SettlementTransactionDetails_94F_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1568, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_H'), MT548_SequenceB_SettlementTransactionDetails_94H_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1569, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_L'), MT548_SequenceB_SettlementTransactionDetails_94L_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1570, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfTheFinancialInstrument'), MT548_SequenceB_SettlementTransactionDetails_35B_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1572, 3)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrumentToBeSettled'), MT548_SequenceB_SettlementTransactionDetails_36B_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1573, 3)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Amount'), MT548_SequenceB_SettlementTransactionDetails_19A_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1574, 3)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceB_SettlementTransactionDetails_95L_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1576, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceB_SettlementTransactionDetails_95P_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1577, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceB_SettlementTransactionDetails_95R_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1578, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A'), MT548_SequenceB_SettlementTransactionDetails_97A_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1581, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B'), MT548_SequenceB_SettlementTransactionDetails_97B_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1582, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Indicator_F'), MT548_SequenceB_SettlementTransactionDetails_22F_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1585, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Indicator_H'), MT548_SequenceB_SettlementTransactionDetails_22H_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1586, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), MT548_SequenceB_SettlementTransactionDetails_98A_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1589, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B'), MT548_SequenceB_SettlementTransactionDetails_98B_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1590, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), MT548_SequenceB_SettlementTransactionDetails_98C_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1591, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_E'), MT548_SequenceB_SettlementTransactionDetails_98E_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1592, 4)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementInstructionProcessingNarrative'), MT548_SequenceB_SettlementTransactionDetails_70E_Type, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1594, 3)))

MT548_SequenceB_SettlementTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceB1_SettlementParties'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, scope=MT548_SequenceB_SettlementTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1595, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1565, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1566, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1567, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1568, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1569, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1570, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1574, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1575, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1576, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1577, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1578, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1594, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1595, 3))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1566, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1567, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_F')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1568, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_H')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1569, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1570, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfTheFinancialInstrument')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1572, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrumentToBeSettled')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1573, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Amount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1574, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1576, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1577, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1578, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1581, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1582, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Indicator_F')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1585, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Indicator_H')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1586, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1589, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1590, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1591, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_E')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1592, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementInstructionProcessingNarrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1594, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceB1_SettlementParties')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1595, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceB_SettlementTransactionDetails._Automaton = _BuildAutomaton_4()




MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_C'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95C_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1604, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95L_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1605, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95P_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1606, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95Q_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1607, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_95R_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1608, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97A_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1611, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_97B_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1612, 4)))

MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProcessingReference'), MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties_20C_Type, scope=MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1614, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1610, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1611, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1612, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1614, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1604, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1605, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1606, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_Q')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1607, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1608, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1611, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SafekeepingAccount_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1612, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProcessingReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1614, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceB_SettlementTransactionDetails_SubSequenceB1_SettlementParties._Automaton = _BuildAutomaton_5()




MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_A'), MT548_SequenceC_Penalties_69A_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1623, 4)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_B'), MT548_SequenceC_Penalties_69B_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1624, 4)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CompleteUpdatesIndicator'), MT548_SequenceC_Penalties_22F_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1626, 3)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceC_Penalties_95L_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1628, 4)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceC_Penalties_95P_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1629, 4)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1_PenaltiesPerCurrencyForAParty'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1631, 3)))

MT548_SequenceC_Penalties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_70E_Type, scope=MT548_SequenceC_Penalties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1632, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1622, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1623, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1624, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1627, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1628, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1629, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1631, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1632, 3))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1623, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementPeriod_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1624, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CompleteUpdatesIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1626, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1628, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1629, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1_PenaltiesPerCurrencyForAParty')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1631, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1632, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties._Automaton = _BuildAutomaton_6()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOfPenalties'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_11A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1640, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1642, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_C'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_98C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1643, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95L_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1646, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95P_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1647, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95Q_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1648, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_95R_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1649, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_22F_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1651, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a_PenaltiesPerCounterParty'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1652, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1653, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1640, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1641, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1642, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1643, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1652, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1653, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOfPenalties')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1640, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1642, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComputationDateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1643, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1646, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1647, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_Q')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1648, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1649, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1651, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a_PenaltiesPerCounterParty')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1652, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1653, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty._Automaton = _BuildAutomaton_7()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95L_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1662, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95P_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1663, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95Q_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1664, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_95R_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1665, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_22F_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1667, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BilateralNetAmount'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_19A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1668, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1_PenaltyDetails'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1669, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1670, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1669, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1670, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1662, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1663, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_Q')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1664, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1665, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyCapacityIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1667, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BilateralNetAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1668, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1_PenaltyDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1669, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1670, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty._Automaton = _BuildAutomaton_8()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_20C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1678, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PenaltyType'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1679, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmountComputedFlag'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_17B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1680, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PenaltyStatus'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_25D_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1681, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_24B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1682, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70D_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1683, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmountComputed'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_19A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1684, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationMethod'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_22F_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1685, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberDays'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_99A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1686, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A_CalculationDetails'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1687, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1688, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1680, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1681, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1682, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1683, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1688, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1678, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PenaltyType')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1679, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmountComputedFlag')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1680, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PenaltyStatus')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1681, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1682, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1683, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmountComputed')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1684, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationMethod')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1685, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberDays')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1686, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A_CalculationDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1687, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1688, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails._Automaton = _BuildAutomaton_9()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1697, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_C'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1698, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_E'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_98E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1699, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingReferenceData'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_17B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1701, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A1_FinancialInstrumentAttributes'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1702, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Rate_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1704, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Rate_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_92B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1705, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Amount'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_19A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1707, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2_RelatedTransaction'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1708, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1709, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1696, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1697, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1698, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1699, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1701, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1702, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1703, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1704, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1705, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1707, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1708, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1709, 3))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1697, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1698, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PenaltyDateTime_E')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1699, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingReferenceData')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1701, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A1_FinancialInstrumentAttributes')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1702, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Rate_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1704, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Rate_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1705, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Amount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1707, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2_RelatedTransaction')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1708, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1709, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails._Automaton = _BuildAutomaton_10()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_35B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1717, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1719, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_C'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_12C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1720, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Flag'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_17B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1722, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Price_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1724, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Price_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_90B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1725, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1728, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Place_L'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_94L_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1729, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1732, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_98C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1733, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Rate_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1736, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Rate_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_92B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1737, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstrumentAttributeNarrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1739, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1718, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1719, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1720, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1722, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1723, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1724, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1725, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1727, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1728, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1729, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1731, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1732, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1733, 4))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1735, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1736, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1737, 4))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1739, 3))
    counters.add(cc_16)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1717, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1719, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfFinancialInstrument_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1720, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Flag')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1722, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Price_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1724, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Price_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1725, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1728, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Place_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1729, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1732, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1733, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Rate_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1736, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Rate_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1737, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstrumentAttributeNarrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1739, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_10, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_10, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False),
        fac.UpdateInstruction(cc_12, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A1_FinancialInstrumentAttributes._Automaton = _BuildAutomaton_11()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_20C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1747, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a_TransactionDetails'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1748, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1748, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1747, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a_TransactionDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1748, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction._Automaton = _BuildAutomaton_12()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeIndicator'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22F_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1756, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1758, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1759, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1760, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Account_A'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1763, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Account_B'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1764, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Account_E'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_97E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1765, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95L_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1768, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95P_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1769, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95Q_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1770, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_95R_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1771, 4)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Indicator'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_22H_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1773, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrument'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_36B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1774, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PostingAmount'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_19A_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1775, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTime'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_98C_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1776, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1_Status'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1777, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_70E_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1778, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1762, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1763, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1764, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1765, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1767, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1768, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1769, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1770, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1771, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1775, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1777, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1778, 3))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1756, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1758, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1759, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1760, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Account_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1763, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Account_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1764, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Account_E')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1765, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1768, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1769, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_Q')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1770, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1771, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Indicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1773, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'QuantityOfFinancialInstrument')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1774, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PostingAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1775, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTime')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1776, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1_Status')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1777, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1778, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails._Automaton = _BuildAutomaton_13()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusCode'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_25D_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1786, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1A_Reason'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1787, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1787, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatusCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1786, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSequenceC1a1A2a1A_Reason')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1787, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status._Automaton = _BuildAutomaton_14()




MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_24B_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1795, 3)))

MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative'), MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason_70D_Type, scope=MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1796, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1795, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1796, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1795, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReasonNarrative')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1796, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT548_SequenceC_Penalties_SubSequenceC1_PenaltiesPerCurrencyForAParty_SubSequenceC1a_PenaltiesPerCounterParty_SubSequenceC1a1_PenaltyDetails_SubSequenceC1a1A_CalculationDetails_SubSequenceC1a1A2_RelatedTransaction_SubSequenceC1a1A2a_TransactionDetails_SubSequenceC1a1A2a1_Status_SubSequenceC1a1A2a1A_Reason._Automaton = _BuildAutomaton_15()




MT548_SequenceD_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_C'), MT548_SequenceD_AdditionalInformation_95C_Type, scope=MT548_SequenceD_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1805, 4)))

MT548_SequenceD_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_L'), MT548_SequenceD_AdditionalInformation_95L_Type, scope=MT548_SequenceD_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1806, 4)))

MT548_SequenceD_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_P'), MT548_SequenceD_AdditionalInformation_95P_Type, scope=MT548_SequenceD_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1807, 4)))

MT548_SequenceD_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_Q'), MT548_SequenceD_AdditionalInformation_95Q_Type, scope=MT548_SequenceD_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1808, 4)))

MT548_SequenceD_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Party_R'), MT548_SequenceD_AdditionalInformation_95R_Type, scope=MT548_SequenceD_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1809, 4)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1804, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1805, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1806, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1807, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1808, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1809, 4))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceD_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_C')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1805, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceD_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_L')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1806, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceD_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_P')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1807, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceD_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_Q')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1808, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT548_SequenceD_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Party_R')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1809, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT548_SequenceD_AdditionalInformation._Automaton = _BuildAutomaton_16()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), MT548_SequenceA_GeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1819, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_SettlementTransactionDetails'), MT548_SequenceB_SettlementTransactionDetails, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1820, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_Penalties'), MT548_SequenceC_Penalties, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1821, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AdditionalInformation'), MT548_SequenceD_AdditionalInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1822, 4)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1820, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1821, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1822, 4))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1819, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_SettlementTransactionDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1820, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_Penalties')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1821, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AdditionalInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT548.xsd', 1822, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_17()


