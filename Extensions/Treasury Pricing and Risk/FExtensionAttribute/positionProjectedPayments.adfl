[Treasury Pricing and Risk]FInstrument:positionProjectedPayments = select(needsProjectedLegInformations, 
  true->projectedTradePayments(tradesInPosition, object, accountingParameters, valuationSystemDate, cashValueBreakDate, valuationDate, tradeStatusInclusionMaskDefault, pLDividendComparisonMethod, true, couponToValueFactor, plClearDateForValuation, closeDerivativesAfterExpiry, legInformations, staticLegInformations, profitAndLossTodayIsHistorical, roundingInformation, roundingInformationsPerLeg, includeInceptionCash, projectedPaymentsExcludeFees, projectedPaymentsExcludeDividends, realizeType, profitAndLossParametersOverride), 
  false->projectedTradePayments(tradesInPosition, object, accountingParameters, valuationSystemDate, cashValueBreakDate, valuationDate, tradeStatusInclusionMaskDefault, pLDividendComparisonMethod, true, couponToValueFactor, plClearDateForValuation, closeDerivativesAfterExpiry, profitAndLossTodayIsHistorical, roundingInformation, roundingInformationsPerLeg, includeInceptionCash, projectedPaymentsExcludeFees, projectedPaymentsExcludeDividends, realizeType, profitAndLossParametersOverride));
[Treasury Pricing and Risk]FInstrumentAndTrades:positionProjectedPayments = instrument :* "positionProjectedPayments" [positionObject];
[Treasury Pricing and Risk]FMultiInstrumentAndTrades:positionProjectedPayments = sumOf(openInstruments :* "collapse(positionProjectedPayments)" [positionObject]);
[Treasury Pricing and Risk]FTradeRow:positionProjectedPayments = instrument :* "positionProjectedPayments" [includeAllTrades, singleTradePosition];