"""------------------------------------------------------------------------
MODULE
    FFpMLUnadjustedDates
DESCRIPTION:
    This file is used to infer the unadjusted date from the actual start and end dates on the instrument and legs in PRIME during deal export
VERSION: 1.0.30
RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the scripts/ encrypted modules/ clear text code within the core is not supported. 
    2. This module is not customizable
    3. The component may not work as expected with any modifications done to this module at user end
--------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == '\x03\xf3\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
T/3m0gGIpZdxSUz/5bySVqmIuVJ+jP8FEkl25Q==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec(__pyc)
del __pyc
