"""
RunScript

Script that will run end of day.

The purpose of this script is to check if the selected trades pass or fail the mandates that are present on the
system. This is to pick up trades that were not picked up by the pre-deal check. If a mandate fails, the script creates
a violation record.
"""

import acm

from GenericMandatesViolation import CreateViolation
from GenericMandatesLogger import getLogger
from GenericMandatesDefinition import Mandate
from GenericMandatesUtils import GetLimits


ael_variables = [
    ['Trade_QF', 'Trade QueryFolder', 'string', acm.FStoredASQLQuery.Select('subType="FTrade"'), None, 1, 1, 'Choose Query Folder', None, 1],
    ["Create_Violation", "Create Violation?", "bool", [True, False], False, 1, 0, "If true, a violation/will be created for a breach"],
]


def ael_main(ael_variables):
    try:
        queryFolders = ael_variables['Trade_QF']
        createViolations = ael_variables['Create_Violation']
        getLogger().info('Mandates EOD script starting')

        # Loop through query folders
        for qf in queryFolders:
            # Check if the query exists
            query = acm.FStoredASQLQuery.Select01('name=%s' % qf, None)
            if query:
                # Select the trades in the query folder
                trades = query.Query().Select()
                for trd in trades:
                    getLogger().info('Mandates for trade ID: %s' % str(trd.Oid()))
                    ProcessTradeForViolations(trd, createViolations)

    except Exception, x:
        getLogger().error("[ERROR] Exception when running Mandates EOD Run. Detail: %s" % str(x))
        print '-'*60
        import sys
        import traceback
        traceback.print_exc(file=sys.stdout)
        print '-'*60

    getLogger().info('Mandates EOD script completed.')


def ProcessTradeForViolations(trd, createViolations=True):
    limits = GetLimits(trd)
    
    for limit in limits:
        skip = False

        # Select all violation records for specific limit
        violations = acm.FBusinessProcess.Select('subject_seqnbr=%i' % limit.Oid())

        # Check if a violation has already been created for the specific trade
        for violation in violations:
            # Get Trade OptionalKey stored on Violation record
            optionalKey = violation.CurrentStep().DiaryEntry().Parameters().At('TradeOptionalKey')
            tradeNumberFromViolation = violation.CurrentStep().DiaryEntry().Parameters().At('TradeNumber')

            # if we can't cast the trade number stored on the dictionary to int, 
            # we know that it is not a valid trade number to used in the logic.
            # (some older logic stored text in this field on the businessprocess for new trades.)
            if not isinstance(tradeNumberFromViolation, int):
                try:
                    tradeNumberFromViolation = int(tradeNumberFromViolation)
                except:
                    tradeNumberFromViolation = 0

            tradeNumberMatch = (tradeNumberFromViolation == trd.Oid())

            # Don't use the optional key as match in case both optional key fields on the 
            # trade and business process are blank - this is not a match.
            if optionalKey and trd.OptionalKey():
                optKeyMatch = (optionalKey == trd.OptionalKey())
            else: 
                optKeyMatch = False

            if tradeNumberMatch or optKeyMatch:
                skip = True
                break

        if skip is False:
            mandate = Mandate(limit)
            getLogger().debug("Processing mandate - %s (%s)" % (mandate.Type(), mandate.LimitOid()))
            failType = mandate.GetFailType()

            # Check if the mandate has failed for blocking and non blocking mandates
            if mandate.IsTradeValid(trd) is False and createViolations is True:
                breachComment = 'Generated by Mandates ATS'

                violation = CreateViolation(limit,
                                            trd,
                                            trd.OptionalKey(),
                                            mandate.Type(),
                                            mandate.Entity(),
                                            'mandateVersion',
                                            trd.VersionId(),
                                            breachComment)

                getLogger().info('Created violation')
            else:
                getLogger().info('Trade passed all mandates')
        else:
            getLogger().debug('A violation has already been created for Trade (%s)' % trd.Oid())
