[Default]FInstrument:averageImpliedVolatility = 0.5 * (object:impliedVolatility [priceSource, doSplitAll, filterUnit, marketPriceChoice = "Bid", useCalibrationAccuracy] + object:impliedVolatility [priceSource, doSplitAll, filterUnit, marketPriceChoice = "Ask", useCalibrationAccuracy]);
[Default]FInstrumentAndTrades:averageImpliedVolatility = instrument :* "averageImpliedVolatility" [priceSource, isSplitAllGrouped, filterUnit, useVanillaEquivalent, useCalibrationAccuracy];
[Default]FMultiInstrumentAndTrades:averageImpliedVolatility = nil;
[Default]FOrderBook:averageImpliedVolatility = 0.5 * (equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Ask"] + equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Bid"]);
[Default]FOwnOrder:averageImpliedVolatility = trading :* "averageImpliedVolatility" [useCalibrationAccuracy];
[Default]FPriceAggregate:averageImpliedVolatility = priceFeed:averageImpliedVolatility [useVanillaEquivalent, useCalibrationAccuracy];
[Default]FPriceFeed:averageImpliedVolatility = 0.5 * (equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Ask"] + equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Bid"]);
[Default]FTradingInterface:averageImpliedVolatility = 0.5 * (equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Ask"] + equivalentInstrument:impliedVolatilityCalculation [useCalibrationAccuracy, marketPriceChoice = "Bid"]);
[Default]FVolatilityPoint:averageImpliedVolatility = object.Volatility;