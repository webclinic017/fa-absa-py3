[Default]FFxRate:profitAndLossValuesActualCashForProjection = object:profitAndLossValuesActualCash [tradesInPosition, positionObject, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId, includeAllTrades, pLDividendComparisonMethod, createClosingLotInfos, profitAndLossParameters := profitAndLossParametersForProjection, taxLotPositionObject];
[Default]FInstrument:profitAndLossValuesActualCashForProjection = profitAndLossValuesActualCash;
[Default]FInstrumentAndTrades:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, excludeFunding, pLDividendComparisonMethod];
[Default]FLegAndTrades:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [positionObject, singleTradePosition, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId];
[Default]FMultiInstrumentAndTrades:profitAndLossValuesActualCashForProjection = sumOf(instruments :* "profitAndLossValuesActualCashForProjection" [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, excludeFunding]);
[Default]FTradeRow:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [singleTradePosition, includeAllTrades, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, taxLotPositionObject];