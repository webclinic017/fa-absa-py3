[Default]FCashFlowInstrument:impliedSpread = select(isGenericSpreadQuoted, 
  true->object.UnitValueToUnitQuote((marketUnitValue - nonCouponValue) / couponFactor, valuationDate, 1.0), 
  false->select(numberOfFloatOrCapFloorLegs, 
    1->firstNonFixedLeg :* "impliedSpread" [priceSource, marketPrice, implyValid], 
    default->select(floatOrCapFloorPayLegOrNil, 
      default->floatOrCapFloorPayLegOrNil :* "impliedSpread" [priceSource, marketPrice, implyValid], 
      nil->nil)));
[Default]FDeposit:impliedSpread = select((isGenericCouponQuoted or isGenericSpreadQuoted) and (count(floatLegs) > 0), 
  true->object.UnitValueToUnitQuote((marketUnitValue - nonCouponValue) / couponFactor, valuationDate, 1.0), 
  false->select(firstNonFixedLeg, 
    nil->nil, 
    default->firstNonFixedLeg :* "impliedSpread" [priceSource, marketPrice, implyValid]));
[Default]FFra:impliedSpread = nil;
[Default]FFuture:impliedSpread = select(isInterestRateFuture, 
  true->impliedFlatYieldSpread, 
  default->nil);
[Default]FInstrument:impliedSpread = nil;
[Default]FInstrumentAndTrades:impliedSpread = shunt(implyValid, 
  true->instrument :* "impliedSpread" [priceSource], 
  false->nil);
[Default]FLeg:impliedSpread = select((nil == uniqueSpreadInTheoreticalPrice), 
  true->nil, 
  false->imply(uniqueSpreadInTheoreticalPrice, instrument:theoreticalPrice, marketPrice, implyPrecision, impliedSpreadMinValue, impliedSpreadMaxValue, implyMaxIterations));
[Default]FLegAndTrades:impliedSpread = shunt(implyValid, 
  true->select(instrument:isGenericSpreadQuoted, 
    false->select(leg:isFloatOrCapFloorLeg, 
      true->leg :* "impliedSpread" [priceSource], 
      false->nil), 
    true->nil), 
  false->nil);
[Default]FMultiInstrumentAndTrades:impliedSpread = nil;
[Default]FTotalReturnSwap:impliedSpread = select(object.TotalReturnFundingLeg, 
  nil->nil, 
  default->(object.TotalReturnFundingLeg) :* "impliedSpread" [priceSource]);