[Default]FCashFlowInstrument:underlyingForUnderlyingPriceInTheoreticalPrice = select(stochasticReference, 
  default->stochasticReference, 
  nil->select(underlying, 
    nil->nil, 
    default->select(isReciprocal, 
      true->CreateFxRate(underlying:domesticCurrency, underlying:foreignCurrency), 
      false->switch(underlyingIsDepositaryReceiptButNotFxRate and not underlying:isCommodityVariantWithVariantMarketPrice, 
        true->underlyingUnderlying, 
        default->underlying))));
[Default]FInstrument:underlyingForUnderlyingPriceInTheoreticalPrice = select(underlying, 
  nil->nil, 
  default->select(isReciprocal, 
    true->CreateFxRate(underlying:domesticCurrency, underlying:foreignCurrency), 
    false->switch(underlyingIsDepositaryReceiptButNotFxRate and not underlying:isCommodityVariantWithVariantMarketPrice, 
      true->underlyingUnderlying, 
      default->underlying)));
[Default]FInstrumentAndTrades:underlyingForUnderlyingPriceInTheoreticalPrice = instrument:underlyingForUnderlyingPriceInTheoreticalPrice;
[Default]FMultiInstrumentAndTrades:underlyingForUnderlyingPriceInTheoreticalPrice = instrumentGroupingReference;
[Default]FOrderBook:underlyingForUnderlyingPriceInTheoreticalPrice = instrument:underlyingForUnderlyingPriceInTheoreticalPrice;
[Default]FPriceAggregate:underlyingForUnderlyingPriceInTheoreticalPrice = instrument:underlyingForUnderlyingPriceInTheoreticalPrice;