[Default]FCurrency:aggregatedForwardValuationFlows = flowAggregationInstrument:aggregatedForwardValuationFlows [priceSource, doSplitAll, legCurrencyFilterProvider, legs, useBESADiscounting, useRiskFreeDiscounting, ignoreForwardValuationCashFlows, forwardValuationPeriod, forwardValuationStartPoint];
[Default]FInstrument:aggregatedForwardValuationFlows = select(ignoreForwardValuationCashFlows, 
  true->nil, 
  false->select(cashFlowResultFromModelCall, 
    true->forwardValueCashFlowsFromPresentValues(valuationDate, forwardValuationStaticLegInformations, theoreticalModelCashFlowPresentValue, forwardValuationPeriod, forwardValuationStartPoint, timeDistributionApportionmentType, timeDistributionApportionmentStartDate, timeDistributionApportionmentPeakDate, timeDistributionApportionmentEndDate, timeDistributionDateStartsApportionment), 
    false->select(cashFlowProjectedFromModelCall, 
      true->forwardValueCashFlowsFromProjected(valuationDate, forwardValuationStaticLegInformations, forwardValuationDiscountCurves, forwardValuationHazardFactors, theoreticalModelCashFlowProjectedValue, forwardValuationPeriod, forwardValuationStartPoint, timeDistributionApportionmentType, timeDistributionApportionmentStartDate, timeDistributionApportionmentPeakDate, timeDistributionApportionmentEndDate, timeDistributionDateStartsApportionment), 
      false->forwardValueCashFlows(valuationDate, forwardValuationStaticLegInformations, forwardValuationLegInformations, forwardValuationDiscountCurves, forwardValuationHazardFactors, roundingInformation, forwardValuationPeriod, forwardValuationStartPoint, timeDistributionApportionmentType, timeDistributionApportionmentStartDate, timeDistributionApportionmentPeakDate, timeDistributionApportionmentEndDate, timeDistributionDateStartsApportionment))));