[Core Risk]FCombInstrMapAndTrades:benchmarkVegaValues = instrument :* "benchmarkVegaValues" [isSplitAllGrouped, priceSource, timeBucketsSetExternally, volatilityPoints, positionTradeQuantities, volatilityGreekFilter, benchmarkVegaCalculationType, vegaStrikeBucketsInfoSetExternally, contractSize := contractSizeWeighted, filterUnit, groupingSpotDiscountDate, useOnesidedShiftForVega];
[Core Risk]FInstrument:benchmarkVegaValues = select(isSettled or noBenchmarkVolatilityGreekRiskFactorsExist, 
  true->benchmarkVegaValuesZero, 
  false->object:discountAndConvertToBase [filterUnit, discountAndConvertToBaseDate, discountAndConvertToBaseDiscountingUnits, discountAndConvertToBaseValues = benchmarkVegaValuesUndiscounted]);
[Core Risk]FInstrumentAndTrades:benchmarkVegaValues = openInstrument :* "collapse(benchmarkVegaValues)" [isSplitAllGrouped, priceSource, positionObject, timeBucketsSetExternally, volatilityPoints, volatilityGreekFilter, benchmarkVegaCalculationType, vegaStrikeBucketsInfoSetExternally, filterUnit, groupingSpotDiscountDate, useOnesidedShiftForVega];
[Core Risk]FMultiInstrumentAndTrades:benchmarkVegaValues = sumOf(openInstruments :* "collapse(benchmarkVegaValues)" [isSplitAllGrouped, priceSource, positionObject, timeBucketsSetExternally, volatilityPoints, volatilityGreekFilter, benchmarkVegaCalculationType, vegaStrikeBucketsInfoSetExternally, filterUnit, groupingSpotDiscountDate, useOnesidedShiftForVega]);
[Core Risk]FTradeRow:benchmarkVegaValues = instrument :* "benchmarkVegaValues" [isSplitAllGrouped, priceSource, timeBucketsSetExternally, singleTradePosition, includeAllTrades, volatilityPoints, volatilityGreekFilter, benchmarkVegaCalculationType, vegaStrikeBucketsInfoSetExternally, filterUnit, groupingSpotDiscountDate];