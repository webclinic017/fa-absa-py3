[Core Risk]FCombination:priceForwardDeltaInstrument = select(isSettled, 
  true->denominatedValueZero, 
  false->select(priceGreekIncludeQuoteScaling, 
    true->select(isSupportingQuoteScaling and singlePriceGreekRiskFactorIsSupportingQuoteScaling and not almostZero(singlePriceGreekRiskFactorValueToQuoteFactor, 1e-10), 
      true->spotValueToQuoteFactor * priceForwardDeltaInstrumentCombination / singlePriceGreekRiskFactorValueToQuoteFactor, 
      false->denominatedValueZero), 
    false->collapse(priceForwardDeltaInstrumentCombination)));
[Core Risk]FInstrument:priceForwardDeltaInstrument = select(isSettled, 
  true->denominatedValueZero, 
  false->select(priceGreekIncludeQuoteScaling, 
    true->select(isSupportingQuoteScaling and singlePriceGreekRiskFactorIsSupportingQuoteScaling and not almostZero(singlePriceGreekRiskFactorValueToQuoteFactor, 1e-10), 
      true->spotValueToQuoteFactor * priceForwardDeltaInstrumentCore / singlePriceGreekRiskFactorValueToQuoteFactor, 
      false->denominatedValueZero), 
    false->collapse(priceForwardDeltaInstrumentCore)));
[Core Risk]FInstrumentAndTrades:priceForwardDeltaInstrument = select(forwardValueProviderTargetInTheoreticalPrice, 
  nil->denominatedValueZero, 
  default->select(underlyingForwardValueInCalculationCurrency, 
    nil->denominatedValueZero, 
    default->(openInstrumentOrInstrument :* "priceForwardDeltaInstrument" [isSplitAllGrouped, priceSource, normalizeFxRisk, priceGreekIncludeVolatilityMovement, priceGreekIncludeQuoteScaling, underlyingForwardValueInCalculationCurrency]) * combinationInstrumentMapFactorForPriceGreeks));
[Core Risk]FTradeRow:priceForwardDeltaInstrument = instrument:priceForwardDeltaInstrument [isSplitAllGrouped, priceSource, normalizeFxRisk, priceGreekIncludeVolatilityMovement, currency = tradeRowCurrency, priceGreekIncludeQuoteScaling, underlyingForwardValueInCalculationCurrency] * combinationInstrumentMapFactorForPriceGreeks;