[Profit and Loss]FFxRate:profitAndLossValuesActualCashForProjection = object:profitAndLossValuesActualCash [tradesInPosition, positionObject, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId, includeAllTrades, pLDividendComparisonMethod, createClosingLotInfos, profitAndLossParameters := profitAndLossParametersForProjection, taxLotPositionObject];
[Profit and Loss]FInstrument:profitAndLossValuesActualCashForProjection = profitAndLossValuesActualCash;
[Profit and Loss]FInstrumentAndTrades:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, excludeFunding, pLDividendComparisonMethod];
[Profit and Loss]FLegAndTrades:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [positionObject, singleTradePosition, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId];
[Profit and Loss]FMultiInstrumentAndTrades:profitAndLossValuesActualCashForProjection = sumOf(instruments :* "profitAndLossValuesActualCashForProjection" [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, excludeFunding]);
[Profit and Loss]FTradeRow:profitAndLossValuesActualCashForProjection = instrument:profitAndLossValuesActualCashForProjection [singleTradePosition, includeAllTrades, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, taxLotPositionObject];