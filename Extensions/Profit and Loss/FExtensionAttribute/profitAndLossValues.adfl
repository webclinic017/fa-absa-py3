[Profit and Loss]FInstrument:profitAndLossValues[tradesInPosition, positionObject, singleTradePosition, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId, includeAllTrades, pLDividendComparisonMethod, createClosingLotInfos, taxLotPositionObject, taxLotPnL] = select(plClearAdjust, 
  false->profitAndLossValuesFromProfitAndLossCalculation, 
  true->clearProfitAndLossValues(valuationDate, profitAndLossValuesFromProfitAndLossCalculation, plClearDate, profitAndLossValuesAtClearDate, marketValueForProfitAndLossAtClearDate, useHistoricalFxConversion, accountingCurrency, mtmMarket));
[Profit and Loss]FLegAndTrades:profitAndLossValues = instrument :* "profitAndLossValues" [positionObject, singleTradePosition, includeAllTrades, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId, taxLotPnL := false];
[Profit and Loss]FMoneyFlowAndTrades:profitAndLossValues = instrument :* "profitAndLossValues" [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput];
[Profit and Loss]FSingleInstrumentAndTrades:profitAndLossValues = instrument :* "profitAndLossValues" [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, createClosingLotInfos];
[Profit and Loss]FTradeRow:profitAndLossValues = instrument :* "profitAndLossValues" [singleTradePosition, includeAllTrades, tradeSetUsedInProfitandLoss, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, taxLotPositionObject, positionObject];