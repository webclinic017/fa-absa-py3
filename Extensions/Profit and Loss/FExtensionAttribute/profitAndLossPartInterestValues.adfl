[Profit and Loss]FCombInstrMapAndTrades:profitAndLossPartInterestValues = tradedInstrument :* "profitAndLossPartInterestValues" [positionObject, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, instrumentPart, includeAllTrades];
[Profit and Loss]FCombination:profitAndLossPartInterestValues = profitAndLossValuesPartInterest(tradesInPosition, instrument, profitAndLossParametersOverride, valuationDate, profitAndLossCarryDate, pLLegInformationsExcludeCustomValued, staticLegInformationsExcludeCustomValued, instrumentPart, plClearDate, legId, tradeStatusInclusionMaskDefault, roundingInformation, roundingInformationsPerLeg, inclusionCalendarOverride, plSpotGroupingReference, inclusionMethodIfPnLReportDateIsAccountingDate, plClearTrades, plClearFxTranslation, tradeInclusionDateTime, plPositionGroupingType);
[Profit and Loss]FInstrument:profitAndLossPartInterestValues = profitAndLossValuesPartInterest(tradesInPosition, instrument, profitAndLossParametersOverride, valuationDate, profitAndLossCarryDate, pLLegInformations, staticLegInformations, instrumentPart, plClearDate, legId, tradeStatusInclusionMaskDefault, roundingInformation, roundingInformationsPerLeg, inclusionCalendarOverride, plSpotGroupingReference, inclusionMethodIfPnLReportDateIsAccountingDate, plClearTrades, plClearFxTranslation, tradeInclusionDateTime, plPositionGroupingType);
[Profit and Loss]FInstrumentAndTrades:profitAndLossPartInterestValues = nil;
[Profit and Loss]FLegAndTrades:profitAndLossPartInterestValues = tradedInstrument :* "profitAndLossPartInterestValues" [positionObject, singleTradePosition, tradeSetUsedInProfitandLoss, includeAllTrades, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, legs, legId, instrumentPart];
[Profit and Loss]FMoneyFlowAndTrades:profitAndLossPartInterestValues = instrument :* "profitAndLossPartInterestValues" [positionObject, singleTradePosition, profitAndLossParameters, plSpotGroupingReference, valuationBaseDateTimeInput, instrumentPart];