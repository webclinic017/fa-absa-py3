# C:\Projects\Code\SwiftMessagingSolution_Python3\base\extensions\SwiftIntegration\Utilities\TemplateFiles\MT306.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2019-11-07 12:26:00.393974 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com


import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:a7ce7d8a-012b-11ea-8550-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_20_Type_Pattern
class MT306_SequenceA_GeneralInformation_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 3, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT306_SequenceA_GeneralInformation_20_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_20_Type_Pattern', MT306_SequenceA_GeneralInformation_20_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_20_Type_Pattern = MT306_SequenceA_GeneralInformation_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21_Type_Pattern
class MT306_SequenceA_GeneralInformation_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 16, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT306_SequenceA_GeneralInformation_21_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21_Type_Pattern', MT306_SequenceA_GeneralInformation_21_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_21_Type_Pattern = MT306_SequenceA_GeneralInformation_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22A_Type_Pattern
class MT306_SequenceA_GeneralInformation_22A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 29, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern.addPattern(pattern='((AMND|CANC|NEWT))')
MT306_SequenceA_GeneralInformation_22A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22A_Type_Pattern', MT306_SequenceA_GeneralInformation_22A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_22A_Type_Pattern = MT306_SequenceA_GeneralInformation_22A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_94A_Type_Pattern
class MT306_SequenceA_GeneralInformation_94A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_94A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 42, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern.addPattern(pattern='((AGNT|BILA|BROK))')
MT306_SequenceA_GeneralInformation_94A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_94A_Type_Pattern', MT306_SequenceA_GeneralInformation_94A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_94A_Type_Pattern = MT306_SequenceA_GeneralInformation_94A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22C_Type_Pattern
class MT306_SequenceA_GeneralInformation_22C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 55, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_22C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_22C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{4}[A-Z0-9]{2}[0-9]{4}[A-Z]{4}[A-Z0-9]{2})')
MT306_SequenceA_GeneralInformation_22C_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_22C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22C_Type_Pattern', MT306_SequenceA_GeneralInformation_22C_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_22C_Type_Pattern = MT306_SequenceA_GeneralInformation_22C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21N_Type_Pattern
class MT306_SequenceA_GeneralInformation_21N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 68, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_21N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_21N_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})")
MT306_SequenceA_GeneralInformation_21N_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_21N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21N_Type_Pattern', MT306_SequenceA_GeneralInformation_21N_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_21N_Type_Pattern = MT306_SequenceA_GeneralInformation_21N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21B_Type_Pattern
class MT306_SequenceA_GeneralInformation_21B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 81, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_21B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_21B_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})")
MT306_SequenceA_GeneralInformation_21B_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_21B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21B_Type_Pattern', MT306_SequenceA_GeneralInformation_21B_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_21B_Type_Pattern = MT306_SequenceA_GeneralInformation_21B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12F_Type_Pattern
class MT306_SequenceA_GeneralInformation_12F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 94, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_12F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_12F_Type_Pattern._CF_pattern.addPattern(pattern='((AVRF|AVRO|AVSF|AVSO|BINA|DAVF|DAVO|DIGI|NOTO|VANI))')
MT306_SequenceA_GeneralInformation_12F_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_12F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12F_Type_Pattern', MT306_SequenceA_GeneralInformation_12F_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_12F_Type_Pattern = MT306_SequenceA_GeneralInformation_12F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12E_Type_Pattern
class MT306_SequenceA_GeneralInformation_12E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 107, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_12E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_12E_Type_Pattern._CF_pattern.addPattern(pattern='((AMER|ASIA|BERM|EURO))')
MT306_SequenceA_GeneralInformation_12E_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_12E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12E_Type_Pattern', MT306_SequenceA_GeneralInformation_12E_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_12E_Type_Pattern = MT306_SequenceA_GeneralInformation_12E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12D_Type_Pattern
class MT306_SequenceA_GeneralInformation_12D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 120, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_12D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_12D_Type_Pattern._CF_pattern.addPattern(pattern='((CALL|PUTO))')
MT306_SequenceA_GeneralInformation_12D_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_12D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12D_Type_Pattern', MT306_SequenceA_GeneralInformation_12D_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_12D_Type_Pattern = MT306_SequenceA_GeneralInformation_12D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17A_Type_Pattern
class MT306_SequenceA_GeneralInformation_17A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_17A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 133, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_17A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_17A_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceA_GeneralInformation_17A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_17A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_17A_Type_Pattern', MT306_SequenceA_GeneralInformation_17A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_17A_Type_Pattern = MT306_SequenceA_GeneralInformation_17A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17F_Type_Pattern
class MT306_SequenceA_GeneralInformation_17F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_17F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 146, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceA_GeneralInformation_17F_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_17F_Type_Pattern', MT306_SequenceA_GeneralInformation_17F_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_17F_Type_Pattern = MT306_SequenceA_GeneralInformation_17F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22K_Type_Pattern
class MT306_SequenceA_GeneralInformation_22K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 159, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_22K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_22K_Type_Pattern._CF_pattern.addPattern(pattern="((CLST|CONF|KNIN|KNOT|OTHR|TRIG)(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT306_SequenceA_GeneralInformation_22K_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_22K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22K_Type_Pattern', MT306_SequenceA_GeneralInformation_22K_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_22K_Type_Pattern = MT306_SequenceA_GeneralInformation_22K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_30U_Type_Pattern
class MT306_SequenceA_GeneralInformation_30U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_30U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 172, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceA_GeneralInformation_30U_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_30U_Type_Pattern', MT306_SequenceA_GeneralInformation_30U_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_30U_Type_Pattern = MT306_SequenceA_GeneralInformation_30U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_29H_Type_Pattern
class MT306_SequenceA_GeneralInformation_29H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_29H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 185, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_29H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_29H_Type_Pattern._CF_pattern.addPattern(pattern='((ARBA|ATVI|AUME|AUSY|BEBR|BRSP|CAMO|CATO|CHGE|CHZU|CLSA|CNBE|CZPR|DECB|DEFR|DKCO|EETA|ESMA|EUTA|FIHE|FRPA|GBLO|GRAT|HKHK|HUBU|IDJA|IEDU|ILTA|INMU|ITMI|ITRO|JPTO|KRSE|LBBE|LKCO|LULU|MXMC|MYKL|NLAM|NOOS|NYFD|NYSE|NZAU|NZWE|PAPC|PHMA|PLWA|PTLI|ROBU|RUMO|SARI|SEST|SGSI|SKBR|THBA|TRAN|TRIS|TWTA|USCH|USGS|USLA|USNY|VNHA|ZAJO))')
MT306_SequenceA_GeneralInformation_29H_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_29H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_29H_Type_Pattern', MT306_SequenceA_GeneralInformation_29H_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_29H_Type_Pattern = MT306_SequenceA_GeneralInformation_29H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82A_Type_Pattern
class MT306_SequenceA_GeneralInformation_82A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 198, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceA_GeneralInformation_82A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82A_Type_Pattern', MT306_SequenceA_GeneralInformation_82A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_82A_Type_Pattern = MT306_SequenceA_GeneralInformation_82A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82D_Type_Pattern
class MT306_SequenceA_GeneralInformation_82D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 211, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_82D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_82D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceA_GeneralInformation_82D_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_82D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82D_Type_Pattern', MT306_SequenceA_GeneralInformation_82D_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_82D_Type_Pattern = MT306_SequenceA_GeneralInformation_82D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82J_Type_Pattern
class MT306_SequenceA_GeneralInformation_82J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 224, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceA_GeneralInformation_82J_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82J_Type_Pattern', MT306_SequenceA_GeneralInformation_82J_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_82J_Type_Pattern = MT306_SequenceA_GeneralInformation_82J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87A_Type_Pattern
class MT306_SequenceA_GeneralInformation_87A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 237, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceA_GeneralInformation_87A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87A_Type_Pattern', MT306_SequenceA_GeneralInformation_87A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_87A_Type_Pattern = MT306_SequenceA_GeneralInformation_87A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87D_Type_Pattern
class MT306_SequenceA_GeneralInformation_87D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 250, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_87D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_87D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceA_GeneralInformation_87D_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_87D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87D_Type_Pattern', MT306_SequenceA_GeneralInformation_87D_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_87D_Type_Pattern = MT306_SequenceA_GeneralInformation_87D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87J_Type_Pattern
class MT306_SequenceA_GeneralInformation_87J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 263, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceA_GeneralInformation_87J_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87J_Type_Pattern', MT306_SequenceA_GeneralInformation_87J_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_87J_Type_Pattern = MT306_SequenceA_GeneralInformation_87J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83A_Type_Pattern
class MT306_SequenceA_GeneralInformation_83A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 276, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceA_GeneralInformation_83A_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83A_Type_Pattern', MT306_SequenceA_GeneralInformation_83A_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_83A_Type_Pattern = MT306_SequenceA_GeneralInformation_83A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83D_Type_Pattern
class MT306_SequenceA_GeneralInformation_83D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 289, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_83D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_83D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceA_GeneralInformation_83D_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_83D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83D_Type_Pattern', MT306_SequenceA_GeneralInformation_83D_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_83D_Type_Pattern = MT306_SequenceA_GeneralInformation_83D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83J_Type_Pattern
class MT306_SequenceA_GeneralInformation_83J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 302, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceA_GeneralInformation_83J_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83J_Type_Pattern', MT306_SequenceA_GeneralInformation_83J_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_83J_Type_Pattern = MT306_SequenceA_GeneralInformation_83J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77H_Type_Pattern
class MT306_SequenceA_GeneralInformation_77H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_77H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 315, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern.addPattern(pattern='((AFB|DERV|FBF|FEOMA|ICOM|IFEMA|ISDA|ISDACN|OTHER)(/[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))?(//[0-9]{4})?)')
MT306_SequenceA_GeneralInformation_77H_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_77H_Type_Pattern', MT306_SequenceA_GeneralInformation_77H_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_77H_Type_Pattern = MT306_SequenceA_GeneralInformation_77H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77D_Type_Pattern
class MT306_SequenceA_GeneralInformation_77D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_77D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 328, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_77D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_77D_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT306_SequenceA_GeneralInformation_77D_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_77D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_77D_Type_Pattern', MT306_SequenceA_GeneralInformation_77D_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_77D_Type_Pattern = MT306_SequenceA_GeneralInformation_77D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_14C_Type_Pattern
class MT306_SequenceA_GeneralInformation_14C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_14C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 341, 1)
    _Documentation = None
MT306_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4})')
MT306_SequenceA_GeneralInformation_14C_Type_Pattern._InitializeFacetMap(MT306_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_14C_Type_Pattern', MT306_SequenceA_GeneralInformation_14C_Type_Pattern)
_module_typeBindings.MT306_SequenceA_GeneralInformation_14C_Type_Pattern = MT306_SequenceA_GeneralInformation_14C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_17V_Type_Pattern
class MT306_SequenceB_TransactionDetails_17V_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_17V_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 354, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_17V_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_17V_Type_Pattern._CF_pattern.addPattern(pattern='((B|S))')
MT306_SequenceB_TransactionDetails_17V_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_17V_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_17V_Type_Pattern', MT306_SequenceB_TransactionDetails_17V_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_17V_Type_Pattern = MT306_SequenceB_TransactionDetails_17V_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30T_Type_Pattern
class MT306_SequenceB_TransactionDetails_30T_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30T_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 367, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_30T_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_30T_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceB_TransactionDetails_30T_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_30T_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30T_Type_Pattern', MT306_SequenceB_TransactionDetails_30T_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_30T_Type_Pattern = MT306_SequenceB_TransactionDetails_30T_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30X_Type_Pattern
class MT306_SequenceB_TransactionDetails_30X_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30X_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 380, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_30X_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_30X_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceB_TransactionDetails_30X_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_30X_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30X_Type_Pattern', MT306_SequenceB_TransactionDetails_30X_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_30X_Type_Pattern = MT306_SequenceB_TransactionDetails_30X_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_29E_Type_Pattern
class MT306_SequenceB_TransactionDetails_29E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_29E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 393, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_29E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_29E_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{4}/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))')
MT306_SequenceB_TransactionDetails_29E_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_29E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_29E_Type_Pattern', MT306_SequenceB_TransactionDetails_29E_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_29E_Type_Pattern = MT306_SequenceB_TransactionDetails_29E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30F_Type_Pattern
class MT306_SequenceB_TransactionDetails_30F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 406, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_30F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_30F_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceB_TransactionDetails_30F_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_30F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30F_Type_Pattern', MT306_SequenceB_TransactionDetails_30F_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_30F_Type_Pattern = MT306_SequenceB_TransactionDetails_30F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30J_Type_Pattern
class MT306_SequenceB_TransactionDetails_30J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 419, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_30J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_30J_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{1}[0-9]{3})')
MT306_SequenceB_TransactionDetails_30J_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_30J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30J_Type_Pattern', MT306_SequenceB_TransactionDetails_30J_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_30J_Type_Pattern = MT306_SequenceB_TransactionDetails_30J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_14S_Type_Pattern
class MT306_SequenceB_TransactionDetails_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 432, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceB_TransactionDetails_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_14S_Type_Pattern', MT306_SequenceB_TransactionDetails_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_14S_Type_Pattern = MT306_SequenceB_TransactionDetails_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_39M_Type_Pattern
class MT306_SequenceB_TransactionDetails_39M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_39M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 445, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_39M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_39M_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{2})')
MT306_SequenceB_TransactionDetails_39M_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_39M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_39M_Type_Pattern', MT306_SequenceB_TransactionDetails_39M_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_39M_Type_Pattern = MT306_SequenceB_TransactionDetails_39M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern
class MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 458, 1)
    _Documentation = None
MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD|PCT)[0-9,(?0-9)]{1,12})')
MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern._InitializeFacetMap(MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern', MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern)
_module_typeBindings.MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern = MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 471, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 484, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 497, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 510, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 523, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 536, 1)
    _Documentation = None
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern._InitializeFacetMap(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern)
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 549, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 562, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 575, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 588, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 601, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 614, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 627, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 640, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 653, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 666, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 679, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 692, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 705, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 718, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 731, 1)
    _Documentation = None
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern._InitializeFacetMap(MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern)
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30P_Type_Pattern
class MT306_SequenceD_VanillaBlock_30P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_30P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 744, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_30P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_30P_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceD_VanillaBlock_30P_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_30P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_30P_Type_Pattern', MT306_SequenceD_VanillaBlock_30P_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_30P_Type_Pattern = MT306_SequenceD_VanillaBlock_30P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30Q_Type_Pattern
class MT306_SequenceD_VanillaBlock_30Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_30Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 757, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_30Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_30Q_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceD_VanillaBlock_30Q_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_30Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_30Q_Type_Pattern', MT306_SequenceD_VanillaBlock_30Q_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_30Q_Type_Pattern = MT306_SequenceD_VanillaBlock_30Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_26F_Type_Pattern
class MT306_SequenceD_VanillaBlock_26F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_26F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 770, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_26F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_26F_Type_Pattern._CF_pattern.addPattern(pattern='((NETCASH|PRINCIPAL))')
MT306_SequenceD_VanillaBlock_26F_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_26F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_26F_Type_Pattern', MT306_SequenceD_VanillaBlock_26F_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_26F_Type_Pattern = MT306_SequenceD_VanillaBlock_26F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_32B_Type_Pattern
class MT306_SequenceD_VanillaBlock_32B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_32B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 783, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_32B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_32B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceD_VanillaBlock_32B_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_32B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_32B_Type_Pattern', MT306_SequenceD_VanillaBlock_32B_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_32B_Type_Pattern = MT306_SequenceD_VanillaBlock_32B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_36_Type_Pattern
class MT306_SequenceD_VanillaBlock_36_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_36_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 796, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_36_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_36_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT306_SequenceD_VanillaBlock_36_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_36_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_36_Type_Pattern', MT306_SequenceD_VanillaBlock_36_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_36_Type_Pattern = MT306_SequenceD_VanillaBlock_36_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_33B_Type_Pattern
class MT306_SequenceD_VanillaBlock_33B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_33B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 809, 1)
    _Documentation = None
MT306_SequenceD_VanillaBlock_33B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceD_VanillaBlock_33B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceD_VanillaBlock_33B_Type_Pattern._InitializeFacetMap(MT306_SequenceD_VanillaBlock_33B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_33B_Type_Pattern', MT306_SequenceD_VanillaBlock_33B_Type_Pattern)
_module_typeBindings.MT306_SequenceD_VanillaBlock_33B_Type_Pattern = MT306_SequenceD_VanillaBlock_33B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_33E_Type_Pattern
class MT306_SequenceE_PayoutAmount_33E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_33E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 822, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_33E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_33E_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceE_PayoutAmount_33E_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_33E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_33E_Type_Pattern', MT306_SequenceE_PayoutAmount_33E_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_33E_Type_Pattern = MT306_SequenceE_PayoutAmount_33E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_30H_Type_Pattern
class MT306_SequenceE_PayoutAmount_30H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_30H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 835, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_30H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_30H_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceE_PayoutAmount_30H_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_30H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_30H_Type_Pattern', MT306_SequenceE_PayoutAmount_30H_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_30H_Type_Pattern = MT306_SequenceE_PayoutAmount_30H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53A_Type_Pattern
class MT306_SequenceE_PayoutAmount_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 848, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceE_PayoutAmount_53A_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53A_Type_Pattern', MT306_SequenceE_PayoutAmount_53A_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_53A_Type_Pattern = MT306_SequenceE_PayoutAmount_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53D_Type_Pattern
class MT306_SequenceE_PayoutAmount_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 861, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceE_PayoutAmount_53D_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53D_Type_Pattern', MT306_SequenceE_PayoutAmount_53D_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_53D_Type_Pattern = MT306_SequenceE_PayoutAmount_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53J_Type_Pattern
class MT306_SequenceE_PayoutAmount_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 874, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceE_PayoutAmount_53J_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53J_Type_Pattern', MT306_SequenceE_PayoutAmount_53J_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_53J_Type_Pattern = MT306_SequenceE_PayoutAmount_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86A_Type_Pattern
class MT306_SequenceE_PayoutAmount_86A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 887, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_86A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_86A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceE_PayoutAmount_86A_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_86A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86A_Type_Pattern', MT306_SequenceE_PayoutAmount_86A_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_86A_Type_Pattern = MT306_SequenceE_PayoutAmount_86A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86D_Type_Pattern
class MT306_SequenceE_PayoutAmount_86D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 900, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_86D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_86D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceE_PayoutAmount_86D_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_86D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86D_Type_Pattern', MT306_SequenceE_PayoutAmount_86D_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_86D_Type_Pattern = MT306_SequenceE_PayoutAmount_86D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86J_Type_Pattern
class MT306_SequenceE_PayoutAmount_86J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 913, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_86J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_86J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceE_PayoutAmount_86J_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_86J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86J_Type_Pattern', MT306_SequenceE_PayoutAmount_86J_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_86J_Type_Pattern = MT306_SequenceE_PayoutAmount_86J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56A_Type_Pattern
class MT306_SequenceE_PayoutAmount_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 926, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceE_PayoutAmount_56A_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56A_Type_Pattern', MT306_SequenceE_PayoutAmount_56A_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_56A_Type_Pattern = MT306_SequenceE_PayoutAmount_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56D_Type_Pattern
class MT306_SequenceE_PayoutAmount_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 939, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceE_PayoutAmount_56D_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56D_Type_Pattern', MT306_SequenceE_PayoutAmount_56D_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_56D_Type_Pattern = MT306_SequenceE_PayoutAmount_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56J_Type_Pattern
class MT306_SequenceE_PayoutAmount_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 952, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceE_PayoutAmount_56J_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56J_Type_Pattern', MT306_SequenceE_PayoutAmount_56J_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_56J_Type_Pattern = MT306_SequenceE_PayoutAmount_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57A_Type_Pattern
class MT306_SequenceE_PayoutAmount_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 965, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceE_PayoutAmount_57A_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57A_Type_Pattern', MT306_SequenceE_PayoutAmount_57A_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_57A_Type_Pattern = MT306_SequenceE_PayoutAmount_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57D_Type_Pattern
class MT306_SequenceE_PayoutAmount_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 978, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceE_PayoutAmount_57D_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57D_Type_Pattern', MT306_SequenceE_PayoutAmount_57D_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_57D_Type_Pattern = MT306_SequenceE_PayoutAmount_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57J_Type_Pattern
class MT306_SequenceE_PayoutAmount_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 991, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceE_PayoutAmount_57J_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57J_Type_Pattern', MT306_SequenceE_PayoutAmount_57J_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_57J_Type_Pattern = MT306_SequenceE_PayoutAmount_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58A_Type_Pattern
class MT306_SequenceE_PayoutAmount_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1004, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceE_PayoutAmount_58A_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58A_Type_Pattern', MT306_SequenceE_PayoutAmount_58A_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_58A_Type_Pattern = MT306_SequenceE_PayoutAmount_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58D_Type_Pattern
class MT306_SequenceE_PayoutAmount_58D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1017, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_58D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_58D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceE_PayoutAmount_58D_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_58D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58D_Type_Pattern', MT306_SequenceE_PayoutAmount_58D_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_58D_Type_Pattern = MT306_SequenceE_PayoutAmount_58D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58J_Type_Pattern
class MT306_SequenceE_PayoutAmount_58J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1030, 1)
    _Documentation = None
MT306_SequenceE_PayoutAmount_58J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceE_PayoutAmount_58J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceE_PayoutAmount_58J_Type_Pattern._InitializeFacetMap(MT306_SequenceE_PayoutAmount_58J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58J_Type_Pattern', MT306_SequenceE_PayoutAmount_58J_Type_Pattern)
_module_typeBindings.MT306_SequenceE_PayoutAmount_58J_Type_Pattern = MT306_SequenceE_PayoutAmount_58J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_22G_Type_Pattern
class MT306_SequenceF_BarrierBlock_22G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_22G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1043, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_22G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_22G_Type_Pattern._CF_pattern.addPattern(pattern='((DKIN|DKOT|KIKO|KOKI|SKIN|SKOT))')
MT306_SequenceF_BarrierBlock_22G_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_22G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_22G_Type_Pattern', MT306_SequenceF_BarrierBlock_22G_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_22G_Type_Pattern = MT306_SequenceF_BarrierBlock_22G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37J_Type_Pattern
class MT306_SequenceF_BarrierBlock_37J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_37J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1056, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_37J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_37J_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT306_SequenceF_BarrierBlock_37J_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_37J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_37J_Type_Pattern', MT306_SequenceF_BarrierBlock_37J_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_37J_Type_Pattern = MT306_SequenceF_BarrierBlock_37J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37L_Type_Pattern
class MT306_SequenceF_BarrierBlock_37L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_37L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1069, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_37L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_37L_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT306_SequenceF_BarrierBlock_37L_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_37L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_37L_Type_Pattern', MT306_SequenceF_BarrierBlock_37L_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_37L_Type_Pattern = MT306_SequenceF_BarrierBlock_37L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1082, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])/[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1095, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern._CF_pattern.addPattern(pattern='((ARBA|ATVI|AUME|AUSY|BEBR|BRSP|CAMO|CATO|CHGE|CHZU|CLSA|CNBE|CZPR|DECB|DEFR|DKCO|EETA|ESMA|EUTA|FIHE|FRPA|GBLO|GRAT|HKHK|HUBU|IDJA|IEDU|ILTA|INMU|ITMI|ITRO|JPTO|KRSE|LBBE|LKCO|LULU|MXMC|MYKL|NLAM|NOOS|NYFD|NYSE|NZAU|NZWE|PAPC|PHMA|PLWA|PTLI|ROBU|RUMO|SARI|SEST|SGSI|SKBR|THBA|TRAN|TRIS|TWTA|USCH|USGS|USLA|USNY|VNHA|ZAJO)(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))?)')
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1108, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern._CF_pattern.addPattern(pattern='((ARBA|ATVI|AUME|AUSY|BEBR|BRSP|CAMO|CATO|CHGE|CHZU|CLSA|CNBE|CZPR|DECB|DEFR|DKCO|EETA|ESMA|EUTA|FIHE|FRPA|GBLO|GRAT|HKHK|HUBU|IDJA|IEDU|ILTA|INMU|ITMI|ITRO|JPTO|KRSE|LBBE|LKCO|LULU|MXMC|MYKL|NLAM|NOOS|NYFD|NYSE|NZAU|NZWE|PAPC|PHMA|PLWA|PTLI|ROBU|RUMO|SARI|SEST|SGSI|SKBR|THBA|TRAN|TRIS|TWTA|USCH|USGS|USLA|USNY|VNHA|ZAJO)(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))?)')
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1121, 1)
    _Documentation = None
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern
class MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1134, 1)
    _Documentation = None
MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern._CF_pattern.addPattern(pattern='((DBTR|SITR))')
MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern._InitializeFacetMap(MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern', MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern)
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern = MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern
class MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1147, 1)
    _Documentation = None
MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern._InitializeFacetMap(MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern', MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern)
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern = MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern
class MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1160, 1)
    _Documentation = None
MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern._InitializeFacetMap(MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern', MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern)
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern = MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern
class MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1173, 1)
    _Documentation = None
MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)/(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD))')
MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern._InitializeFacetMap(MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern', MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern)
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern = MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern
class MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1186, 1)
    _Documentation = None
MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern', MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern = MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern
class MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1199, 1)
    _Documentation = None
MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern', MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern = MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern
class MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1212, 1)
    _Documentation = None
MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD))')
MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern._InitializeFacetMap(MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern', MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern)
_module_typeBindings.MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern = MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_12G_Type_Pattern
class MT306_SequenceI_EarlyTermination_12G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_12G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1225, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_12G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_12G_Type_Pattern._CF_pattern.addPattern(pattern='((AMER|BERM|EURO))')
MT306_SequenceI_EarlyTermination_12G_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_12G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_12G_Type_Pattern', MT306_SequenceI_EarlyTermination_12G_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_12G_Type_Pattern = MT306_SequenceI_EarlyTermination_12G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30T_Type_Pattern
class MT306_SequenceI_EarlyTermination_30T_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30T_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1238, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_30T_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_30T_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceI_EarlyTermination_30T_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_30T_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30T_Type_Pattern', MT306_SequenceI_EarlyTermination_30T_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_30T_Type_Pattern = MT306_SequenceI_EarlyTermination_30T_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_22Y_Type_Pattern
class MT306_SequenceI_EarlyTermination_22Y_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_22Y_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1251, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_22Y_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_22Y_Type_Pattern._CF_pattern.addPattern(pattern='((ANNU|BIAN|BIMO|FIVE|MONT|TENN|WEEK))')
MT306_SequenceI_EarlyTermination_22Y_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_22Y_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_22Y_Type_Pattern', MT306_SequenceI_EarlyTermination_22Y_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_22Y_Type_Pattern = MT306_SequenceI_EarlyTermination_22Y_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85A_Type_Pattern
class MT306_SequenceI_EarlyTermination_85A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1264, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_85A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_85A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceI_EarlyTermination_85A_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_85A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85A_Type_Pattern', MT306_SequenceI_EarlyTermination_85A_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_85A_Type_Pattern = MT306_SequenceI_EarlyTermination_85A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85D_Type_Pattern
class MT306_SequenceI_EarlyTermination_85D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1277, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_85D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_85D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceI_EarlyTermination_85D_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_85D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85D_Type_Pattern', MT306_SequenceI_EarlyTermination_85D_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_85D_Type_Pattern = MT306_SequenceI_EarlyTermination_85D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85J_Type_Pattern
class MT306_SequenceI_EarlyTermination_85J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1290, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_85J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_85J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceI_EarlyTermination_85J_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_85J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85J_Type_Pattern', MT306_SequenceI_EarlyTermination_85J_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_85J_Type_Pattern = MT306_SequenceI_EarlyTermination_85J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88A_Type_Pattern
class MT306_SequenceI_EarlyTermination_88A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1303, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_88A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_88A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceI_EarlyTermination_88A_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_88A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88A_Type_Pattern', MT306_SequenceI_EarlyTermination_88A_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_88A_Type_Pattern = MT306_SequenceI_EarlyTermination_88A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88D_Type_Pattern
class MT306_SequenceI_EarlyTermination_88D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1316, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_88D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_88D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceI_EarlyTermination_88D_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_88D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88D_Type_Pattern', MT306_SequenceI_EarlyTermination_88D_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_88D_Type_Pattern = MT306_SequenceI_EarlyTermination_88D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88J_Type_Pattern
class MT306_SequenceI_EarlyTermination_88J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1329, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_88J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_88J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceI_EarlyTermination_88J_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_88J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88J_Type_Pattern', MT306_SequenceI_EarlyTermination_88J_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_88J_Type_Pattern = MT306_SequenceI_EarlyTermination_88J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84A_Type_Pattern
class MT306_SequenceI_EarlyTermination_84A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1342, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_84A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_84A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceI_EarlyTermination_84A_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_84A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84A_Type_Pattern', MT306_SequenceI_EarlyTermination_84A_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_84A_Type_Pattern = MT306_SequenceI_EarlyTermination_84A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84B_Type_Pattern
class MT306_SequenceI_EarlyTermination_84B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1355, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_84B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_84B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT306_SequenceI_EarlyTermination_84B_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_84B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84B_Type_Pattern', MT306_SequenceI_EarlyTermination_84B_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_84B_Type_Pattern = MT306_SequenceI_EarlyTermination_84B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84D_Type_Pattern
class MT306_SequenceI_EarlyTermination_84D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1368, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_84D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_84D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceI_EarlyTermination_84D_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_84D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84D_Type_Pattern', MT306_SequenceI_EarlyTermination_84D_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_84D_Type_Pattern = MT306_SequenceI_EarlyTermination_84D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84J_Type_Pattern
class MT306_SequenceI_EarlyTermination_84J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1381, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_84J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_84J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceI_EarlyTermination_84J_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_84J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84J_Type_Pattern', MT306_SequenceI_EarlyTermination_84J_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_84J_Type_Pattern = MT306_SequenceI_EarlyTermination_84J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Y_Type_Pattern
class MT306_SequenceI_EarlyTermination_30Y_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30Y_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1394, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_30Y_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_30Y_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceI_EarlyTermination_30Y_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_30Y_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30Y_Type_Pattern', MT306_SequenceI_EarlyTermination_30Y_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_30Y_Type_Pattern = MT306_SequenceI_EarlyTermination_30Y_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29L_Type_Pattern
class MT306_SequenceI_EarlyTermination_29L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1407, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_29L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_29L_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])/[A-Z0-9]{4}/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))')
MT306_SequenceI_EarlyTermination_29L_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_29L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29L_Type_Pattern', MT306_SequenceI_EarlyTermination_29L_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_29L_Type_Pattern = MT306_SequenceI_EarlyTermination_29L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29E_Type_Pattern
class MT306_SequenceI_EarlyTermination_29E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1420, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_29E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_29E_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{4}/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))')
MT306_SequenceI_EarlyTermination_29E_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_29E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29E_Type_Pattern', MT306_SequenceI_EarlyTermination_29E_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_29E_Type_Pattern = MT306_SequenceI_EarlyTermination_29E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29M_Type_Pattern
class MT306_SequenceI_EarlyTermination_29M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1433, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_29M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_29M_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{4}/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))')
MT306_SequenceI_EarlyTermination_29M_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_29M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29M_Type_Pattern', MT306_SequenceI_EarlyTermination_29M_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_29M_Type_Pattern = MT306_SequenceI_EarlyTermination_29M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_17I_Type_Pattern
class MT306_SequenceI_EarlyTermination_17I_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_17I_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1446, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_17I_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_17I_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceI_EarlyTermination_17I_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_17I_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_17I_Type_Pattern', MT306_SequenceI_EarlyTermination_17I_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_17I_Type_Pattern = MT306_SequenceI_EarlyTermination_17I_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29N_Type_Pattern
class MT306_SequenceI_EarlyTermination_29N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1459, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_29N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_29N_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])/[A-Z0-9]{4}/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9]))')
MT306_SequenceI_EarlyTermination_29N_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_29N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29N_Type_Pattern', MT306_SequenceI_EarlyTermination_29N_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_29N_Type_Pattern = MT306_SequenceI_EarlyTermination_29N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Z_Type_Pattern
class MT306_SequenceI_EarlyTermination_30Z_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30Z_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1472, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_30Z_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_30Z_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceI_EarlyTermination_30Z_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_30Z_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30Z_Type_Pattern', MT306_SequenceI_EarlyTermination_30Z_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_30Z_Type_Pattern = MT306_SequenceI_EarlyTermination_30Z_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_14S_Type_Pattern
class MT306_SequenceI_EarlyTermination_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1485, 1)
    _Documentation = None
MT306_SequenceI_EarlyTermination_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceI_EarlyTermination_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceI_EarlyTermination_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceI_EarlyTermination_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_14S_Type_Pattern', MT306_SequenceI_EarlyTermination_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceI_EarlyTermination_14S_Type_Pattern = MT306_SequenceI_EarlyTermination_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1498, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1511, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern._CF_pattern.addPattern(pattern='((AD|PC))')
MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1524, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,2})')
MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SPOT_18B_Type_Pattern
class MT306_SPOT_18B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SPOT_18B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1537, 1)
    _Documentation = None
MT306_SPOT_18B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SPOT_18B_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,3})')
MT306_SPOT_18B_Type_Pattern._InitializeFacetMap(MT306_SPOT_18B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SPOT_18B_Type_Pattern', MT306_SPOT_18B_Type_Pattern)
_module_typeBindings.MT306_SPOT_18B_Type_Pattern = MT306_SPOT_18B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1550, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1563, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,15})')
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_STRIKE_18C_Type_Pattern
class MT306_STRIKE_18C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_STRIKE_18C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1576, 1)
    _Documentation = None
MT306_STRIKE_18C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_STRIKE_18C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,3})')
MT306_STRIKE_18C_Type_Pattern._InitializeFacetMap(MT306_STRIKE_18C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_STRIKE_18C_Type_Pattern', MT306_STRIKE_18C_Type_Pattern)
_module_typeBindings.MT306_STRIKE_18C_Type_Pattern = MT306_STRIKE_18C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1589, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1602, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,15})')
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1615, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern._CF_pattern.addPattern(pattern='((N)?[0-9,(?0-9)]{1,15})')
MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern
class MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1628, 1)
    _Documentation = None
MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern._CF_pattern.addPattern(pattern='((FLIPPED|NORMAL))')
MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern._InitializeFacetMap(MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern', MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern)
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern = MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_29A_Type_Pattern
class MT306_SequenceK_AdditionalInformation_29A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_29A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1641, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_29A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_29A_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceK_AdditionalInformation_29A_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_29A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_29A_Type_Pattern', MT306_SequenceK_AdditionalInformation_29A_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_29A_Type_Pattern = MT306_SequenceK_AdditionalInformation_29A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_24D_Type_Pattern
class MT306_SequenceK_AdditionalInformation_24D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_24D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1654, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_24D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_24D_Type_Pattern._CF_pattern.addPattern(pattern="((BROK|ELEC|FAXT|PHON|TELX)(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT306_SequenceK_AdditionalInformation_24D_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_24D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_24D_Type_Pattern', MT306_SequenceK_AdditionalInformation_24D_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_24D_Type_Pattern = MT306_SequenceK_AdditionalInformation_24D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88A_Type_Pattern
class MT306_SequenceK_AdditionalInformation_88A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_88A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1667, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_88A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_88A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceK_AdditionalInformation_88A_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_88A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_88A_Type_Pattern', MT306_SequenceK_AdditionalInformation_88A_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_88A_Type_Pattern = MT306_SequenceK_AdditionalInformation_88A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88D_Type_Pattern
class MT306_SequenceK_AdditionalInformation_88D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_88D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1680, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_88D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_88D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceK_AdditionalInformation_88D_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_88D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_88D_Type_Pattern', MT306_SequenceK_AdditionalInformation_88D_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_88D_Type_Pattern = MT306_SequenceK_AdditionalInformation_88D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_71F_Type_Pattern
class MT306_SequenceK_AdditionalInformation_71F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_71F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1693, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_71F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_71F_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceK_AdditionalInformation_71F_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_71F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_71F_Type_Pattern', MT306_SequenceK_AdditionalInformation_71F_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_71F_Type_Pattern = MT306_SequenceK_AdditionalInformation_71F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_21G_Type_Pattern
class MT306_SequenceK_AdditionalInformation_21G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_21G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1706, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_21G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_21G_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT306_SequenceK_AdditionalInformation_21G_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_21G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_21G_Type_Pattern', MT306_SequenceK_AdditionalInformation_21G_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_21G_Type_Pattern = MT306_SequenceK_AdditionalInformation_21G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_72_Type_Pattern
class MT306_SequenceK_AdditionalInformation_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1719, 1)
    _Documentation = None
MT306_SequenceK_AdditionalInformation_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceK_AdditionalInformation_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT306_SequenceK_AdditionalInformation_72_Type_Pattern._InitializeFacetMap(MT306_SequenceK_AdditionalInformation_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_72_Type_Pattern', MT306_SequenceK_AdditionalInformation_72_Type_Pattern)
_module_typeBindings.MT306_SequenceK_AdditionalInformation_72_Type_Pattern = MT306_SequenceK_AdditionalInformation_72_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1732, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5})')
MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern', MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern = MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1745, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern', MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern = MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1758, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern._CF_pattern.addPattern(pattern='((N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern', MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern = MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1771, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern', MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern = MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1784, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern', MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern = MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1797, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern', MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern = MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1810, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern', MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern = MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1823, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern', MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern = MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1836, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern', MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern = MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1849, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern', MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern = MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1862, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern', MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern = MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1875, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern', MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern = MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1888, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern', MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern = MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1901, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern', MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern = MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern
class MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1914, 1)
    _Documentation = None
MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern._InitializeFacetMap(MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern', MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern)
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern = MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1927, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1940, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1953, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1966, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1979, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1992, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,32})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2005, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2018, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,32})")
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96A_Type_Pattern
class MT306_SequenceM_ReportingInformation_96A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2031, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_96A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_96A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT306_SequenceM_ReportingInformation_96A_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_96A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96A_Type_Pattern', MT306_SequenceM_ReportingInformation_96A_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_96A_Type_Pattern = MT306_SequenceM_ReportingInformation_96A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96D_Type_Pattern
class MT306_SequenceM_ReportingInformation_96D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2044, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_96D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_96D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT306_SequenceM_ReportingInformation_96D_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_96D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96D_Type_Pattern', MT306_SequenceM_ReportingInformation_96D_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_96D_Type_Pattern = MT306_SequenceM_ReportingInformation_96D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96J_Type_Pattern
class MT306_SequenceM_ReportingInformation_96J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2057, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_96J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_96J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT306_SequenceM_ReportingInformation_96J_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_96J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96J_Type_Pattern', MT306_SequenceM_ReportingInformation_96J_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_96J_Type_Pattern = MT306_SequenceM_ReportingInformation_96J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22S_Type_Pattern
class MT306_SequenceM_ReportingInformation_22S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2070, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_22S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_22S_Type_Pattern._CF_pattern.addPattern(pattern="((C|P)/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT306_SequenceM_ReportingInformation_22S_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_22S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22S_Type_Pattern', MT306_SequenceM_ReportingInformation_22S_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_22S_Type_Pattern = MT306_SequenceM_ReportingInformation_22S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22T_Type_Pattern
class MT306_SequenceM_ReportingInformation_22T_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22T_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2083, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_22T_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_22T_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT306_SequenceM_ReportingInformation_22T_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_22T_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22T_Type_Pattern', MT306_SequenceM_ReportingInformation_22T_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_22T_Type_Pattern = MT306_SequenceM_ReportingInformation_22T_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17E_Type_Pattern
class MT306_SequenceM_ReportingInformation_17E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2096, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17E_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17E_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17E_Type_Pattern', MT306_SequenceM_ReportingInformation_17E_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17E_Type_Pattern = MT306_SequenceM_ReportingInformation_17E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22U_Type_Pattern
class MT306_SequenceM_ReportingInformation_22U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2109, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_22U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_22U_Type_Pattern._CF_pattern.addPattern(pattern='((FXCOEX|FXNDOP|FXSEBA|FXSEDI))')
MT306_SequenceM_ReportingInformation_22U_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_22U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22U_Type_Pattern', MT306_SequenceM_ReportingInformation_22U_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_22U_Type_Pattern = MT306_SequenceM_ReportingInformation_22U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17H_Type_Pattern
class MT306_SequenceM_ReportingInformation_17H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2122, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17H_Type_Pattern._CF_pattern.addPattern(pattern='((A|P|U))')
MT306_SequenceM_ReportingInformation_17H_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17H_Type_Pattern', MT306_SequenceM_ReportingInformation_17H_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17H_Type_Pattern = MT306_SequenceM_ReportingInformation_17H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17P_Type_Pattern
class MT306_SequenceM_ReportingInformation_17P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2135, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17P_Type_Pattern._CF_pattern.addPattern(pattern='((F|O|P|U))')
MT306_SequenceM_ReportingInformation_17P_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17P_Type_Pattern', MT306_SequenceM_ReportingInformation_17P_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17P_Type_Pattern = MT306_SequenceM_ReportingInformation_17P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22V_Type_Pattern
class MT306_SequenceM_ReportingInformation_22V_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22V_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2148, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_22V_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_22V_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT306_SequenceM_ReportingInformation_22V_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_22V_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22V_Type_Pattern', MT306_SequenceM_ReportingInformation_22V_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_22V_Type_Pattern = MT306_SequenceM_ReportingInformation_22V_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_98D_Type_Pattern
class MT306_SequenceM_ReportingInformation_98D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_98D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2161, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_98D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_98D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[1-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[1-3])(([0-5][0-9]))?)?)')
MT306_SequenceM_ReportingInformation_98D_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_98D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_98D_Type_Pattern', MT306_SequenceM_ReportingInformation_98D_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_98D_Type_Pattern = MT306_SequenceM_ReportingInformation_98D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17W_Type_Pattern
class MT306_SequenceM_ReportingInformation_17W_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17W_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2174, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17W_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17W_Type_Pattern._CF_pattern.addPattern(pattern='((Y))')
MT306_SequenceM_ReportingInformation_17W_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17W_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17W_Type_Pattern', MT306_SequenceM_ReportingInformation_17W_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17W_Type_Pattern = MT306_SequenceM_ReportingInformation_17W_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Y_Type_Pattern
class MT306_SequenceM_ReportingInformation_17Y_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Y_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2187, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17Y_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17Y_Type_Pattern._CF_pattern.addPattern(pattern='((F|N))')
MT306_SequenceM_ReportingInformation_17Y_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17Y_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Y_Type_Pattern', MT306_SequenceM_ReportingInformation_17Y_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Y_Type_Pattern = MT306_SequenceM_ReportingInformation_17Y_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Z_Type_Pattern
class MT306_SequenceM_ReportingInformation_17Z_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Z_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2200, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17Z_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17Z_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17Z_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17Z_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Z_Type_Pattern', MT306_SequenceM_ReportingInformation_17Z_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Z_Type_Pattern = MT306_SequenceM_ReportingInformation_17Z_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22Q_Type_Pattern
class MT306_SequenceM_ReportingInformation_22Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2213, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_22Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_22Q_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,10})")
MT306_SequenceM_ReportingInformation_22Q_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_22Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22Q_Type_Pattern', MT306_SequenceM_ReportingInformation_22Q_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_22Q_Type_Pattern = MT306_SequenceM_ReportingInformation_22Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17L_Type_Pattern
class MT306_SequenceM_ReportingInformation_17L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2226, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17L_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17L_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17L_Type_Pattern', MT306_SequenceM_ReportingInformation_17L_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17L_Type_Pattern = MT306_SequenceM_ReportingInformation_17L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17M_Type_Pattern
class MT306_SequenceM_ReportingInformation_17M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2239, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17M_Type_Pattern._CF_pattern.addPattern(pattern='((A|C|F|I|L|O|R|U))')
MT306_SequenceM_ReportingInformation_17M_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17M_Type_Pattern', MT306_SequenceM_ReportingInformation_17M_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17M_Type_Pattern = MT306_SequenceM_ReportingInformation_17M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Q_Type_Pattern
class MT306_SequenceM_ReportingInformation_17Q_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Q_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2252, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17Q_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17Q_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17Q_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17Q_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Q_Type_Pattern', MT306_SequenceM_ReportingInformation_17Q_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Q_Type_Pattern = MT306_SequenceM_ReportingInformation_17Q_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17S_Type_Pattern
class MT306_SequenceM_ReportingInformation_17S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2265, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17S_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17S_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17S_Type_Pattern', MT306_SequenceM_ReportingInformation_17S_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17S_Type_Pattern = MT306_SequenceM_ReportingInformation_17S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17X_Type_Pattern
class MT306_SequenceM_ReportingInformation_17X_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17X_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2278, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_17X_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_17X_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT306_SequenceM_ReportingInformation_17X_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_17X_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17X_Type_Pattern', MT306_SequenceM_ReportingInformation_17X_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_17X_Type_Pattern = MT306_SequenceM_ReportingInformation_17X_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_34C_Type_Pattern
class MT306_SequenceM_ReportingInformation_34C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_34C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2291, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_34C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_34C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{4}/(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT306_SequenceM_ReportingInformation_34C_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_34C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_34C_Type_Pattern', MT306_SequenceM_ReportingInformation_34C_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_34C_Type_Pattern = MT306_SequenceM_ReportingInformation_34C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_77A_Type_Pattern
class MT306_SequenceM_ReportingInformation_77A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_77A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2304, 1)
    _Documentation = None
MT306_SequenceM_ReportingInformation_77A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT306_SequenceM_ReportingInformation_77A_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,20})")
MT306_SequenceM_ReportingInformation_77A_Type_Pattern._InitializeFacetMap(MT306_SequenceM_ReportingInformation_77A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_77A_Type_Pattern', MT306_SequenceM_ReportingInformation_77A_Type_Pattern)
_module_typeBindings.MT306_SequenceM_ReportingInformation_77A_Type_Pattern = MT306_SequenceM_ReportingInformation_77A_Type_Pattern

# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation with content type ELEMENT_ONLY
class MT306_SequenceA_GeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2317, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SendersReference uses Python identifier SendersReference
    __SendersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), 'SendersReference', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comSendersReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2319, 3), )

    
    SendersReference = property(__SendersReference.value, __SendersReference.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2320, 3), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}TypeOfOperation uses Python identifier TypeOfOperation
    __TypeOfOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation'), 'TypeOfOperation', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comTypeOfOperation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2321, 3), )

    
    TypeOfOperation = property(__TypeOfOperation.value, __TypeOfOperation.set, None, None)

    
    # Element {http://www.w3schools.com}ScopeOfOperation uses Python identifier ScopeOfOperation
    __ScopeOfOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation'), 'ScopeOfOperation', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comScopeOfOperation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2322, 3), )

    
    ScopeOfOperation = property(__ScopeOfOperation.value, __ScopeOfOperation.set, None, None)

    
    # Element {http://www.w3schools.com}CommonReference uses Python identifier CommonReference
    __CommonReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommonReference'), 'CommonReference', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comCommonReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2323, 3), )

    
    CommonReference = property(__CommonReference.value, __CommonReference.set, None, None)

    
    # Element {http://www.w3schools.com}ContractNumberPartyA uses Python identifier ContractNumberPartyA
    __ContractNumberPartyA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyA'), 'ContractNumberPartyA', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comContractNumberPartyA', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2324, 3), )

    
    ContractNumberPartyA = property(__ContractNumberPartyA.value, __ContractNumberPartyA.set, None, None)

    
    # Element {http://www.w3schools.com}ContractNumberPartyB uses Python identifier ContractNumberPartyB
    __ContractNumberPartyB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyB'), 'ContractNumberPartyB', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comContractNumberPartyB', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2325, 3), )

    
    ContractNumberPartyB = property(__ContractNumberPartyB.value, __ContractNumberPartyB.set, None, None)

    
    # Element {http://www.w3schools.com}OptionStyle uses Python identifier OptionStyle
    __OptionStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OptionStyle'), 'OptionStyle', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comOptionStyle', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2326, 3), )

    
    OptionStyle = property(__OptionStyle.value, __OptionStyle.set, None, None)

    
    # Element {http://www.w3schools.com}ExpirationStyle uses Python identifier ExpirationStyle
    __ExpirationStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExpirationStyle'), 'ExpirationStyle', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comExpirationStyle', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2327, 3), )

    
    ExpirationStyle = property(__ExpirationStyle.value, __ExpirationStyle.set, None, None)

    
    # Element {http://www.w3schools.com}OptionType uses Python identifier OptionType
    __OptionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OptionType'), 'OptionType', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comOptionType', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2328, 3), )

    
    OptionType = property(__OptionType.value, __OptionType.set, None, None)

    
    # Element {http://www.w3schools.com}BarrierIndicator uses Python identifier BarrierIndicator
    __BarrierIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarrierIndicator'), 'BarrierIndicator', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comBarrierIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2329, 3), )

    
    BarrierIndicator = property(__BarrierIndicator.value, __BarrierIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}NonDeliverableIndicator uses Python identifier NonDeliverableIndicator
    __NonDeliverableIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NonDeliverableIndicator'), 'NonDeliverableIndicator', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comNonDeliverableIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2330, 3), )

    
    NonDeliverableIndicator = property(__NonDeliverableIndicator.value, __NonDeliverableIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}TypeOfEvent uses Python identifier TypeOfEvent
    __TypeOfEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfEvent'), 'TypeOfEvent', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comTypeOfEvent', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2331, 3), )

    
    TypeOfEvent = property(__TypeOfEvent.value, __TypeOfEvent.set, None, None)

    
    # Element {http://www.w3schools.com}DateOfTriggerHit uses Python identifier DateOfTriggerHit
    __DateOfTriggerHit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateOfTriggerHit'), 'DateOfTriggerHit', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comDateOfTriggerHit', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2332, 3), )

    
    DateOfTriggerHit = property(__DateOfTriggerHit.value, __DateOfTriggerHit.set, None, None)

    
    # Element {http://www.w3schools.com}LocationOfTriggerHit uses Python identifier LocationOfTriggerHit
    __LocationOfTriggerHit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocationOfTriggerHit'), 'LocationOfTriggerHit', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comLocationOfTriggerHit', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2333, 3), )

    
    LocationOfTriggerHit = property(__LocationOfTriggerHit.value, __LocationOfTriggerHit.set, None, None)

    
    # Element {http://www.w3schools.com}PartyA_A uses Python identifier PartyA_A
    __PartyA_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyA_A'), 'PartyA_A', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyA_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2335, 4), )

    
    PartyA_A = property(__PartyA_A.value, __PartyA_A.set, None, None)

    
    # Element {http://www.w3schools.com}PartyA_D uses Python identifier PartyA_D
    __PartyA_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyA_D'), 'PartyA_D', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyA_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2336, 4), )

    
    PartyA_D = property(__PartyA_D.value, __PartyA_D.set, None, None)

    
    # Element {http://www.w3schools.com}PartyA_J uses Python identifier PartyA_J
    __PartyA_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyA_J'), 'PartyA_J', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyA_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2337, 4), )

    
    PartyA_J = property(__PartyA_J.value, __PartyA_J.set, None, None)

    
    # Element {http://www.w3schools.com}PartyB_A uses Python identifier PartyB_A
    __PartyB_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyB_A'), 'PartyB_A', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyB_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2340, 4), )

    
    PartyB_A = property(__PartyB_A.value, __PartyB_A.set, None, None)

    
    # Element {http://www.w3schools.com}PartyB_D uses Python identifier PartyB_D
    __PartyB_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyB_D'), 'PartyB_D', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyB_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2341, 4), )

    
    PartyB_D = property(__PartyB_D.value, __PartyB_D.set, None, None)

    
    # Element {http://www.w3schools.com}PartyB_J uses Python identifier PartyB_J
    __PartyB_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartyB_J'), 'PartyB_J', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comPartyB_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2342, 4), )

    
    PartyB_J = property(__PartyB_J.value, __PartyB_J.set, None, None)

    
    # Element {http://www.w3schools.com}FundOrBeneficiaryCustomer_A uses Python identifier FundOrBeneficiaryCustomer_A
    __FundOrBeneficiaryCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_A'), 'FundOrBeneficiaryCustomer_A', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comFundOrBeneficiaryCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2345, 4), )

    
    FundOrBeneficiaryCustomer_A = property(__FundOrBeneficiaryCustomer_A.value, __FundOrBeneficiaryCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}FundOrBeneficiaryCustomer_D uses Python identifier FundOrBeneficiaryCustomer_D
    __FundOrBeneficiaryCustomer_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_D'), 'FundOrBeneficiaryCustomer_D', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comFundOrBeneficiaryCustomer_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2346, 4), )

    
    FundOrBeneficiaryCustomer_D = property(__FundOrBeneficiaryCustomer_D.value, __FundOrBeneficiaryCustomer_D.set, None, None)

    
    # Element {http://www.w3schools.com}FundOrBeneficiaryCustomer_J uses Python identifier FundOrBeneficiaryCustomer_J
    __FundOrBeneficiaryCustomer_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_J'), 'FundOrBeneficiaryCustomer_J', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comFundOrBeneficiaryCustomer_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2347, 4), )

    
    FundOrBeneficiaryCustomer_J = property(__FundOrBeneficiaryCustomer_J.value, __FundOrBeneficiaryCustomer_J.set, None, None)

    
    # Element {http://www.w3schools.com}TypeDateVersionOfTheAgreement uses Python identifier TypeDateVersionOfTheAgreement
    __TypeDateVersionOfTheAgreement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement'), 'TypeDateVersionOfTheAgreement', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comTypeDateVersionOfTheAgreement', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2349, 3), )

    
    TypeDateVersionOfTheAgreement = property(__TypeDateVersionOfTheAgreement.value, __TypeDateVersionOfTheAgreement.set, None, None)

    
    # Element {http://www.w3schools.com}AdditionalConditions uses Python identifier AdditionalConditions
    __AdditionalConditions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AdditionalConditions'), 'AdditionalConditions', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comAdditionalConditions', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2350, 3), )

    
    AdditionalConditions = property(__AdditionalConditions.value, __AdditionalConditions.set, None, None)

    
    # Element {http://www.w3schools.com}YearOfDefinitions uses Python identifier YearOfDefinitions
    __YearOfDefinitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions'), 'YearOfDefinitions', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_httpwww_w3schools_comYearOfDefinitions', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2351, 3), )

    
    YearOfDefinitions = property(__YearOfDefinitions.value, __YearOfDefinitions.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2353, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2353, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2354, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2354, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2355, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2355, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SendersReference.name() : __SendersReference,
        __RelatedReference.name() : __RelatedReference,
        __TypeOfOperation.name() : __TypeOfOperation,
        __ScopeOfOperation.name() : __ScopeOfOperation,
        __CommonReference.name() : __CommonReference,
        __ContractNumberPartyA.name() : __ContractNumberPartyA,
        __ContractNumberPartyB.name() : __ContractNumberPartyB,
        __OptionStyle.name() : __OptionStyle,
        __ExpirationStyle.name() : __ExpirationStyle,
        __OptionType.name() : __OptionType,
        __BarrierIndicator.name() : __BarrierIndicator,
        __NonDeliverableIndicator.name() : __NonDeliverableIndicator,
        __TypeOfEvent.name() : __TypeOfEvent,
        __DateOfTriggerHit.name() : __DateOfTriggerHit,
        __LocationOfTriggerHit.name() : __LocationOfTriggerHit,
        __PartyA_A.name() : __PartyA_A,
        __PartyA_D.name() : __PartyA_D,
        __PartyA_J.name() : __PartyA_J,
        __PartyB_A.name() : __PartyB_A,
        __PartyB_D.name() : __PartyB_D,
        __PartyB_J.name() : __PartyB_J,
        __FundOrBeneficiaryCustomer_A.name() : __FundOrBeneficiaryCustomer_A,
        __FundOrBeneficiaryCustomer_D.name() : __FundOrBeneficiaryCustomer_D,
        __FundOrBeneficiaryCustomer_J.name() : __FundOrBeneficiaryCustomer_J,
        __TypeDateVersionOfTheAgreement.name() : __TypeDateVersionOfTheAgreement,
        __AdditionalConditions.name() : __AdditionalConditions,
        __YearOfDefinitions.name() : __YearOfDefinitions
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation = MT306_SequenceA_GeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation', MT306_SequenceA_GeneralInformation)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails with content type ELEMENT_ONLY
class MT306_SequenceB_TransactionDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2357, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}BuySellIndicator uses Python identifier BuySellIndicator
    __BuySellIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BuySellIndicator'), 'BuySellIndicator', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comBuySellIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2359, 3), )

    
    BuySellIndicator = property(__BuySellIndicator.value, __BuySellIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}TradeDate uses Python identifier TradeDate
    __TradeDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TradeDate'), 'TradeDate', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comTradeDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2360, 3), )

    
    TradeDate = property(__TradeDate.value, __TradeDate.set, None, None)

    
    # Element {http://www.w3schools.com}ExpirationDate uses Python identifier ExpirationDate
    __ExpirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExpirationDate'), 'ExpirationDate', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comExpirationDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2361, 3), )

    
    ExpirationDate = property(__ExpirationDate.value, __ExpirationDate.set, None, None)

    
    # Element {http://www.w3schools.com}ExpirationLocationAndTime uses Python identifier ExpirationLocationAndTime
    __ExpirationLocationAndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExpirationLocationAndTime'), 'ExpirationLocationAndTime', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comExpirationLocationAndTime', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2362, 3), )

    
    ExpirationLocationAndTime = property(__ExpirationLocationAndTime.value, __ExpirationLocationAndTime.set, None, None)

    
    # Element {http://www.w3schools.com}FinalSettlementDate_F uses Python identifier FinalSettlementDate_F
    __FinalSettlementDate_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_F'), 'FinalSettlementDate_F', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comFinalSettlementDate_F', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2364, 4), )

    
    FinalSettlementDate_F = property(__FinalSettlementDate_F.value, __FinalSettlementDate_F.set, None, None)

    
    # Element {http://www.w3schools.com}FinalSettlementDate_J uses Python identifier FinalSettlementDate_J
    __FinalSettlementDate_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_J'), 'FinalSettlementDate_J', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comFinalSettlementDate_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2365, 4), )

    
    FinalSettlementDate_J = property(__FinalSettlementDate_J.value, __FinalSettlementDate_J.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comSettlementRateSource', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2367, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Element {http://www.w3schools.com}PaymentClearingCentre uses Python identifier PaymentClearingCentre
    __PaymentClearingCentre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre'), 'PaymentClearingCentre', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comPaymentClearingCentre', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2368, 3), )

    
    PaymentClearingCentre = property(__PaymentClearingCentre.value, __PaymentClearingCentre.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceB1_PremiumDetails uses Python identifier SubsequenceB1_PremiumDetails
    __SubsequenceB1_PremiumDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_PremiumDetails'), 'SubsequenceB1_PremiumDetails', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comSubsequenceB1_PremiumDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2369, 3), )

    
    SubsequenceB1_PremiumDetails = property(__SubsequenceB1_PremiumDetails.value, __SubsequenceB1_PremiumDetails.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceB2_CalculationAgent uses Python identifier SubsequenceB2_CalculationAgent
    __SubsequenceB2_CalculationAgent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_CalculationAgent'), 'SubsequenceB2_CalculationAgent', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_httpwww_w3schools_comSubsequenceB2_CalculationAgent', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2370, 3), )

    
    SubsequenceB2_CalculationAgent = property(__SubsequenceB2_CalculationAgent.value, __SubsequenceB2_CalculationAgent.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2372, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2372, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2373, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2373, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2374, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2374, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __BuySellIndicator.name() : __BuySellIndicator,
        __TradeDate.name() : __TradeDate,
        __ExpirationDate.name() : __ExpirationDate,
        __ExpirationLocationAndTime.name() : __ExpirationLocationAndTime,
        __FinalSettlementDate_F.name() : __FinalSettlementDate_F,
        __FinalSettlementDate_J.name() : __FinalSettlementDate_J,
        __SettlementRateSource.name() : __SettlementRateSource,
        __PaymentClearingCentre.name() : __PaymentClearingCentre,
        __SubsequenceB1_PremiumDetails.name() : __SubsequenceB1_PremiumDetails,
        __SubsequenceB2_CalculationAgent.name() : __SubsequenceB2_CalculationAgent
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails = MT306_SequenceB_TransactionDetails
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails', MT306_SequenceB_TransactionDetails)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails with content type ELEMENT_ONLY
class MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2376, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}PremiumPrice uses Python identifier PremiumPrice
    __PremiumPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PremiumPrice'), 'PremiumPrice', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_httpwww_w3schools_comPremiumPrice', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2378, 3), )

    
    PremiumPrice = property(__PremiumPrice.value, __PremiumPrice.set, None, None)

    
    # Element {http://www.w3schools.com}PremiumPaymentDate uses Python identifier PremiumPaymentDate
    __PremiumPaymentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PremiumPaymentDate'), 'PremiumPaymentDate', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_httpwww_w3schools_comPremiumPaymentDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2379, 3), )

    
    PremiumPaymentDate = property(__PremiumPaymentDate.value, __PremiumPaymentDate.set, None, None)

    
    # Element {http://www.w3schools.com}PremiumCurrencyAndAmount uses Python identifier PremiumCurrencyAndAmount
    __PremiumCurrencyAndAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PremiumCurrencyAndAmount'), 'PremiumCurrencyAndAmount', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_httpwww_w3schools_comPremiumCurrencyAndAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2380, 3), )

    
    PremiumCurrencyAndAmount = property(__PremiumCurrencyAndAmount.value, __PremiumCurrencyAndAmount.set, None, None)

    _ElementMap.update({
        __PremiumPrice.name() : __PremiumPrice,
        __PremiumPaymentDate.name() : __PremiumPaymentDate,
        __PremiumCurrencyAndAmount.name() : __PremiumCurrencyAndAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails', MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent with content type ELEMENT_ONLY
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2383, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}CalculationAgent_A uses Python identifier CalculationAgent_A
    __CalculationAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A'), 'CalculationAgent_A', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_httpwww_w3schools_comCalculationAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2386, 4), )

    
    CalculationAgent_A = property(__CalculationAgent_A.value, __CalculationAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_B uses Python identifier CalculationAgent_B
    __CalculationAgent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B'), 'CalculationAgent_B', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_httpwww_w3schools_comCalculationAgent_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2387, 4), )

    
    CalculationAgent_B = property(__CalculationAgent_B.value, __CalculationAgent_B.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_D uses Python identifier CalculationAgent_D
    __CalculationAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D'), 'CalculationAgent_D', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_httpwww_w3schools_comCalculationAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2388, 4), )

    
    CalculationAgent_D = property(__CalculationAgent_D.value, __CalculationAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_J uses Python identifier CalculationAgent_J
    __CalculationAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J'), 'CalculationAgent_J', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_httpwww_w3schools_comCalculationAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2389, 4), )

    
    CalculationAgent_J = property(__CalculationAgent_J.value, __CalculationAgent_J.set, None, None)

    _ElementMap.update({
        __CalculationAgent_A.name() : __CalculationAgent_A,
        __CalculationAgent_B.name() : __CalculationAgent_B,
        __CalculationAgent_D.name() : __CalculationAgent_D,
        __CalculationAgent_J.name() : __CalculationAgent_J
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium with content type ELEMENT_ONLY
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2393, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2396, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_D uses Python identifier DeliveryAgent_D
    __DeliveryAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), 'DeliveryAgent_D', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comDeliveryAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2397, 4), )

    
    DeliveryAgent_D = property(__DeliveryAgent_D.value, __DeliveryAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2398, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_A uses Python identifier Intermediary2_A
    __Intermediary2_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), 'Intermediary2_A', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary2_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2401, 4), )

    
    Intermediary2_A = property(__Intermediary2_A.value, __Intermediary2_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_D uses Python identifier Intermediary2_D
    __Intermediary2_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), 'Intermediary2_D', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary2_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2402, 4), )

    
    Intermediary2_D = property(__Intermediary2_D.value, __Intermediary2_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_J uses Python identifier Intermediary2_J
    __Intermediary2_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), 'Intermediary2_J', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary2_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2403, 4), )

    
    Intermediary2_J = property(__Intermediary2_J.value, __Intermediary2_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2406, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2407, 4), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2408, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2411, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_D uses Python identifier ReceivingAgent_D
    __ReceivingAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), 'ReceivingAgent_D', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comReceivingAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2412, 4), )

    
    ReceivingAgent_D = property(__ReceivingAgent_D.value, __ReceivingAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2413, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2416, 4), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_D uses Python identifier BeneficiaryInstitution_D
    __BeneficiaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), 'BeneficiaryInstitution_D', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comBeneficiaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2417, 4), )

    
    BeneficiaryInstitution_D = property(__BeneficiaryInstitution_D.value, __BeneficiaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_J uses Python identifier BeneficiaryInstitution_J
    __BeneficiaryInstitution_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), 'BeneficiaryInstitution_J', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_httpwww_w3schools_comBeneficiaryInstitution_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2418, 4), )

    
    BeneficiaryInstitution_J = property(__BeneficiaryInstitution_J.value, __BeneficiaryInstitution_J.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2421, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2421, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2422, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2422, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2423, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2423, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_D.name() : __DeliveryAgent_D,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary2_A.name() : __Intermediary2_A,
        __Intermediary2_D.name() : __Intermediary2_D,
        __Intermediary2_J.name() : __Intermediary2_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_D.name() : __Intermediary_D,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_D.name() : __ReceivingAgent_D,
        __ReceivingAgent_J.name() : __ReceivingAgent_J,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_D.name() : __BeneficiaryInstitution_D,
        __BeneficiaryInstitution_J.name() : __BeneficiaryInstitution_J
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium = MT306_SequenceC_SettlementInstructionsforPaymentofPremium
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium', MT306_SequenceC_SettlementInstructionsforPaymentofPremium)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock with content type ELEMENT_ONLY
class MT306_SequenceD_VanillaBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2425, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}EarliestExerciseDate uses Python identifier EarliestExerciseDate
    __EarliestExerciseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseDate'), 'EarliestExerciseDate', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comEarliestExerciseDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2427, 3), )

    
    EarliestExerciseDate = property(__EarliestExerciseDate.value, __EarliestExerciseDate.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediateExerciseDate uses Python identifier IntermediateExerciseDate
    __IntermediateExerciseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediateExerciseDate'), 'IntermediateExerciseDate', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comIntermediateExerciseDate', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2428, 3), )

    
    IntermediateExerciseDate = property(__IntermediateExerciseDate.value, __IntermediateExerciseDate.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementType uses Python identifier SettlementType
    __SettlementType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementType'), 'SettlementType', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comSettlementType', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2429, 3), )

    
    SettlementType = property(__SettlementType.value, __SettlementType.set, None, None)

    
    # Element {http://www.w3schools.com}PutCurrencyAndAmount uses Python identifier PutCurrencyAndAmount
    __PutCurrencyAndAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PutCurrencyAndAmount'), 'PutCurrencyAndAmount', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comPutCurrencyAndAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2430, 3), )

    
    PutCurrencyAndAmount = property(__PutCurrencyAndAmount.value, __PutCurrencyAndAmount.set, None, None)

    
    # Element {http://www.w3schools.com}StrikePrice uses Python identifier StrikePrice
    __StrikePrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StrikePrice'), 'StrikePrice', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comStrikePrice', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2431, 3), )

    
    StrikePrice = property(__StrikePrice.value, __StrikePrice.set, None, None)

    
    # Element {http://www.w3schools.com}CallCurrencyAndAmount uses Python identifier CallCurrencyAndAmount
    __CallCurrencyAndAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CallCurrencyAndAmount'), 'CallCurrencyAndAmount', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_httpwww_w3schools_comCallCurrencyAndAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2432, 3), )

    
    CallCurrencyAndAmount = property(__CallCurrencyAndAmount.value, __CallCurrencyAndAmount.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2434, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2434, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2435, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2435, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2436, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2436, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __EarliestExerciseDate.name() : __EarliestExerciseDate,
        __IntermediateExerciseDate.name() : __IntermediateExerciseDate,
        __SettlementType.name() : __SettlementType,
        __PutCurrencyAndAmount.name() : __PutCurrencyAndAmount,
        __StrikePrice.name() : __StrikePrice,
        __CallCurrencyAndAmount.name() : __CallCurrencyAndAmount
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock = MT306_SequenceD_VanillaBlock
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock', MT306_SequenceD_VanillaBlock)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount with content type ELEMENT_ONLY
class MT306_SequenceE_PayoutAmount (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2438, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}CurrencyAmount uses Python identifier CurrencyAmount
    __CurrencyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), 'CurrencyAmount', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comCurrencyAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2440, 3), )

    
    CurrencyAmount = property(__CurrencyAmount.value, __CurrencyAmount.set, None, None)

    
    # Element {http://www.w3schools.com}TouchPaymentDate uses Python identifier TouchPaymentDate
    __TouchPaymentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TouchPaymentDate'), 'TouchPaymentDate', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comTouchPaymentDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2441, 3), )

    
    TouchPaymentDate = property(__TouchPaymentDate.value, __TouchPaymentDate.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2443, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_D uses Python identifier DeliveryAgent_D
    __DeliveryAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), 'DeliveryAgent_D', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comDeliveryAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2444, 4), )

    
    DeliveryAgent_D = property(__DeliveryAgent_D.value, __DeliveryAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2445, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_A uses Python identifier Intermediary2_A
    __Intermediary2_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), 'Intermediary2_A', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary2_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2448, 4), )

    
    Intermediary2_A = property(__Intermediary2_A.value, __Intermediary2_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_D uses Python identifier Intermediary2_D
    __Intermediary2_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), 'Intermediary2_D', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary2_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2449, 4), )

    
    Intermediary2_D = property(__Intermediary2_D.value, __Intermediary2_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_J uses Python identifier Intermediary2_J
    __Intermediary2_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), 'Intermediary2_J', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary2_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2450, 4), )

    
    Intermediary2_J = property(__Intermediary2_J.value, __Intermediary2_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2453, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2454, 4), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2455, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2458, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_D uses Python identifier ReceivingAgent_D
    __ReceivingAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), 'ReceivingAgent_D', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comReceivingAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2459, 4), )

    
    ReceivingAgent_D = property(__ReceivingAgent_D.value, __ReceivingAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2460, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2463, 4), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_D uses Python identifier BeneficiaryInstitution_D
    __BeneficiaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), 'BeneficiaryInstitution_D', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comBeneficiaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2464, 4), )

    
    BeneficiaryInstitution_D = property(__BeneficiaryInstitution_D.value, __BeneficiaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_J uses Python identifier BeneficiaryInstitution_J
    __BeneficiaryInstitution_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), 'BeneficiaryInstitution_J', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_httpwww_w3schools_comBeneficiaryInstitution_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2465, 4), )

    
    BeneficiaryInstitution_J = property(__BeneficiaryInstitution_J.value, __BeneficiaryInstitution_J.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2468, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2468, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2469, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2469, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2470, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2470, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __CurrencyAmount.name() : __CurrencyAmount,
        __TouchPaymentDate.name() : __TouchPaymentDate,
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_D.name() : __DeliveryAgent_D,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary2_A.name() : __Intermediary2_A,
        __Intermediary2_D.name() : __Intermediary2_D,
        __Intermediary2_J.name() : __Intermediary2_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_D.name() : __Intermediary_D,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_D.name() : __ReceivingAgent_D,
        __ReceivingAgent_J.name() : __ReceivingAgent_J,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_D.name() : __BeneficiaryInstitution_D,
        __BeneficiaryInstitution_J.name() : __BeneficiaryInstitution_J
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount = MT306_SequenceE_PayoutAmount
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount', MT306_SequenceE_PayoutAmount)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock with content type ELEMENT_ONLY
class MT306_SequenceF_BarrierBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2472, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TypeOfBarrier uses Python identifier TypeOfBarrier
    __TypeOfBarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfBarrier'), 'TypeOfBarrier', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_httpwww_w3schools_comTypeOfBarrier', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2474, 3), )

    
    TypeOfBarrier = property(__TypeOfBarrier.value, __TypeOfBarrier.set, None, None)

    
    # Element {http://www.w3schools.com}BarrierLevel uses Python identifier BarrierLevel
    __BarrierLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarrierLevel'), 'BarrierLevel', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_httpwww_w3schools_comBarrierLevel', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2475, 3), )

    
    BarrierLevel = property(__BarrierLevel.value, __BarrierLevel.set, None, None)

    
    # Element {http://www.w3schools.com}LowerBarrierLevel uses Python identifier LowerBarrierLevel
    __LowerBarrierLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerBarrierLevel'), 'LowerBarrierLevel', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_httpwww_w3schools_comLowerBarrierLevel', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2476, 3), )

    
    LowerBarrierLevel = property(__LowerBarrierLevel.value, __LowerBarrierLevel.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceF1_BarrierWindowBlock uses Python identifier SubsequenceF1_BarrierWindowBlock
    __SubsequenceF1_BarrierWindowBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceF1_BarrierWindowBlock'), 'SubsequenceF1_BarrierWindowBlock', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_httpwww_w3schools_comSubsequenceF1_BarrierWindowBlock', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2477, 3), )

    
    SubsequenceF1_BarrierWindowBlock = property(__SubsequenceF1_BarrierWindowBlock.value, __SubsequenceF1_BarrierWindowBlock.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2479, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2479, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2480, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2480, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2481, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2481, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __TypeOfBarrier.name() : __TypeOfBarrier,
        __BarrierLevel.name() : __BarrierLevel,
        __LowerBarrierLevel.name() : __LowerBarrierLevel,
        __SubsequenceF1_BarrierWindowBlock.name() : __SubsequenceF1_BarrierWindowBlock
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock = MT306_SequenceF_BarrierBlock
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock', MT306_SequenceF_BarrierBlock)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock with content type ELEMENT_ONLY
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2483, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}BarrierWindowStartDateAndEndDate uses Python identifier BarrierWindowStartDateAndEndDate
    __BarrierWindowStartDateAndEndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarrierWindowStartDateAndEndDate'), 'BarrierWindowStartDateAndEndDate', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_httpwww_w3schools_comBarrierWindowStartDateAndEndDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2485, 3), )

    
    BarrierWindowStartDateAndEndDate = property(__BarrierWindowStartDateAndEndDate.value, __BarrierWindowStartDateAndEndDate.set, None, None)

    
    # Element {http://www.w3schools.com}LocationAndTimeForStartDate uses Python identifier LocationAndTimeForStartDate
    __LocationAndTimeForStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForStartDate'), 'LocationAndTimeForStartDate', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_httpwww_w3schools_comLocationAndTimeForStartDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2486, 3), )

    
    LocationAndTimeForStartDate = property(__LocationAndTimeForStartDate.value, __LocationAndTimeForStartDate.set, None, None)

    
    # Element {http://www.w3schools.com}LocationAndTimeForEndDate uses Python identifier LocationAndTimeForEndDate
    __LocationAndTimeForEndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForEndDate'), 'LocationAndTimeForEndDate', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_httpwww_w3schools_comLocationAndTimeForEndDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2487, 3), )

    
    LocationAndTimeForEndDate = property(__LocationAndTimeForEndDate.value, __LocationAndTimeForEndDate.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_httpwww_w3schools_comSettlementRateSource', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2488, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    _ElementMap.update({
        __BarrierWindowStartDateAndEndDate.name() : __BarrierWindowStartDateAndEndDate,
        __LocationAndTimeForStartDate.name() : __LocationAndTimeForStartDate,
        __LocationAndTimeForEndDate.name() : __LocationAndTimeForEndDate,
        __SettlementRateSource.name() : __SettlementRateSource
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock with content type ELEMENT_ONLY
class MT306_SequenceG_TriggerBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2491, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TRIGGER uses Python identifier TRIGGER
    __TRIGGER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TRIGGER'), 'TRIGGER', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_httpwww_w3schools_comTRIGGER', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2493, 3), )

    
    TRIGGER = property(__TRIGGER.value, __TRIGGER.set, None, None)

    _ElementMap.update({
        __TRIGGER.name() : __TRIGGER
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock = MT306_SequenceG_TriggerBlock
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock', MT306_SequenceG_TriggerBlock)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER with content type ELEMENT_ONLY
class MT306_SequenceG_TriggerBlock_TRIGGER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2496, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TypeOfTrigger uses Python identifier TypeOfTrigger
    __TypeOfTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfTrigger'), 'TypeOfTrigger', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_httpwww_w3schools_comTypeOfTrigger', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2498, 3), )

    
    TypeOfTrigger = property(__TypeOfTrigger.value, __TypeOfTrigger.set, None, None)

    
    # Element {http://www.w3schools.com}TriggerLevel uses Python identifier TriggerLevel
    __TriggerLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TriggerLevel'), 'TriggerLevel', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_httpwww_w3schools_comTriggerLevel', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2499, 3), )

    
    TriggerLevel = property(__TriggerLevel.value, __TriggerLevel.set, None, None)

    
    # Element {http://www.w3schools.com}LowerTriggerLevel uses Python identifier LowerTriggerLevel
    __LowerTriggerLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerTriggerLevel'), 'LowerTriggerLevel', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_httpwww_w3schools_comLowerTriggerLevel', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2500, 3), )

    
    LowerTriggerLevel = property(__LowerTriggerLevel.value, __LowerTriggerLevel.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyPair uses Python identifier CurrencyPair
    __CurrencyPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPair'), 'CurrencyPair', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_httpwww_w3schools_comCurrencyPair', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2501, 3), )

    
    CurrencyPair = property(__CurrencyPair.value, __CurrencyPair.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_httpwww_w3schools_comSettlementRateSource', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2502, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2504, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2504, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2505, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2505, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2506, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2506, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __TypeOfTrigger.name() : __TypeOfTrigger,
        __TriggerLevel.name() : __TriggerLevel,
        __LowerTriggerLevel.name() : __LowerTriggerLevel,
        __CurrencyPair.name() : __CurrencyPair,
        __SettlementRateSource.name() : __SettlementRateSource
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER = MT306_SequenceG_TriggerBlock_TRIGGER
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER', MT306_SequenceG_TriggerBlock_TRIGGER)


# Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT with content type ELEMENT_ONLY
class MT306_SequenceH_NonDeliverableOptionBlockOPT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceH_NonDeliverableOptionBlockOPT')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2508, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_httpwww_w3schools_comSettlementRateSource', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2510, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementCurrency uses Python identifier SettlementCurrency
    __SettlementCurrency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency'), 'SettlementCurrency', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_httpwww_w3schools_comSettlementCurrency', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2511, 3), )

    
    SettlementCurrency = property(__SettlementCurrency.value, __SettlementCurrency.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2513, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2513, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2514, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2514, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2515, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2515, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SettlementRateSource.name() : __SettlementRateSource,
        __SettlementCurrency.name() : __SettlementCurrency
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceH_NonDeliverableOptionBlockOPT = MT306_SequenceH_NonDeliverableOptionBlockOPT
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceH_NonDeliverableOptionBlockOPT', MT306_SequenceH_NonDeliverableOptionBlockOPT)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination with content type ELEMENT_ONLY
class MT306_SequenceI_EarlyTermination (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2517, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}EarlyTerminationStyle uses Python identifier EarlyTerminationStyle
    __EarlyTerminationStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationStyle'), 'EarlyTerminationStyle', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comEarlyTerminationStyle', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2519, 3), )

    
    EarlyTerminationStyle = property(__EarlyTerminationStyle.value, __EarlyTerminationStyle.set, None, None)

    
    # Element {http://www.w3schools.com}EarlyTerminationDate uses Python identifier EarlyTerminationDate
    __EarlyTerminationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationDate'), 'EarlyTerminationDate', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comEarlyTerminationDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2520, 3), )

    
    EarlyTerminationDate = property(__EarlyTerminationDate.value, __EarlyTerminationDate.set, None, None)

    
    # Element {http://www.w3schools.com}FrequencyOfEarlyTermination uses Python identifier FrequencyOfEarlyTermination
    __FrequencyOfEarlyTermination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOfEarlyTermination'), 'FrequencyOfEarlyTermination', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comFrequencyOfEarlyTermination', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2521, 3), )

    
    FrequencyOfEarlyTermination = property(__FrequencyOfEarlyTermination.value, __FrequencyOfEarlyTermination.set, None, None)

    
    # Element {http://www.w3schools.com}ExercisingParty_A uses Python identifier ExercisingParty_A
    __ExercisingParty_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_A'), 'ExercisingParty_A', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comExercisingParty_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2523, 4), )

    
    ExercisingParty_A = property(__ExercisingParty_A.value, __ExercisingParty_A.set, None, None)

    
    # Element {http://www.w3schools.com}ExercisingParty_D uses Python identifier ExercisingParty_D
    __ExercisingParty_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_D'), 'ExercisingParty_D', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comExercisingParty_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2524, 4), )

    
    ExercisingParty_D = property(__ExercisingParty_D.value, __ExercisingParty_D.set, None, None)

    
    # Element {http://www.w3schools.com}ExercisingParty_J uses Python identifier ExercisingParty_J
    __ExercisingParty_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_J'), 'ExercisingParty_J', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comExercisingParty_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2525, 4), )

    
    ExercisingParty_J = property(__ExercisingParty_J.value, __ExercisingParty_J.set, None, None)

    
    # Element {http://www.w3schools.com}NonExercisingParty_A uses Python identifier NonExercisingParty_A
    __NonExercisingParty_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_A'), 'NonExercisingParty_A', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comNonExercisingParty_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2528, 4), )

    
    NonExercisingParty_A = property(__NonExercisingParty_A.value, __NonExercisingParty_A.set, None, None)

    
    # Element {http://www.w3schools.com}NonExercisingParty_D uses Python identifier NonExercisingParty_D
    __NonExercisingParty_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_D'), 'NonExercisingParty_D', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comNonExercisingParty_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2529, 4), )

    
    NonExercisingParty_D = property(__NonExercisingParty_D.value, __NonExercisingParty_D.set, None, None)

    
    # Element {http://www.w3schools.com}NonExercisingParty_J uses Python identifier NonExercisingParty_J
    __NonExercisingParty_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_J'), 'NonExercisingParty_J', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comNonExercisingParty_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2530, 4), )

    
    NonExercisingParty_J = property(__NonExercisingParty_J.value, __NonExercisingParty_J.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_A uses Python identifier CalculationAgent_A
    __CalculationAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A'), 'CalculationAgent_A', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCalculationAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2533, 4), )

    
    CalculationAgent_A = property(__CalculationAgent_A.value, __CalculationAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_B uses Python identifier CalculationAgent_B
    __CalculationAgent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B'), 'CalculationAgent_B', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCalculationAgent_B', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2534, 4), )

    
    CalculationAgent_B = property(__CalculationAgent_B.value, __CalculationAgent_B.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_D uses Python identifier CalculationAgent_D
    __CalculationAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D'), 'CalculationAgent_D', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCalculationAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2535, 4), )

    
    CalculationAgent_D = property(__CalculationAgent_D.value, __CalculationAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent_J uses Python identifier CalculationAgent_J
    __CalculationAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J'), 'CalculationAgent_J', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCalculationAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2536, 4), )

    
    CalculationAgent_J = property(__CalculationAgent_J.value, __CalculationAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}CommencementDate uses Python identifier CommencementDate
    __CommencementDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommencementDate'), 'CommencementDate', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCommencementDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2538, 3), )

    
    CommencementDate = property(__CommencementDate.value, __CommencementDate.set, None, None)

    
    # Element {http://www.w3schools.com}ExpiryDetails uses Python identifier ExpiryDetails
    __ExpiryDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDetails'), 'ExpiryDetails', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comExpiryDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2539, 3), )

    
    ExpiryDetails = property(__ExpiryDetails.value, __ExpiryDetails.set, None, None)

    
    # Element {http://www.w3schools.com}EarliestExerciseTime uses Python identifier EarliestExerciseTime
    __EarliestExerciseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseTime'), 'EarliestExerciseTime', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comEarliestExerciseTime', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2540, 3), )

    
    EarliestExerciseTime = property(__EarliestExerciseTime.value, __EarliestExerciseTime.set, None, None)

    
    # Element {http://www.w3schools.com}LatestExerciseTime uses Python identifier LatestExerciseTime
    __LatestExerciseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatestExerciseTime'), 'LatestExerciseTime', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comLatestExerciseTime', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2541, 3), )

    
    LatestExerciseTime = property(__LatestExerciseTime.value, __LatestExerciseTime.set, None, None)

    
    # Element {http://www.w3schools.com}CashSettlement uses Python identifier CashSettlement
    __CashSettlement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CashSettlement'), 'CashSettlement', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCashSettlement', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2542, 3), )

    
    CashSettlement = property(__CashSettlement.value, __CashSettlement.set, None, None)

    
    # Element {http://www.w3schools.com}CashSettlementValuationDetails uses Python identifier CashSettlementValuationDetails
    __CashSettlementValuationDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementValuationDetails'), 'CashSettlementValuationDetails', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCashSettlementValuationDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2543, 3), )

    
    CashSettlementValuationDetails = property(__CashSettlementValuationDetails.value, __CashSettlementValuationDetails.set, None, None)

    
    # Element {http://www.w3schools.com}CashSettlementPaymentDate uses Python identifier CashSettlementPaymentDate
    __CashSettlementPaymentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementPaymentDate'), 'CashSettlementPaymentDate', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comCashSettlementPaymentDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2544, 3), )

    
    CashSettlementPaymentDate = property(__CashSettlementPaymentDate.value, __CashSettlementPaymentDate.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_httpwww_w3schools_comSettlementRateSource', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2545, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15I')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2547, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2547, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2548, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2548, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2549, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2549, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __EarlyTerminationStyle.name() : __EarlyTerminationStyle,
        __EarlyTerminationDate.name() : __EarlyTerminationDate,
        __FrequencyOfEarlyTermination.name() : __FrequencyOfEarlyTermination,
        __ExercisingParty_A.name() : __ExercisingParty_A,
        __ExercisingParty_D.name() : __ExercisingParty_D,
        __ExercisingParty_J.name() : __ExercisingParty_J,
        __NonExercisingParty_A.name() : __NonExercisingParty_A,
        __NonExercisingParty_D.name() : __NonExercisingParty_D,
        __NonExercisingParty_J.name() : __NonExercisingParty_J,
        __CalculationAgent_A.name() : __CalculationAgent_A,
        __CalculationAgent_B.name() : __CalculationAgent_B,
        __CalculationAgent_D.name() : __CalculationAgent_D,
        __CalculationAgent_J.name() : __CalculationAgent_J,
        __CommencementDate.name() : __CommencementDate,
        __ExpiryDetails.name() : __ExpiryDetails,
        __EarliestExerciseTime.name() : __EarliestExerciseTime,
        __LatestExerciseTime.name() : __LatestExerciseTime,
        __CashSettlement.name() : __CashSettlement,
        __CashSettlementValuationDetails.name() : __CashSettlementValuationDetails,
        __CashSettlementPaymentDate.name() : __CashSettlementPaymentDate,
        __SettlementRateSource.name() : __SettlementRateSource
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination = MT306_SequenceI_EarlyTermination
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination', MT306_SequenceI_EarlyTermination)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards with content type ELEMENT_ONLY
class MT306_SequenceJ_AveragingOptionsandForwards (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2551, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comSettlementRateSource', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2553, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Element {http://www.w3schools.com}AverageStrikePriceCalculation uses Python identifier AverageStrikePriceCalculation
    __AverageStrikePriceCalculation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AverageStrikePriceCalculation'), 'AverageStrikePriceCalculation', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comAverageStrikePriceCalculation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2554, 3), )

    
    AverageStrikePriceCalculation = property(__AverageStrikePriceCalculation.value, __AverageStrikePriceCalculation.set, None, None)

    
    # Element {http://www.w3schools.com}DecimalPlaces uses Python identifier DecimalPlaces
    __DecimalPlaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DecimalPlaces'), 'DecimalPlaces', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comDecimalPlaces', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2555, 3), )

    
    DecimalPlaces = property(__DecimalPlaces.value, __DecimalPlaces.set, None, None)

    
    # Element {http://www.w3schools.com}SPOT uses Python identifier SPOT
    __SPOT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SPOT'), 'SPOT', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comSPOT', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2556, 3), )

    
    SPOT = property(__SPOT.value, __SPOT.set, None, None)

    
    # Element {http://www.w3schools.com}STRIKE uses Python identifier STRIKE
    __STRIKE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STRIKE'), 'STRIKE', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comSTRIKE', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2557, 3), )

    
    STRIKE = property(__STRIKE.value, __STRIKE.set, None, None)

    
    # Element {http://www.w3schools.com}Adjustment uses Python identifier Adjustment
    __Adjustment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Adjustment'), 'Adjustment', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comAdjustment', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2558, 3), )

    
    Adjustment = property(__Adjustment.value, __Adjustment.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationOfSettlementAmount uses Python identifier CalculationOfSettlementAmount
    __CalculationOfSettlementAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationOfSettlementAmount'), 'CalculationOfSettlementAmount', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_httpwww_w3schools_comCalculationOfSettlementAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2559, 3), )

    
    CalculationOfSettlementAmount = property(__CalculationOfSettlementAmount.value, __CalculationOfSettlementAmount.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2561, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2561, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2562, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2562, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2563, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2563, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SettlementRateSource.name() : __SettlementRateSource,
        __AverageStrikePriceCalculation.name() : __AverageStrikePriceCalculation,
        __DecimalPlaces.name() : __DecimalPlaces,
        __SPOT.name() : __SPOT,
        __STRIKE.name() : __STRIKE,
        __Adjustment.name() : __Adjustment,
        __CalculationOfSettlementAmount.name() : __CalculationOfSettlementAmount
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards = MT306_SequenceJ_AveragingOptionsandForwards
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards', MT306_SequenceJ_AveragingOptionsandForwards)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT with content type ELEMENT_ONLY
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2565, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}NumberOfSpotAveragingDates uses Python identifier NumberOfSpotAveragingDates
    __NumberOfSpotAveragingDates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfSpotAveragingDates'), 'NumberOfSpotAveragingDates', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_httpwww_w3schools_comNumberOfSpotAveragingDates', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2567, 3), )

    
    NumberOfSpotAveragingDates = property(__NumberOfSpotAveragingDates.value, __NumberOfSpotAveragingDates.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceJ1_SpotAverageDatesandWeightings uses Python identifier SubsequenceJ1_SpotAverageDatesandWeightings
    __SubsequenceJ1_SpotAverageDatesandWeightings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ1_SpotAverageDatesandWeightings'), 'SubsequenceJ1_SpotAverageDatesandWeightings', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_httpwww_w3schools_comSubsequenceJ1_SpotAverageDatesandWeightings', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2568, 3), )

    
    SubsequenceJ1_SpotAverageDatesandWeightings = property(__SubsequenceJ1_SpotAverageDatesandWeightings.value, __SubsequenceJ1_SpotAverageDatesandWeightings.set, None, None)

    _ElementMap.update({
        __NumberOfSpotAveragingDates.name() : __NumberOfSpotAveragingDates,
        __SubsequenceJ1_SpotAverageDatesandWeightings.name() : __SubsequenceJ1_SpotAverageDatesandWeightings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT = MT306_SequenceJ_AveragingOptionsandForwards_SPOT
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT', MT306_SequenceJ_AveragingOptionsandForwards_SPOT)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings with content type ELEMENT_ONLY
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2571, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SpotAveragingDate uses Python identifier SpotAveragingDate
    __SpotAveragingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingDate'), 'SpotAveragingDate', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_httpwww_w3schools_comSpotAveragingDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2573, 3), )

    
    SpotAveragingDate = property(__SpotAveragingDate.value, __SpotAveragingDate.set, None, None)

    
    # Element {http://www.w3schools.com}SpotAveragingWeightingFactor uses Python identifier SpotAveragingWeightingFactor
    __SpotAveragingWeightingFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingWeightingFactor'), 'SpotAveragingWeightingFactor', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_httpwww_w3schools_comSpotAveragingWeightingFactor', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2574, 3), )

    
    SpotAveragingWeightingFactor = property(__SpotAveragingWeightingFactor.value, __SpotAveragingWeightingFactor.set, None, None)

    _ElementMap.update({
        __SpotAveragingDate.name() : __SpotAveragingDate,
        __SpotAveragingWeightingFactor.name() : __SpotAveragingWeightingFactor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings', MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE with content type ELEMENT_ONLY
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2577, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}NumberOfStrikeAveragingDates uses Python identifier NumberOfStrikeAveragingDates
    __NumberOfStrikeAveragingDates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfStrikeAveragingDates'), 'NumberOfStrikeAveragingDates', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_httpwww_w3schools_comNumberOfStrikeAveragingDates', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2579, 3), )

    
    NumberOfStrikeAveragingDates = property(__NumberOfStrikeAveragingDates.value, __NumberOfStrikeAveragingDates.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceJ2_StrikeAverageDatesandWeightings uses Python identifier SubsequenceJ2_StrikeAverageDatesandWeightings
    __SubsequenceJ2_StrikeAverageDatesandWeightings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ2_StrikeAverageDatesandWeightings'), 'SubsequenceJ2_StrikeAverageDatesandWeightings', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_httpwww_w3schools_comSubsequenceJ2_StrikeAverageDatesandWeightings', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2580, 3), )

    
    SubsequenceJ2_StrikeAverageDatesandWeightings = property(__SubsequenceJ2_StrikeAverageDatesandWeightings.value, __SubsequenceJ2_StrikeAverageDatesandWeightings.set, None, None)

    _ElementMap.update({
        __NumberOfStrikeAveragingDates.name() : __NumberOfStrikeAveragingDates,
        __SubsequenceJ2_StrikeAverageDatesandWeightings.name() : __SubsequenceJ2_StrikeAverageDatesandWeightings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings with content type ELEMENT_ONLY
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2583, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StrikeAveragingDate uses Python identifier StrikeAveragingDate
    __StrikeAveragingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingDate'), 'StrikeAveragingDate', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_httpwww_w3schools_comStrikeAveragingDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2585, 3), )

    
    StrikeAveragingDate = property(__StrikeAveragingDate.value, __StrikeAveragingDate.set, None, None)

    
    # Element {http://www.w3schools.com}StrikeAveragingWeightingFactor uses Python identifier StrikeAveragingWeightingFactor
    __StrikeAveragingWeightingFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingWeightingFactor'), 'StrikeAveragingWeightingFactor', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_httpwww_w3schools_comStrikeAveragingWeightingFactor', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2586, 3), )

    
    StrikeAveragingWeightingFactor = property(__StrikeAveragingWeightingFactor.value, __StrikeAveragingWeightingFactor.set, None, None)

    _ElementMap.update({
        __StrikeAveragingDate.name() : __StrikeAveragingDate,
        __StrikeAveragingWeightingFactor.name() : __StrikeAveragingWeightingFactor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation with content type ELEMENT_ONLY
class MT306_SequenceK_AdditionalInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2589, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ContactInformation uses Python identifier ContactInformation
    __ContactInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation'), 'ContactInformation', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comContactInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2591, 3), )

    
    ContactInformation = property(__ContactInformation.value, __ContactInformation.set, None, None)

    
    # Element {http://www.w3schools.com}DealingMethod uses Python identifier DealingMethod
    __DealingMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DealingMethod'), 'DealingMethod', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comDealingMethod', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2592, 3), )

    
    DealingMethod = property(__DealingMethod.value, __DealingMethod.set, None, None)

    
    # Element {http://www.w3schools.com}BrokerIdentification_A uses Python identifier BrokerIdentification_A
    __BrokerIdentification_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_A'), 'BrokerIdentification_A', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comBrokerIdentification_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2594, 4), )

    
    BrokerIdentification_A = property(__BrokerIdentification_A.value, __BrokerIdentification_A.set, None, None)

    
    # Element {http://www.w3schools.com}BrokerIdentification_D uses Python identifier BrokerIdentification_D
    __BrokerIdentification_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_D'), 'BrokerIdentification_D', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comBrokerIdentification_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2595, 4), )

    
    BrokerIdentification_D = property(__BrokerIdentification_D.value, __BrokerIdentification_D.set, None, None)

    
    # Element {http://www.w3schools.com}BrokersCommission uses Python identifier BrokersCommission
    __BrokersCommission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BrokersCommission'), 'BrokersCommission', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comBrokersCommission', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2597, 3), )

    
    BrokersCommission = property(__BrokersCommission.value, __BrokersCommission.set, None, None)

    
    # Element {http://www.w3schools.com}BrokersReference uses Python identifier BrokersReference
    __BrokersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BrokersReference'), 'BrokersReference', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comBrokersReference', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2598, 3), )

    
    BrokersReference = property(__BrokersReference.value, __BrokersReference.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2599, 3), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2601, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2601, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2602, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2602, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2603, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2603, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __ContactInformation.name() : __ContactInformation,
        __DealingMethod.name() : __DealingMethod,
        __BrokerIdentification_A.name() : __BrokerIdentification_A,
        __BrokerIdentification_D.name() : __BrokerIdentification_D,
        __BrokersCommission.name() : __BrokersCommission,
        __BrokersReference.name() : __BrokersReference,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation = MT306_SequenceK_AdditionalInformation
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation', MT306_SequenceK_AdditionalInformation)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts with content type ELEMENT_ONLY
class MT306_SequenceL_AdditionalAmounts (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2605, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}NumberOfRepetitions uses Python identifier NumberOfRepetitions
    __NumberOfRepetitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRepetitions'), 'NumberOfRepetitions', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comNumberOfRepetitions', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2607, 3), )

    
    NumberOfRepetitions = property(__NumberOfRepetitions.value, __NumberOfRepetitions.set, None, None)

    
    # Element {http://www.w3schools.com}AMOUNT uses Python identifier AMOUNT
    __AMOUNT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AMOUNT'), 'AMOUNT', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comAMOUNT', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2608, 3), )

    
    AMOUNT = property(__AMOUNT.value, __AMOUNT.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2610, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_D uses Python identifier DeliveryAgent_D
    __DeliveryAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), 'DeliveryAgent_D', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comDeliveryAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2611, 4), )

    
    DeliveryAgent_D = property(__DeliveryAgent_D.value, __DeliveryAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2612, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_A uses Python identifier Intermediary2_A
    __Intermediary2_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), 'Intermediary2_A', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary2_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2615, 4), )

    
    Intermediary2_A = property(__Intermediary2_A.value, __Intermediary2_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_D uses Python identifier Intermediary2_D
    __Intermediary2_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), 'Intermediary2_D', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary2_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2616, 4), )

    
    Intermediary2_D = property(__Intermediary2_D.value, __Intermediary2_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary2_J uses Python identifier Intermediary2_J
    __Intermediary2_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), 'Intermediary2_J', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary2_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2617, 4), )

    
    Intermediary2_J = property(__Intermediary2_J.value, __Intermediary2_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2620, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2621, 4), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2622, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2625, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_D uses Python identifier ReceivingAgent_D
    __ReceivingAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), 'ReceivingAgent_D', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comReceivingAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2626, 4), )

    
    ReceivingAgent_D = property(__ReceivingAgent_D.value, __ReceivingAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2627, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2630, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2630, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2631, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2631, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2632, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2632, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __NumberOfRepetitions.name() : __NumberOfRepetitions,
        __AMOUNT.name() : __AMOUNT,
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_D.name() : __DeliveryAgent_D,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary2_A.name() : __Intermediary2_A,
        __Intermediary2_D.name() : __Intermediary2_D,
        __Intermediary2_J.name() : __Intermediary2_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_D.name() : __Intermediary_D,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_D.name() : __ReceivingAgent_D,
        __ReceivingAgent_J.name() : __ReceivingAgent_J
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts = MT306_SequenceL_AdditionalAmounts
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts', MT306_SequenceL_AdditionalAmounts)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT with content type ELEMENT_ONLY
class MT306_SequenceL_AdditionalAmounts_AMOUNT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_AMOUNT')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2634, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}PaymentDate uses Python identifier PaymentDate
    __PaymentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaymentDate'), 'PaymentDate', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_httpwww_w3schools_comPaymentDate', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2636, 3), )

    
    PaymentDate = property(__PaymentDate.value, __PaymentDate.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyPaymentAmount uses Python identifier CurrencyPaymentAmount
    __CurrencyPaymentAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPaymentAmount'), 'CurrencyPaymentAmount', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_httpwww_w3schools_comCurrencyPaymentAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2637, 3), )

    
    CurrencyPaymentAmount = property(__CurrencyPaymentAmount.value, __CurrencyPaymentAmount.set, None, None)

    _ElementMap.update({
        __PaymentDate.name() : __PaymentDate,
        __CurrencyPaymentAmount.name() : __CurrencyPaymentAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_AMOUNT = MT306_SequenceL_AdditionalAmounts_AMOUNT
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_AMOUNT', MT306_SequenceL_AdditionalAmounts_AMOUNT)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation with content type ELEMENT_ONLY
class MT306_SequenceM_ReportingInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2640, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SubsequenceM1_ReportingParties uses Python identifier SubsequenceM1_ReportingParties
    __SubsequenceM1_ReportingParties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1_ReportingParties'), 'SubsequenceM1_ReportingParties', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comSubsequenceM1_ReportingParties', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2642, 3), )

    
    SubsequenceM1_ReportingParties = property(__SubsequenceM1_ReportingParties.value, __SubsequenceM1_ReportingParties.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingExceptionParty_A uses Python identifier ClearingExceptionParty_A
    __ClearingExceptionParty_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_A'), 'ClearingExceptionParty_A', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearingExceptionParty_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2644, 4), )

    
    ClearingExceptionParty_A = property(__ClearingExceptionParty_A.value, __ClearingExceptionParty_A.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingExceptionParty_D uses Python identifier ClearingExceptionParty_D
    __ClearingExceptionParty_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_D'), 'ClearingExceptionParty_D', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearingExceptionParty_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2645, 4), )

    
    ClearingExceptionParty_D = property(__ClearingExceptionParty_D.value, __ClearingExceptionParty_D.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingExceptionParty_J uses Python identifier ClearingExceptionParty_J
    __ClearingExceptionParty_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_J'), 'ClearingExceptionParty_J', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearingExceptionParty_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2646, 4), )

    
    ClearingExceptionParty_J = property(__ClearingExceptionParty_J.value, __ClearingExceptionParty_J.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingBrokerIdentification uses Python identifier ClearingBrokerIdentification
    __ClearingBrokerIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingBrokerIdentification'), 'ClearingBrokerIdentification', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearingBrokerIdentification', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2648, 3), )

    
    ClearingBrokerIdentification = property(__ClearingBrokerIdentification.value, __ClearingBrokerIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}ClearedProductIdentification uses Python identifier ClearedProductIdentification
    __ClearedProductIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearedProductIdentification'), 'ClearedProductIdentification', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearedProductIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2649, 3), )

    
    ClearedProductIdentification = property(__ClearedProductIdentification.value, __ClearedProductIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingThresholdIndicator uses Python identifier ClearingThresholdIndicator
    __ClearingThresholdIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingThresholdIndicator'), 'ClearingThresholdIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comClearingThresholdIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2650, 3), )

    
    ClearingThresholdIndicator = property(__ClearingThresholdIndicator.value, __ClearingThresholdIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}UnderlyingProductIdentifier uses Python identifier UnderlyingProductIdentifier
    __UnderlyingProductIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier'), 'UnderlyingProductIdentifier', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comUnderlyingProductIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2651, 3), )

    
    UnderlyingProductIdentifier = property(__UnderlyingProductIdentifier.value, __UnderlyingProductIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}AllocationIndicator uses Python identifier AllocationIndicator
    __AllocationIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllocationIndicator'), 'AllocationIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comAllocationIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2652, 3), )

    
    AllocationIndicator = property(__AllocationIndicator.value, __AllocationIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CollateralisationIndicator uses Python identifier CollateralisationIndicator
    __CollateralisationIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollateralisationIndicator'), 'CollateralisationIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCollateralisationIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2653, 3), )

    
    CollateralisationIndicator = property(__CollateralisationIndicator.value, __CollateralisationIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutionVenue uses Python identifier ExecutionVenue
    __ExecutionVenue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue'), 'ExecutionVenue', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comExecutionVenue', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2654, 3), )

    
    ExecutionVenue = property(__ExecutionVenue.value, __ExecutionVenue.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutionTimestamp uses Python identifier ExecutionTimestamp
    __ExecutionTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp'), 'ExecutionTimestamp', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comExecutionTimestamp', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2655, 3), )

    
    ExecutionTimestamp = property(__ExecutionTimestamp.value, __ExecutionTimestamp.set, None, None)

    
    # Element {http://www.w3schools.com}NonStandardFlag uses Python identifier NonStandardFlag
    __NonStandardFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NonStandardFlag'), 'NonStandardFlag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comNonStandardFlag', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2656, 3), )

    
    NonStandardFlag = property(__NonStandardFlag.value, __NonStandardFlag.set, None, None)

    
    # Element {http://www.w3schools.com}FinancialNatureOfTheCounterpartyIndicator uses Python identifier FinancialNatureOfTheCounterpartyIndicator
    __FinancialNatureOfTheCounterpartyIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinancialNatureOfTheCounterpartyIndicator'), 'FinancialNatureOfTheCounterpartyIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comFinancialNatureOfTheCounterpartyIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2657, 3), )

    
    FinancialNatureOfTheCounterpartyIndicator = property(__FinancialNatureOfTheCounterpartyIndicator.value, __FinancialNatureOfTheCounterpartyIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CollateralPortfolioIndicator uses Python identifier CollateralPortfolioIndicator
    __CollateralPortfolioIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioIndicator'), 'CollateralPortfolioIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCollateralPortfolioIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2658, 3), )

    
    CollateralPortfolioIndicator = property(__CollateralPortfolioIndicator.value, __CollateralPortfolioIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CollateralPortfolioCode uses Python identifier CollateralPortfolioCode
    __CollateralPortfolioCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioCode'), 'CollateralPortfolioCode', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCollateralPortfolioCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2659, 3), )

    
    CollateralPortfolioCode = property(__CollateralPortfolioCode.value, __CollateralPortfolioCode.set, None, None)

    
    # Element {http://www.w3schools.com}PortfolioCompressionIndicator uses Python identifier PortfolioCompressionIndicator
    __PortfolioCompressionIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PortfolioCompressionIndicator'), 'PortfolioCompressionIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comPortfolioCompressionIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2660, 3), )

    
    PortfolioCompressionIndicator = property(__PortfolioCompressionIndicator.value, __PortfolioCompressionIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CorporateSectorIndicator uses Python identifier CorporateSectorIndicator
    __CorporateSectorIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CorporateSectorIndicator'), 'CorporateSectorIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCorporateSectorIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2661, 3), )

    
    CorporateSectorIndicator = property(__CorporateSectorIndicator.value, __CorporateSectorIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}TradewithNonEEACounterpartyIndicator uses Python identifier TradewithNonEEACounterpartyIndicator
    __TradewithNonEEACounterpartyIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TradewithNonEEACounterpartyIndicator'), 'TradewithNonEEACounterpartyIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comTradewithNonEEACounterpartyIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2662, 3), )

    
    TradewithNonEEACounterpartyIndicator = property(__TradewithNonEEACounterpartyIndicator.value, __TradewithNonEEACounterpartyIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}IntragroupTradeIndicator uses Python identifier IntragroupTradeIndicator
    __IntragroupTradeIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntragroupTradeIndicator'), 'IntragroupTradeIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comIntragroupTradeIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2663, 3), )

    
    IntragroupTradeIndicator = property(__IntragroupTradeIndicator.value, __IntragroupTradeIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CommercialorTreasuryFinancingIndicator uses Python identifier CommercialorTreasuryFinancingIndicator
    __CommercialorTreasuryFinancingIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommercialorTreasuryFinancingIndicator'), 'CommercialorTreasuryFinancingIndicator', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCommercialorTreasuryFinancingIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2664, 3), )

    
    CommercialorTreasuryFinancingIndicator = property(__CommercialorTreasuryFinancingIndicator.value, __CommercialorTreasuryFinancingIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CommissionAndFees uses Python identifier CommissionAndFees
    __CommissionAndFees = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees'), 'CommissionAndFees', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comCommissionAndFees', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2665, 3), )

    
    CommissionAndFees = property(__CommissionAndFees.value, __CommissionAndFees.set, None, None)

    
    # Element {http://www.w3schools.com}AdditionalReportingInformation uses Python identifier AdditionalReportingInformation
    __AdditionalReportingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AdditionalReportingInformation'), 'AdditionalReportingInformation', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_httpwww_w3schools_comAdditionalReportingInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2666, 3), )

    
    AdditionalReportingInformation = property(__AdditionalReportingInformation.value, __AdditionalReportingInformation.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2668, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2668, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2669, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2669, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2670, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2670, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SubsequenceM1_ReportingParties.name() : __SubsequenceM1_ReportingParties,
        __ClearingExceptionParty_A.name() : __ClearingExceptionParty_A,
        __ClearingExceptionParty_D.name() : __ClearingExceptionParty_D,
        __ClearingExceptionParty_J.name() : __ClearingExceptionParty_J,
        __ClearingBrokerIdentification.name() : __ClearingBrokerIdentification,
        __ClearedProductIdentification.name() : __ClearedProductIdentification,
        __ClearingThresholdIndicator.name() : __ClearingThresholdIndicator,
        __UnderlyingProductIdentifier.name() : __UnderlyingProductIdentifier,
        __AllocationIndicator.name() : __AllocationIndicator,
        __CollateralisationIndicator.name() : __CollateralisationIndicator,
        __ExecutionVenue.name() : __ExecutionVenue,
        __ExecutionTimestamp.name() : __ExecutionTimestamp,
        __NonStandardFlag.name() : __NonStandardFlag,
        __FinancialNatureOfTheCounterpartyIndicator.name() : __FinancialNatureOfTheCounterpartyIndicator,
        __CollateralPortfolioIndicator.name() : __CollateralPortfolioIndicator,
        __CollateralPortfolioCode.name() : __CollateralPortfolioCode,
        __PortfolioCompressionIndicator.name() : __PortfolioCompressionIndicator,
        __CorporateSectorIndicator.name() : __CorporateSectorIndicator,
        __TradewithNonEEACounterpartyIndicator.name() : __TradewithNonEEACounterpartyIndicator,
        __IntragroupTradeIndicator.name() : __IntragroupTradeIndicator,
        __CommercialorTreasuryFinancingIndicator.name() : __CommercialorTreasuryFinancingIndicator,
        __CommissionAndFees.name() : __CommissionAndFees,
        __AdditionalReportingInformation.name() : __AdditionalReportingInformation
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation = MT306_SequenceM_ReportingInformation
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation', MT306_SequenceM_ReportingInformation)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties with content type ELEMENT_ONLY
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2672, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReportingJurisdiction uses Python identifier ReportingJurisdiction
    __ReportingJurisdiction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction'), 'ReportingJurisdiction', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_httpwww_w3schools_comReportingJurisdiction', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2674, 3), )

    
    ReportingJurisdiction = property(__ReportingJurisdiction.value, __ReportingJurisdiction.set, None, None)

    
    # Element {http://www.w3schools.com}ReportingParty_A uses Python identifier ReportingParty_A
    __ReportingParty_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_A'), 'ReportingParty_A', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_httpwww_w3schools_comReportingParty_A', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2676, 4), )

    
    ReportingParty_A = property(__ReportingParty_A.value, __ReportingParty_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReportingParty_D uses Python identifier ReportingParty_D
    __ReportingParty_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_D'), 'ReportingParty_D', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_httpwww_w3schools_comReportingParty_D', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2677, 4), )

    
    ReportingParty_D = property(__ReportingParty_D.value, __ReportingParty_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReportingParty_J uses Python identifier ReportingParty_J
    __ReportingParty_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_J'), 'ReportingParty_J', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_httpwww_w3schools_comReportingParty_J', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2678, 4), )

    
    ReportingParty_J = property(__ReportingParty_J.value, __ReportingParty_J.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceM1a_UniqueTransactionIdentifier uses Python identifier SubsequenceM1a_UniqueTransactionIdentifier
    __SubsequenceM1a_UniqueTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a_UniqueTransactionIdentifier'), 'SubsequenceM1a_UniqueTransactionIdentifier', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_httpwww_w3schools_comSubsequenceM1a_UniqueTransactionIdentifier', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2680, 3), )

    
    SubsequenceM1a_UniqueTransactionIdentifier = property(__SubsequenceM1a_UniqueTransactionIdentifier.value, __SubsequenceM1a_UniqueTransactionIdentifier.set, None, None)

    _ElementMap.update({
        __ReportingJurisdiction.name() : __ReportingJurisdiction,
        __ReportingParty_A.name() : __ReportingParty_A,
        __ReportingParty_D.name() : __ReportingParty_D,
        __ReportingParty_J.name() : __ReportingParty_J,
        __SubsequenceM1a_UniqueTransactionIdentifier.name() : __SubsequenceM1a_UniqueTransactionIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier with content type ELEMENT_ONLY
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2683, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}UTINamespaceIssuerCode uses Python identifier UTINamespaceIssuerCode
    __UTINamespaceIssuerCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode'), 'UTINamespaceIssuerCode', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_httpwww_w3schools_comUTINamespaceIssuerCode', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2685, 3), )

    
    UTINamespaceIssuerCode = property(__UTINamespaceIssuerCode.value, __UTINamespaceIssuerCode.set, None, None)

    
    # Element {http://www.w3schools.com}TransactionIdentifier uses Python identifier TransactionIdentifier
    __TransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier'), 'TransactionIdentifier', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_httpwww_w3schools_comTransactionIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2686, 3), )

    
    TransactionIdentifier = property(__TransactionIdentifier.value, __TransactionIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceM1a1_PriorUniqueTransactionIdentifier uses Python identifier SubsequenceM1a1_PriorUniqueTransactionIdentifier
    __SubsequenceM1a1_PriorUniqueTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a1_PriorUniqueTransactionIdentifier'), 'SubsequenceM1a1_PriorUniqueTransactionIdentifier', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_httpwww_w3schools_comSubsequenceM1a1_PriorUniqueTransactionIdentifier', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2687, 3), )

    
    SubsequenceM1a1_PriorUniqueTransactionIdentifier = property(__SubsequenceM1a1_PriorUniqueTransactionIdentifier.value, __SubsequenceM1a1_PriorUniqueTransactionIdentifier.set, None, None)

    _ElementMap.update({
        __UTINamespaceIssuerCode.name() : __UTINamespaceIssuerCode,
        __TransactionIdentifier.name() : __TransactionIdentifier,
        __SubsequenceM1a1_PriorUniqueTransactionIdentifier.name() : __SubsequenceM1a1_PriorUniqueTransactionIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier with content type ELEMENT_ONLY
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2690, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}PUTINamespaceIssuerCode uses Python identifier PUTINamespaceIssuerCode
    __PUTINamespaceIssuerCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode'), 'PUTINamespaceIssuerCode', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_httpwww_w3schools_comPUTINamespaceIssuerCode', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2692, 3), )

    
    PUTINamespaceIssuerCode = property(__PUTINamespaceIssuerCode.value, __PUTINamespaceIssuerCode.set, None, None)

    
    # Element {http://www.w3schools.com}PriorTransactionIdentifier uses Python identifier PriorTransactionIdentifier
    __PriorTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier'), 'PriorTransactionIdentifier', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_httpwww_w3schools_comPriorTransactionIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2693, 3), )

    
    PriorTransactionIdentifier = property(__PriorTransactionIdentifier.value, __PriorTransactionIdentifier.set, None, None)

    _ElementMap.update({
        __PUTINamespaceIssuerCode.name() : __PUTINamespaceIssuerCode,
        __PriorTransactionIdentifier.name() : __PriorTransactionIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2697, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SequenceA_GeneralInformation uses Python identifier SequenceA_GeneralInformation
    __SequenceA_GeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), 'SequenceA_GeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceA_GeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2699, 4), )

    
    SequenceA_GeneralInformation = property(__SequenceA_GeneralInformation.value, __SequenceA_GeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceB_TransactionDetails uses Python identifier SequenceB_TransactionDetails
    __SequenceB_TransactionDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails'), 'SequenceB_TransactionDetails', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceB_TransactionDetails', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2700, 4), )

    
    SequenceB_TransactionDetails = property(__SequenceB_TransactionDetails.value, __SequenceB_TransactionDetails.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceC_SettlementInstructionsforPaymentofPremium uses Python identifier SequenceC_SettlementInstructionsforPaymentofPremium
    __SequenceC_SettlementInstructionsforPaymentofPremium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_SettlementInstructionsforPaymentofPremium'), 'SequenceC_SettlementInstructionsforPaymentofPremium', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceC_SettlementInstructionsforPaymentofPremium', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2701, 4), )

    
    SequenceC_SettlementInstructionsforPaymentofPremium = property(__SequenceC_SettlementInstructionsforPaymentofPremium.value, __SequenceC_SettlementInstructionsforPaymentofPremium.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceD_VanillaBlock uses Python identifier SequenceD_VanillaBlock
    __SequenceD_VanillaBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_VanillaBlock'), 'SequenceD_VanillaBlock', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceD_VanillaBlock', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2702, 4), )

    
    SequenceD_VanillaBlock = property(__SequenceD_VanillaBlock.value, __SequenceD_VanillaBlock.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceE_PayoutAmount uses Python identifier SequenceE_PayoutAmount
    __SequenceE_PayoutAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_PayoutAmount'), 'SequenceE_PayoutAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceE_PayoutAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2703, 4), )

    
    SequenceE_PayoutAmount = property(__SequenceE_PayoutAmount.value, __SequenceE_PayoutAmount.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceF_BarrierBlock uses Python identifier SequenceF_BarrierBlock
    __SequenceF_BarrierBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceF_BarrierBlock'), 'SequenceF_BarrierBlock', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceF_BarrierBlock', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2704, 4), )

    
    SequenceF_BarrierBlock = property(__SequenceF_BarrierBlock.value, __SequenceF_BarrierBlock.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceG_TriggerBlock uses Python identifier SequenceG_TriggerBlock
    __SequenceG_TriggerBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceG_TriggerBlock'), 'SequenceG_TriggerBlock', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceG_TriggerBlock', True, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2705, 4), )

    
    SequenceG_TriggerBlock = property(__SequenceG_TriggerBlock.value, __SequenceG_TriggerBlock.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceH_NonDeliverableOptionBlockOPT uses Python identifier SequenceH_NonDeliverableOptionBlockOPT
    __SequenceH_NonDeliverableOptionBlockOPT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceH_NonDeliverableOptionBlockOPT'), 'SequenceH_NonDeliverableOptionBlockOPT', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceH_NonDeliverableOptionBlockOPT', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2706, 4), )

    
    SequenceH_NonDeliverableOptionBlockOPT = property(__SequenceH_NonDeliverableOptionBlockOPT.value, __SequenceH_NonDeliverableOptionBlockOPT.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceI_EarlyTermination uses Python identifier SequenceI_EarlyTermination
    __SequenceI_EarlyTermination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceI_EarlyTermination'), 'SequenceI_EarlyTermination', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceI_EarlyTermination', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2707, 4), )

    
    SequenceI_EarlyTermination = property(__SequenceI_EarlyTermination.value, __SequenceI_EarlyTermination.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceJ_AveragingOptionsandForwards uses Python identifier SequenceJ_AveragingOptionsandForwards
    __SequenceJ_AveragingOptionsandForwards = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceJ_AveragingOptionsandForwards'), 'SequenceJ_AveragingOptionsandForwards', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceJ_AveragingOptionsandForwards', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2708, 4), )

    
    SequenceJ_AveragingOptionsandForwards = property(__SequenceJ_AveragingOptionsandForwards.value, __SequenceJ_AveragingOptionsandForwards.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceK_AdditionalInformation uses Python identifier SequenceK_AdditionalInformation
    __SequenceK_AdditionalInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceK_AdditionalInformation'), 'SequenceK_AdditionalInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceK_AdditionalInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2709, 4), )

    
    SequenceK_AdditionalInformation = property(__SequenceK_AdditionalInformation.value, __SequenceK_AdditionalInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceL_AdditionalAmounts uses Python identifier SequenceL_AdditionalAmounts
    __SequenceL_AdditionalAmounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceL_AdditionalAmounts'), 'SequenceL_AdditionalAmounts', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceL_AdditionalAmounts', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2710, 4), )

    
    SequenceL_AdditionalAmounts = property(__SequenceL_AdditionalAmounts.value, __SequenceL_AdditionalAmounts.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceM_ReportingInformation uses Python identifier SequenceM_ReportingInformation
    __SequenceM_ReportingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceM_ReportingInformation'), 'SequenceM_ReportingInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceM_ReportingInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2711, 4), )

    
    SequenceM_ReportingInformation = property(__SequenceM_ReportingInformation.value, __SequenceM_ReportingInformation.set, None, None)

    _ElementMap.update({
        __SequenceA_GeneralInformation.name() : __SequenceA_GeneralInformation,
        __SequenceB_TransactionDetails.name() : __SequenceB_TransactionDetails,
        __SequenceC_SettlementInstructionsforPaymentofPremium.name() : __SequenceC_SettlementInstructionsforPaymentofPremium,
        __SequenceD_VanillaBlock.name() : __SequenceD_VanillaBlock,
        __SequenceE_PayoutAmount.name() : __SequenceE_PayoutAmount,
        __SequenceF_BarrierBlock.name() : __SequenceF_BarrierBlock,
        __SequenceG_TriggerBlock.name() : __SequenceG_TriggerBlock,
        __SequenceH_NonDeliverableOptionBlockOPT.name() : __SequenceH_NonDeliverableOptionBlockOPT,
        __SequenceI_EarlyTermination.name() : __SequenceI_EarlyTermination,
        __SequenceJ_AveragingOptionsandForwards.name() : __SequenceJ_AveragingOptionsandForwards,
        __SequenceK_AdditionalInformation.name() : __SequenceK_AdditionalInformation,
        __SequenceL_AdditionalAmounts.name() : __SequenceL_AdditionalAmounts,
        __SequenceM_ReportingInformation.name() : __SequenceM_ReportingInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_20_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_20_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_20_Type = MT306_SequenceA_GeneralInformation_20_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_20_Type', MT306_SequenceA_GeneralInformation_20_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_21_Type = MT306_SequenceA_GeneralInformation_21_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21_Type', MT306_SequenceA_GeneralInformation_21_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_22A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_22A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_22A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_22A_Type = MT306_SequenceA_GeneralInformation_22A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22A_Type', MT306_SequenceA_GeneralInformation_22A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_94A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_94A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_94A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_94A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_94A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_94A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_94A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_94A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_94A_Type = MT306_SequenceA_GeneralInformation_94A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_94A_Type', MT306_SequenceA_GeneralInformation_94A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22C_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_22C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_22C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_22C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_22C_Type = MT306_SequenceA_GeneralInformation_22C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22C_Type', MT306_SequenceA_GeneralInformation_22C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21N_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_21N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21N_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_21N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_21N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_21N_Type = MT306_SequenceA_GeneralInformation_21N_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21N_Type', MT306_SequenceA_GeneralInformation_21N_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21B_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_21B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_21B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_21B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_21B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_21B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_21B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_21B_Type = MT306_SequenceA_GeneralInformation_21B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_21B_Type', MT306_SequenceA_GeneralInformation_21B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12F_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_12F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_12F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_12F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_12F_Type = MT306_SequenceA_GeneralInformation_12F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12F_Type', MT306_SequenceA_GeneralInformation_12F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12E_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_12E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_12E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_12E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_12E_Type = MT306_SequenceA_GeneralInformation_12E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12E_Type', MT306_SequenceA_GeneralInformation_12E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12D_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_12D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_12D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_12D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_12D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_12D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_12D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_12D_Type = MT306_SequenceA_GeneralInformation_12D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_12D_Type', MT306_SequenceA_GeneralInformation_12D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_17A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_17A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_17A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_17A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_17A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_17A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_17A_Type = MT306_SequenceA_GeneralInformation_17A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_17A_Type', MT306_SequenceA_GeneralInformation_17A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17F_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_17F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_17F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_17F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_17F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_17F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_17F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_17F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_17F_Type = MT306_SequenceA_GeneralInformation_17F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_17F_Type', MT306_SequenceA_GeneralInformation_17F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22K_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_22K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_22K_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_22K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_22K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_22K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_22K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_22K_Type = MT306_SequenceA_GeneralInformation_22K_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_22K_Type', MT306_SequenceA_GeneralInformation_22K_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_30U_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_30U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_30U_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_30U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_30U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_30U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_30U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_30U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_30U_Type = MT306_SequenceA_GeneralInformation_30U_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_30U_Type', MT306_SequenceA_GeneralInformation_30U_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_29H_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_29H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_29H_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_29H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_29H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_29H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_29H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_29H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_29H_Type = MT306_SequenceA_GeneralInformation_29H_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_29H_Type', MT306_SequenceA_GeneralInformation_29H_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_82A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_82A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_82A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='82A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_82A_Type = MT306_SequenceA_GeneralInformation_82A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82A_Type', MT306_SequenceA_GeneralInformation_82A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82D_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_82D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_82D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_82D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='82D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_82D_Type = MT306_SequenceA_GeneralInformation_82D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82D_Type', MT306_SequenceA_GeneralInformation_82D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82J_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_82J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_82J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_82J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_82J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_82J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='82J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_82J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_82J_Type = MT306_SequenceA_GeneralInformation_82J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_82J_Type', MT306_SequenceA_GeneralInformation_82J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_87A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_87A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_87A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='87A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_87A_Type = MT306_SequenceA_GeneralInformation_87A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87A_Type', MT306_SequenceA_GeneralInformation_87A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87D_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_87D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_87D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_87D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='87D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_87D_Type = MT306_SequenceA_GeneralInformation_87D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87D_Type', MT306_SequenceA_GeneralInformation_87D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87J_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_87J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_87J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_87J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_87J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_87J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='87J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_87J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_87J_Type = MT306_SequenceA_GeneralInformation_87J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_87J_Type', MT306_SequenceA_GeneralInformation_87J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83A_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_83A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_83A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_83A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='83A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_83A_Type = MT306_SequenceA_GeneralInformation_83A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83A_Type', MT306_SequenceA_GeneralInformation_83A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83D_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_83D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_83D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_83D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='83D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_83D_Type = MT306_SequenceA_GeneralInformation_83D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83D_Type', MT306_SequenceA_GeneralInformation_83D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83J_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_83J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_83J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_83J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_83J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_83J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='83J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_83J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_83J_Type = MT306_SequenceA_GeneralInformation_83J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_83J_Type', MT306_SequenceA_GeneralInformation_83J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77H_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_77H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77H_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_77H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_77H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_77H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_77H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_77H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_77H_Type = MT306_SequenceA_GeneralInformation_77H_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_77H_Type', MT306_SequenceA_GeneralInformation_77H_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77D_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_77D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_77D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_77D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_77D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_77D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_77D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_77D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_77D_Type = MT306_SequenceA_GeneralInformation_77D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_77D_Type', MT306_SequenceA_GeneralInformation_77D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_14C_Type with content type SIMPLE
class MT306_SequenceA_GeneralInformation_14C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceA_GeneralInformation_14C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceA_GeneralInformation_14C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceA_GeneralInformation_14C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceA_GeneralInformation_14C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_14C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceA_GeneralInformation_14C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceA_GeneralInformation_14C_Type = MT306_SequenceA_GeneralInformation_14C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceA_GeneralInformation_14C_Type', MT306_SequenceA_GeneralInformation_14C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_17V_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_17V_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_17V_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_17V_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_17V_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_17V_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_17V_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17V')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_17V_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_17V_Type = MT306_SequenceB_TransactionDetails_17V_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_17V_Type', MT306_SequenceB_TransactionDetails_17V_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30T_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_30T_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30T_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_30T_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30T_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_30T_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30T_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30T')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30T_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_30T_Type = MT306_SequenceB_TransactionDetails_30T_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30T_Type', MT306_SequenceB_TransactionDetails_30T_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30X_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_30X_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30X_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_30X_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30X_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_30X_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30X_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30X')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30X_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_30X_Type = MT306_SequenceB_TransactionDetails_30X_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30X_Type', MT306_SequenceB_TransactionDetails_30X_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_29E_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_29E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_29E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_29E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_29E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_29E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_29E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_29E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_29E_Type = MT306_SequenceB_TransactionDetails_29E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_29E_Type', MT306_SequenceB_TransactionDetails_29E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30F_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_30F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_30F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_30F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_30F_Type = MT306_SequenceB_TransactionDetails_30F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30F_Type', MT306_SequenceB_TransactionDetails_30F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30J_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_30J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_30J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_30J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_30J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_30J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_30J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_30J_Type = MT306_SequenceB_TransactionDetails_30J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_30J_Type', MT306_SequenceB_TransactionDetails_30J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_14S_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_14S_Type = MT306_SequenceB_TransactionDetails_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_14S_Type', MT306_SequenceB_TransactionDetails_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_39M_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_39M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_39M_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_39M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_39M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_39M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_39M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='39M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_39M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_39M_Type = MT306_SequenceB_TransactionDetails_39M_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_39M_Type', MT306_SequenceB_TransactionDetails_39M_Type)


# Complex type {http://www.w3schools.com}MT306_SubsequenceB1_PremiumDetails_37K_Type with content type SIMPLE
class MT306_SubsequenceB1_PremiumDetails_37K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SubsequenceB1_PremiumDetails_37K_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SubsequenceB1_PremiumDetails_37K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SubsequenceB1_PremiumDetails_37K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SubsequenceB1_PremiumDetails_37K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='37K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SubsequenceB1_PremiumDetails_37K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SubsequenceB1_PremiumDetails_37K_Type = MT306_SubsequenceB1_PremiumDetails_37K_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SubsequenceB1_PremiumDetails_37K_Type', MT306_SubsequenceB1_PremiumDetails_37K_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30V')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type', MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='34B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type = MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type', MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 502, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 505, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 505, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 506, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 506, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 515, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 518, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 518, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 519, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 519, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 528, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 531, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 531, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 532, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 532, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type with content type SIMPLE
class MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 541, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 544, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 544, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 545, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 545, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type = MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type', MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 554, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 557, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 557, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 558, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 558, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 570, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 570, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 571, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 571, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 580, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 583, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 583, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 584, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 584, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 593, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 596, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 596, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 597, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 597, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 606, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 609, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 609, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 610, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 610, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 619, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 622, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 622, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 623, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 623, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 632, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 635, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 635, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 636, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 636, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 645, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 648, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 648, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 649, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 649, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 658, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 661, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 661, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 662, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 662, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 671, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 674, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 674, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 675, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 675, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 684, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 687, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 687, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 688, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 688, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 697, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 700, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 700, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 701, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 701, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 710, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 713, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 713, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 714, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 714, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 723, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 726, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 726, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 727, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 727, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type with content type SIMPLE
class MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 736, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 739, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 739, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 740, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 740, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type = MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type', MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30P_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_30P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30P_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_30P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_30P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 749, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_30P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_30P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 752, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 752, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_30P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 753, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 753, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_30P_Type = MT306_SequenceD_VanillaBlock_30P_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_30P_Type', MT306_SequenceD_VanillaBlock_30P_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30Q_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_30Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_30Q_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_30Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_30Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 762, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_30Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_30Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 765, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 765, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_30Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 766, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 766, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_30Q_Type = MT306_SequenceD_VanillaBlock_30Q_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_30Q_Type', MT306_SequenceD_VanillaBlock_30Q_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_26F_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_26F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_26F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_26F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_26F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 775, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_26F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_26F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='26F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 778, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 778, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_26F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 779, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 779, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_26F_Type = MT306_SequenceD_VanillaBlock_26F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_26F_Type', MT306_SequenceD_VanillaBlock_26F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_32B_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_32B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_32B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_32B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_32B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 788, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_32B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_32B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 791, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 791, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_32B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 792, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 792, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_32B_Type = MT306_SequenceD_VanillaBlock_32B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_32B_Type', MT306_SequenceD_VanillaBlock_32B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_36_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_36_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_36_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_36_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_36_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 801, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_36_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_36_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 804, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 804, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_36_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 805, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 805, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_36_Type = MT306_SequenceD_VanillaBlock_36_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_36_Type', MT306_SequenceD_VanillaBlock_36_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_33B_Type with content type SIMPLE
class MT306_SequenceD_VanillaBlock_33B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceD_VanillaBlock_33B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceD_VanillaBlock_33B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceD_VanillaBlock_33B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 814, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceD_VanillaBlock_33B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_33B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 817, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 817, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceD_VanillaBlock_33B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 818, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 818, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceD_VanillaBlock_33B_Type = MT306_SequenceD_VanillaBlock_33B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceD_VanillaBlock_33B_Type', MT306_SequenceD_VanillaBlock_33B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_33E_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_33E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_33E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_33E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_33E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 827, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_33E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_33E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 830, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 830, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_33E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 831, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 831, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_33E_Type = MT306_SequenceE_PayoutAmount_33E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_33E_Type', MT306_SequenceE_PayoutAmount_33E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_30H_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_30H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_30H_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_30H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_30H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_30H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_30H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 843, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 843, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_30H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 844, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 844, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_30H_Type = MT306_SequenceE_PayoutAmount_30H_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_30H_Type', MT306_SequenceE_PayoutAmount_30H_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53A_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 853, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 856, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 856, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 857, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 857, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_53A_Type = MT306_SequenceE_PayoutAmount_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53A_Type', MT306_SequenceE_PayoutAmount_53A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53D_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 866, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 869, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 869, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 870, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 870, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_53D_Type = MT306_SequenceE_PayoutAmount_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53D_Type', MT306_SequenceE_PayoutAmount_53D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53J_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 879, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 882, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 882, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 883, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 883, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_53J_Type = MT306_SequenceE_PayoutAmount_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_53J_Type', MT306_SequenceE_PayoutAmount_53J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86A_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_86A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_86A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 892, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_86A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 895, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 895, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 896, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 896, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_86A_Type = MT306_SequenceE_PayoutAmount_86A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86A_Type', MT306_SequenceE_PayoutAmount_86A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86D_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_86D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_86D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 905, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_86D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 908, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 908, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 909, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 909, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_86D_Type = MT306_SequenceE_PayoutAmount_86D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86D_Type', MT306_SequenceE_PayoutAmount_86D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86J_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_86J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_86J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_86J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_86J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 918, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_86J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 921, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 921, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_86J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 922, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 922, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_86J_Type = MT306_SequenceE_PayoutAmount_86J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_86J_Type', MT306_SequenceE_PayoutAmount_86J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56A_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 931, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 934, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 934, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 935, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 935, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_56A_Type = MT306_SequenceE_PayoutAmount_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56A_Type', MT306_SequenceE_PayoutAmount_56A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56D_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 944, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 947, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 947, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 948, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 948, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_56D_Type = MT306_SequenceE_PayoutAmount_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56D_Type', MT306_SequenceE_PayoutAmount_56D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56J_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 957, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 960, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 960, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 961, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 961, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_56J_Type = MT306_SequenceE_PayoutAmount_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_56J_Type', MT306_SequenceE_PayoutAmount_56J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57A_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 970, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 973, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 973, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 974, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 974, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_57A_Type = MT306_SequenceE_PayoutAmount_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57A_Type', MT306_SequenceE_PayoutAmount_57A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57D_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 983, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 986, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 986, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 987, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 987, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_57D_Type = MT306_SequenceE_PayoutAmount_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57D_Type', MT306_SequenceE_PayoutAmount_57D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57J_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 996, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 999, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 999, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1000, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1000, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_57J_Type = MT306_SequenceE_PayoutAmount_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_57J_Type', MT306_SequenceE_PayoutAmount_57J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58A_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1009, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1012, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1012, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1013, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1013, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_58A_Type = MT306_SequenceE_PayoutAmount_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58A_Type', MT306_SequenceE_PayoutAmount_58A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58D_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_58D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_58D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1022, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_58D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1025, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1025, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1026, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1026, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_58D_Type = MT306_SequenceE_PayoutAmount_58D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58D_Type', MT306_SequenceE_PayoutAmount_58D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58J_Type with content type SIMPLE
class MT306_SequenceE_PayoutAmount_58J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceE_PayoutAmount_58J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceE_PayoutAmount_58J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceE_PayoutAmount_58J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1035, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceE_PayoutAmount_58J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1038, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1038, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceE_PayoutAmount_58J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1039, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1039, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceE_PayoutAmount_58J_Type = MT306_SequenceE_PayoutAmount_58J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceE_PayoutAmount_58J_Type', MT306_SequenceE_PayoutAmount_58J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_22G_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_22G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_22G_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_22G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_22G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1048, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_22G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_22G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1051, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1051, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_22G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1052, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1052, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_22G_Type = MT306_SequenceF_BarrierBlock_22G_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_22G_Type', MT306_SequenceF_BarrierBlock_22G_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37J_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_37J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_37J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_37J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1061, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_37J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_37J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='37J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1064, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1064, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_37J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1065, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1065, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_37J_Type = MT306_SequenceF_BarrierBlock_37J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_37J_Type', MT306_SequenceF_BarrierBlock_37J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37L_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_37L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_37L_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_37L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_37L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1074, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_37L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_37L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='37L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1077, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1077, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_37L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1078, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1078, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_37L_Type = MT306_SequenceF_BarrierBlock_37L_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_37L_Type', MT306_SequenceF_BarrierBlock_37L_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1087, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1090, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1090, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1091, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1091, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1100, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1103, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1103, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1104, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1104, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1113, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1116, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1116, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1117, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1117, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type with content type SIMPLE
class MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1126, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1129, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1129, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1130, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1130, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type = MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type', MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type with content type SIMPLE
class MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1139, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1142, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1142, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1143, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1143, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type = MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type', MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type with content type SIMPLE
class MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1152, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='37U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1155, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1155, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1156, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1156, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type = MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type', MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type with content type SIMPLE
class MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1165, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='37P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1168, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1168, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1169, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1169, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type = MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type', MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type with content type SIMPLE
class MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1178, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1181, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1181, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1182, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1182, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type = MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type', MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type with content type SIMPLE
class MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1191, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1194, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1194, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1195, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1195, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type = MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type', MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type with content type SIMPLE
class MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1204, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1207, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1207, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1208, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1208, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type = MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type', MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type with content type SIMPLE
class MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1217, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1220, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1220, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1221, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1221, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type = MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type', MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_12G_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_12G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_12G_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_12G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_12G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1230, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_12G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_12G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='12G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1233, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1233, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_12G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1234, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1234, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_12G_Type = MT306_SequenceI_EarlyTermination_12G_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_12G_Type', MT306_SequenceI_EarlyTermination_12G_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30T_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_30T_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30T_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_30T_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30T_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1243, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_30T_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30T_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30T')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1246, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1246, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30T_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1247, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1247, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_30T_Type = MT306_SequenceI_EarlyTermination_30T_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30T_Type', MT306_SequenceI_EarlyTermination_30T_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_22Y_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_22Y_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_22Y_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_22Y_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_22Y_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1256, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_22Y_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_22Y_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22Y')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1259, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1259, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_22Y_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1260, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1260, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_22Y_Type = MT306_SequenceI_EarlyTermination_22Y_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_22Y_Type', MT306_SequenceI_EarlyTermination_22Y_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85A_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_85A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_85A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1269, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_85A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='85A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1272, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1272, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1273, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1273, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_85A_Type = MT306_SequenceI_EarlyTermination_85A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85A_Type', MT306_SequenceI_EarlyTermination_85A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85D_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_85D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_85D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1282, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_85D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='85D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1285, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1285, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1286, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1286, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_85D_Type = MT306_SequenceI_EarlyTermination_85D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85D_Type', MT306_SequenceI_EarlyTermination_85D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85J_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_85J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_85J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_85J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_85J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_85J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='85J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1298, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1298, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_85J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1299, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1299, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_85J_Type = MT306_SequenceI_EarlyTermination_85J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_85J_Type', MT306_SequenceI_EarlyTermination_85J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88A_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_88A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_88A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1308, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_88A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='88A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1311, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1311, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1312, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1312, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_88A_Type = MT306_SequenceI_EarlyTermination_88A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88A_Type', MT306_SequenceI_EarlyTermination_88A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88D_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_88D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_88D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1321, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_88D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='88D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1324, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1324, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1325, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1325, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_88D_Type = MT306_SequenceI_EarlyTermination_88D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88D_Type', MT306_SequenceI_EarlyTermination_88D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88J_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_88J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_88J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_88J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_88J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1334, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_88J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='88J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1337, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1337, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_88J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1338, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1338, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_88J_Type = MT306_SequenceI_EarlyTermination_88J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_88J_Type', MT306_SequenceI_EarlyTermination_88J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84A_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_84A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_84A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1347, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_84A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1350, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1350, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1351, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1351, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_84A_Type = MT306_SequenceI_EarlyTermination_84A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84A_Type', MT306_SequenceI_EarlyTermination_84A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84B_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_84B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_84B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1360, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_84B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1363, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1363, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1364, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1364, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_84B_Type = MT306_SequenceI_EarlyTermination_84B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84B_Type', MT306_SequenceI_EarlyTermination_84B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84D_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_84D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_84D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1373, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_84D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1376, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1376, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1377, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1377, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_84D_Type = MT306_SequenceI_EarlyTermination_84D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84D_Type', MT306_SequenceI_EarlyTermination_84D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84J_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_84J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_84J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_84J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_84J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1386, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_84J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='84J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1389, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1389, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_84J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1390, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1390, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_84J_Type = MT306_SequenceI_EarlyTermination_84J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_84J_Type', MT306_SequenceI_EarlyTermination_84J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Y_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_30Y_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Y_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_30Y_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30Y_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1399, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_30Y_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30Y_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30Y')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1402, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1402, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30Y_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1403, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1403, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_30Y_Type = MT306_SequenceI_EarlyTermination_30Y_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30Y_Type', MT306_SequenceI_EarlyTermination_30Y_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29L_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_29L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29L_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_29L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1412, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_29L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1415, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1415, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1416, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1416, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_29L_Type = MT306_SequenceI_EarlyTermination_29L_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29L_Type', MT306_SequenceI_EarlyTermination_29L_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29E_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_29E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_29E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1425, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_29E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1428, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1428, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1429, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1429, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_29E_Type = MT306_SequenceI_EarlyTermination_29E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29E_Type', MT306_SequenceI_EarlyTermination_29E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29M_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_29M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29M_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_29M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1438, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_29M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1441, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1441, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1442, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1442, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_29M_Type = MT306_SequenceI_EarlyTermination_29M_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29M_Type', MT306_SequenceI_EarlyTermination_29M_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_17I_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_17I_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_17I_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_17I_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_17I_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1451, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_17I_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_17I_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17I')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1454, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1454, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_17I_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1455, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1455, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_17I_Type = MT306_SequenceI_EarlyTermination_17I_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_17I_Type', MT306_SequenceI_EarlyTermination_17I_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29N_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_29N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_29N_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_29N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_29N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1464, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_29N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1467, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1467, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_29N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1468, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1468, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_29N_Type = MT306_SequenceI_EarlyTermination_29N_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_29N_Type', MT306_SequenceI_EarlyTermination_29N_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Z_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_30Z_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_30Z_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_30Z_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_30Z_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1477, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_30Z_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30Z_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30Z')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1480, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1480, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_30Z_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1481, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1481, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_30Z_Type = MT306_SequenceI_EarlyTermination_30Z_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_30Z_Type', MT306_SequenceI_EarlyTermination_30Z_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_14S_Type with content type SIMPLE
class MT306_SequenceI_EarlyTermination_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceI_EarlyTermination_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceI_EarlyTermination_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceI_EarlyTermination_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1490, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceI_EarlyTermination_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1493, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1493, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceI_EarlyTermination_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1494, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1494, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceI_EarlyTermination_14S_Type = MT306_SequenceI_EarlyTermination_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceI_EarlyTermination_14S_Type', MT306_SequenceI_EarlyTermination_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14S_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1503, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1506, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1506, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1507, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1507, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_14S_Type = MT306_SequenceJ_AveragingOptionsandForwards_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_14S_Type', MT306_SequenceJ_AveragingOptionsandForwards_14S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14B_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_14B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_14B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_14B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1516, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1519, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1519, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_14B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1520, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1520, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_14B_Type = MT306_SequenceJ_AveragingOptionsandForwards_14B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_14B_Type', MT306_SequenceJ_AveragingOptionsandForwards_14B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_16C_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_16C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_16C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_16C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1529, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='16C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1532, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1532, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_16C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1533, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1533, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_16C_Type = MT306_SequenceJ_AveragingOptionsandForwards_16C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_16C_Type', MT306_SequenceJ_AveragingOptionsandForwards_16C_Type)


# Complex type {http://www.w3schools.com}MT306_SPOT_18B_Type with content type SIMPLE
class MT306_SPOT_18B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SPOT_18B_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SPOT_18B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SPOT_18B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1542, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SPOT_18B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SPOT_18B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='18B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1545, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1545, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SPOT_18B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1546, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1546, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SPOT_18B_Type = MT306_SPOT_18B_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SPOT_18B_Type', MT306_SPOT_18B_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1555, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1558, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1558, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1559, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1559, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type', MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1568, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19Y')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1571, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1571, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1572, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1572, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type = MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type', MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type)


# Complex type {http://www.w3schools.com}MT306_STRIKE_18C_Type with content type SIMPLE
class MT306_STRIKE_18C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_STRIKE_18C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_STRIKE_18C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_STRIKE_18C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1581, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_STRIKE_18C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_STRIKE_18C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='18C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1584, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1584, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_STRIKE_18C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1585, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1585, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_STRIKE_18C_Type = MT306_STRIKE_18C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_STRIKE_18C_Type', MT306_STRIKE_18C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1594, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1597, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1597, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1598, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1598, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1607, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19Z')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1610, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1610, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1611, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1611, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type = MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type', MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_19C_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_19C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_19C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_19C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1620, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='19C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1623, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1623, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_19C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1624, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1624, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_19C_Type = MT306_SequenceJ_AveragingOptionsandForwards_19C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_19C_Type', MT306_SequenceJ_AveragingOptionsandForwards_19C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_23C_Type with content type SIMPLE
class MT306_SequenceJ_AveragingOptionsandForwards_23C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceJ_AveragingOptionsandForwards_23C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceJ_AveragingOptionsandForwards_23C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1633, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='23C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1636, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1636, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceJ_AveragingOptionsandForwards_23C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1637, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1637, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceJ_AveragingOptionsandForwards_23C_Type = MT306_SequenceJ_AveragingOptionsandForwards_23C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceJ_AveragingOptionsandForwards_23C_Type', MT306_SequenceJ_AveragingOptionsandForwards_23C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_29A_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_29A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_29A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_29A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_29A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1646, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_29A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_29A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1649, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1649, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_29A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1650, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1650, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_29A_Type = MT306_SequenceK_AdditionalInformation_29A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_29A_Type', MT306_SequenceK_AdditionalInformation_29A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_24D_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_24D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_24D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_24D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_24D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1659, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_24D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_24D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='24D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1662, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1662, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_24D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1663, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1663, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_24D_Type = MT306_SequenceK_AdditionalInformation_24D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_24D_Type', MT306_SequenceK_AdditionalInformation_24D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88A_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_88A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_88A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_88A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1672, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_88A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_88A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='88A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1675, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1675, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_88A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1676, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1676, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_88A_Type = MT306_SequenceK_AdditionalInformation_88A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_88A_Type', MT306_SequenceK_AdditionalInformation_88A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88D_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_88D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_88D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_88D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_88D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1685, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_88D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_88D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='88D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1688, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1688, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_88D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1689, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1689, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_88D_Type = MT306_SequenceK_AdditionalInformation_88D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_88D_Type', MT306_SequenceK_AdditionalInformation_88D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_71F_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_71F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_71F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_71F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_71F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1698, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_71F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_71F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='71F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1701, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1701, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_71F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1702, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1702, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_71F_Type = MT306_SequenceK_AdditionalInformation_71F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_71F_Type', MT306_SequenceK_AdditionalInformation_71F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_21G_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_21G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_21G_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_21G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_21G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1711, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_21G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_21G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1714, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1714, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_21G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1715, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1715, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_21G_Type = MT306_SequenceK_AdditionalInformation_21G_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_21G_Type', MT306_SequenceK_AdditionalInformation_21G_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_72_Type with content type SIMPLE
class MT306_SequenceK_AdditionalInformation_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceK_AdditionalInformation_72_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceK_AdditionalInformation_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceK_AdditionalInformation_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1724, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceK_AdditionalInformation_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1727, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1727, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceK_AdditionalInformation_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1728, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1728, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceK_AdditionalInformation_72_Type = MT306_SequenceK_AdditionalInformation_72_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceK_AdditionalInformation_72_Type', MT306_SequenceK_AdditionalInformation_72_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_18A_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_18A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_18A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_18A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1737, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_18A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_18A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='18A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1740, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1740, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_18A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1741, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1741, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_18A_Type = MT306_SequenceL_AdditionalAmounts_18A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_18A_Type', MT306_SequenceL_AdditionalAmounts_18A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1750, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1753, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1753, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1754, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1754, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type = MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type', MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1763, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1766, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1766, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1767, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1767, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type = MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type', MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53A_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1776, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1779, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1779, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1780, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1780, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53A_Type = MT306_SequenceL_AdditionalAmounts_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53A_Type', MT306_SequenceL_AdditionalAmounts_53A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53D_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1789, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1792, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1792, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1793, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1793, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53D_Type = MT306_SequenceL_AdditionalAmounts_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53D_Type', MT306_SequenceL_AdditionalAmounts_53D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53J_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1802, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1805, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1805, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1806, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1806, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_53J_Type = MT306_SequenceL_AdditionalAmounts_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_53J_Type', MT306_SequenceL_AdditionalAmounts_53J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86A_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_86A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1815, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_86A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1818, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1818, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1819, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1819, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86A_Type = MT306_SequenceL_AdditionalAmounts_86A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86A_Type', MT306_SequenceL_AdditionalAmounts_86A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86D_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_86D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1828, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_86D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1831, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1831, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1832, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1832, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86D_Type = MT306_SequenceL_AdditionalAmounts_86D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86D_Type', MT306_SequenceL_AdditionalAmounts_86D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86J_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_86J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_86J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_86J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1841, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_86J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1844, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1844, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_86J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1845, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1845, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_86J_Type = MT306_SequenceL_AdditionalAmounts_86J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_86J_Type', MT306_SequenceL_AdditionalAmounts_86J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56A_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1854, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1857, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1857, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1858, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1858, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56A_Type = MT306_SequenceL_AdditionalAmounts_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56A_Type', MT306_SequenceL_AdditionalAmounts_56A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56D_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1867, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1870, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1870, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1871, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1871, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56D_Type = MT306_SequenceL_AdditionalAmounts_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56D_Type', MT306_SequenceL_AdditionalAmounts_56D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56J_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1880, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1883, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1883, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1884, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1884, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_56J_Type = MT306_SequenceL_AdditionalAmounts_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_56J_Type', MT306_SequenceL_AdditionalAmounts_56J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57A_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1893, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1896, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1896, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1897, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1897, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57A_Type = MT306_SequenceL_AdditionalAmounts_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57A_Type', MT306_SequenceL_AdditionalAmounts_57A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57D_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1906, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1909, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1909, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1910, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1910, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57D_Type = MT306_SequenceL_AdditionalAmounts_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57D_Type', MT306_SequenceL_AdditionalAmounts_57D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57J_Type with content type SIMPLE
class MT306_SequenceL_AdditionalAmounts_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceL_AdditionalAmounts_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceL_AdditionalAmounts_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1919, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceL_AdditionalAmounts_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1922, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1922, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceL_AdditionalAmounts_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1923, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1923, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceL_AdditionalAmounts_57J_Type = MT306_SequenceL_AdditionalAmounts_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceL_AdditionalAmounts_57J_Type', MT306_SequenceL_AdditionalAmounts_57J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1932, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1935, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1935, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1936, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1936, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1945, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='91A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1948, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1948, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1949, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1949, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1958, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='91D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1961, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1961, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1962, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1962, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1971, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='91J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1974, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1974, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1975, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1975, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1984, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1987, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1987, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1988, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1988, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 1997, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2000, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2000, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2001, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2001, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2010, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2013, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2013, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2014, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2014, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2023, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2026, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2026, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2027, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2027, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type = MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type', MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96A_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_96A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_96A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2036, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_96A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='96A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2039, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2039, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2040, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2040, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_96A_Type = MT306_SequenceM_ReportingInformation_96A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96A_Type', MT306_SequenceM_ReportingInformation_96A_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96D_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_96D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_96D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2049, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_96D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='96D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2052, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2052, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2053, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2053, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_96D_Type = MT306_SequenceM_ReportingInformation_96D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96D_Type', MT306_SequenceM_ReportingInformation_96D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96J_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_96J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_96J_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_96J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_96J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2062, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_96J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='96J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2065, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2065, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_96J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2066, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2066, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_96J_Type = MT306_SequenceM_ReportingInformation_96J_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_96J_Type', MT306_SequenceM_ReportingInformation_96J_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22S_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_22S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_22S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2075, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_22S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2078, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2078, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2079, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2079, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_22S_Type = MT306_SequenceM_ReportingInformation_22S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22S_Type', MT306_SequenceM_ReportingInformation_22S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22T_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_22T_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22T_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_22T_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22T_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2088, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_22T_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22T_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22T')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2091, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2091, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22T_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2092, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2092, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_22T_Type = MT306_SequenceM_ReportingInformation_22T_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22T_Type', MT306_SequenceM_ReportingInformation_22T_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17E_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17E_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2101, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2104, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2104, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2105, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2105, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17E_Type = MT306_SequenceM_ReportingInformation_17E_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17E_Type', MT306_SequenceM_ReportingInformation_17E_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22U_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_22U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22U_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_22U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2114, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_22U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2117, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2117, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2118, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2118, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_22U_Type = MT306_SequenceM_ReportingInformation_22U_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22U_Type', MT306_SequenceM_ReportingInformation_22U_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17H_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17H_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2127, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2130, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2130, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2131, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2131, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17H_Type = MT306_SequenceM_ReportingInformation_17H_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17H_Type', MT306_SequenceM_ReportingInformation_17H_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17P_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17P_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2140, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2143, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2143, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2144, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2144, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17P_Type = MT306_SequenceM_ReportingInformation_17P_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17P_Type', MT306_SequenceM_ReportingInformation_17P_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22V_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_22V_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22V_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_22V_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22V_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2153, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_22V_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22V_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22V')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2156, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2156, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22V_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2157, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2157, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_22V_Type = MT306_SequenceM_ReportingInformation_22V_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22V_Type', MT306_SequenceM_ReportingInformation_22V_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_98D_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_98D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_98D_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_98D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_98D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2166, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_98D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_98D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2169, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2169, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_98D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2170, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2170, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_98D_Type = MT306_SequenceM_ReportingInformation_98D_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_98D_Type', MT306_SequenceM_ReportingInformation_98D_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17W_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17W_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17W_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17W_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17W_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2179, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17W_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17W_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17W')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2182, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2182, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17W_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2183, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2183, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17W_Type = MT306_SequenceM_ReportingInformation_17W_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17W_Type', MT306_SequenceM_ReportingInformation_17W_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Y_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17Y_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Y_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17Y_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Y_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2192, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17Y_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Y_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17Y')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2195, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2195, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Y_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2196, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2196, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Y_Type = MT306_SequenceM_ReportingInformation_17Y_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Y_Type', MT306_SequenceM_ReportingInformation_17Y_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Z_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17Z_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Z_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17Z_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Z_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2205, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17Z_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Z_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17Z')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2208, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2208, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Z_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2209, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2209, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Z_Type = MT306_SequenceM_ReportingInformation_17Z_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Z_Type', MT306_SequenceM_ReportingInformation_17Z_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22Q_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_22Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_22Q_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_22Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_22Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2218, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_22Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2221, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2221, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_22Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2222, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2222, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_22Q_Type = MT306_SequenceM_ReportingInformation_22Q_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_22Q_Type', MT306_SequenceM_ReportingInformation_22Q_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17L_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17L_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2231, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2234, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2234, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2235, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2235, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17L_Type = MT306_SequenceM_ReportingInformation_17L_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17L_Type', MT306_SequenceM_ReportingInformation_17L_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17M_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17M_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2244, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2247, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2247, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2248, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2248, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17M_Type = MT306_SequenceM_ReportingInformation_17M_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17M_Type', MT306_SequenceM_ReportingInformation_17M_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Q_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17Q_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17Q_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17Q_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17Q_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2257, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17Q_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Q_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17Q')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2260, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2260, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17Q_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2261, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2261, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17Q_Type = MT306_SequenceM_ReportingInformation_17Q_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17Q_Type', MT306_SequenceM_ReportingInformation_17Q_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17S_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17S_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2270, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2273, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2273, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2274, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2274, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17S_Type = MT306_SequenceM_ReportingInformation_17S_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17S_Type', MT306_SequenceM_ReportingInformation_17S_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17X_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_17X_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_17X_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_17X_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_17X_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2283, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_17X_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17X_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17X')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2286, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2286, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_17X_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2287, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2287, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_17X_Type = MT306_SequenceM_ReportingInformation_17X_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_17X_Type', MT306_SequenceM_ReportingInformation_17X_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_34C_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_34C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_34C_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_34C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_34C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2296, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_34C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_34C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='34C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2299, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2299, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_34C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2300, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2300, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_34C_Type = MT306_SequenceM_ReportingInformation_34C_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_34C_Type', MT306_SequenceM_ReportingInformation_34C_Type)


# Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_77A_Type with content type SIMPLE
class MT306_SequenceM_ReportingInformation_77A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT306_SequenceM_ReportingInformation_77A_Type with content type SIMPLE"""
    _TypeDefinition = MT306_SequenceM_ReportingInformation_77A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT306_SequenceM_ReportingInformation_77A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2309, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT306_SequenceM_ReportingInformation_77A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_77A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2312, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2312, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT306_SequenceM_ReportingInformation_77A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2313, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2313, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT306_SequenceM_ReportingInformation_77A_Type = MT306_SequenceM_ReportingInformation_77A_Type
Namespace.addCategoryObject('typeBinding', 'MT306_SequenceM_ReportingInformation_77A_Type', MT306_SequenceM_ReportingInformation_77A_Type)


MT306 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT306'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2696, 1))
Namespace.addCategoryObject('elementBinding', MT306.name().localName(), MT306)



MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), MT306_SequenceA_GeneralInformation_20_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2319, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT306_SequenceA_GeneralInformation_21_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2320, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation'), MT306_SequenceA_GeneralInformation_22A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2321, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation'), MT306_SequenceA_GeneralInformation_94A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2322, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommonReference'), MT306_SequenceA_GeneralInformation_22C_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2323, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyA'), MT306_SequenceA_GeneralInformation_21N_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2324, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyB'), MT306_SequenceA_GeneralInformation_21B_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2325, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OptionStyle'), MT306_SequenceA_GeneralInformation_12F_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2326, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExpirationStyle'), MT306_SequenceA_GeneralInformation_12E_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2327, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OptionType'), MT306_SequenceA_GeneralInformation_12D_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2328, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarrierIndicator'), MT306_SequenceA_GeneralInformation_17A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2329, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NonDeliverableIndicator'), MT306_SequenceA_GeneralInformation_17F_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2330, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfEvent'), MT306_SequenceA_GeneralInformation_22K_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2331, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateOfTriggerHit'), MT306_SequenceA_GeneralInformation_30U_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2332, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationOfTriggerHit'), MT306_SequenceA_GeneralInformation_29H_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2333, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyA_A'), MT306_SequenceA_GeneralInformation_82A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2335, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyA_D'), MT306_SequenceA_GeneralInformation_82D_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2336, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyA_J'), MT306_SequenceA_GeneralInformation_82J_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2337, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyB_A'), MT306_SequenceA_GeneralInformation_87A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2340, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyB_D'), MT306_SequenceA_GeneralInformation_87D_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2341, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartyB_J'), MT306_SequenceA_GeneralInformation_87J_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2342, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_A'), MT306_SequenceA_GeneralInformation_83A_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2345, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_D'), MT306_SequenceA_GeneralInformation_83D_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2346, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_J'), MT306_SequenceA_GeneralInformation_83J_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2347, 4)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement'), MT306_SequenceA_GeneralInformation_77H_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2349, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AdditionalConditions'), MT306_SequenceA_GeneralInformation_77D_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2350, 3)))

MT306_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions'), MT306_SequenceA_GeneralInformation_14C_Type, scope=MT306_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2351, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2320, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2322, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2325, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2328, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2332, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2333, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2344, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2345, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2346, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2347, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2350, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2351, 3))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2319, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2320, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2321, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2322, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommonReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2323, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyA')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2324, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContractNumberPartyB')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2325, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OptionStyle')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2326, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExpirationStyle')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2327, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OptionType')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2328, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarrierIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2329, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NonDeliverableIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2330, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfEvent')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2331, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateOfTriggerHit')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2332, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocationOfTriggerHit')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2333, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyA_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2335, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyA_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2336, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyA_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2337, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyB_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2340, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyB_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2341, 4))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartyB_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2342, 4))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2345, 4))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2346, 4))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FundOrBeneficiaryCustomer_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2347, 4))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2349, 3))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AdditionalConditions')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2350, 3))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2351, 3))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceA_GeneralInformation._Automaton = _BuildAutomaton()




MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BuySellIndicator'), MT306_SequenceB_TransactionDetails_17V_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2359, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TradeDate'), MT306_SequenceB_TransactionDetails_30T_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2360, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExpirationDate'), MT306_SequenceB_TransactionDetails_30X_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2361, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExpirationLocationAndTime'), MT306_SequenceB_TransactionDetails_29E_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2362, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_F'), MT306_SequenceB_TransactionDetails_30F_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2364, 4)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_J'), MT306_SequenceB_TransactionDetails_30J_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2365, 4)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceB_TransactionDetails_14S_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2367, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre'), MT306_SequenceB_TransactionDetails_39M_Type, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2368, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_PremiumDetails'), MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2369, 3)))

MT306_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_CalculationAgent'), MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent, scope=MT306_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2370, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2367, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2368, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2369, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BuySellIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2359, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TradeDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2360, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExpirationDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2361, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExpirationLocationAndTime')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2362, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_F')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2364, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinalSettlementDate_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2365, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2367, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2368, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_PremiumDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2369, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_CalculationAgent')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2370, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceB_TransactionDetails._Automaton = _BuildAutomaton_()




MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PremiumPrice'), MT306_SubsequenceB1_PremiumDetails_37K_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2378, 3)))

MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PremiumPaymentDate'), MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_30V_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2379, 3)))

MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PremiumCurrencyAndAmount'), MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails_34B_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2380, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2378, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PremiumPrice')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2378, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PremiumPaymentDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2379, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PremiumCurrencyAndAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2380, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceB_TransactionDetails_SubsequenceB1_PremiumDetails._Automaton = _BuildAutomaton_2()




MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A'), MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84A_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2386, 4)))

MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B'), MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84B_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2387, 4)))

MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D'), MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84D_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2388, 4)))

MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J'), MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent_84J_Type, scope=MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2389, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2386, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2387, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2388, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2389, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceB_TransactionDetails_SubsequenceB2_CalculationAgent._Automaton = _BuildAutomaton_3()




MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53A_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2396, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53D_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2397, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_53J_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2398, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86A_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2401, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86D_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2402, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_86J_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2403, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56A_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2406, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56D_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2407, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_56J_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2408, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57A_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2411, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57D_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2412, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_57J_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2413, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58A_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2416, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58D_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2417, 4)))

MT306_SequenceC_SettlementInstructionsforPaymentofPremium._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium_58J_Type, scope=MT306_SequenceC_SettlementInstructionsforPaymentofPremium, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2418, 4)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2395, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2396, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2397, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2398, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2400, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2401, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2402, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2403, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2405, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2406, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2407, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2408, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2415, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2416, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2417, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2418, 4))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2396, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2397, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2398, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2401, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2402, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2403, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2406, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2407, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2408, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2411, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2412, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2413, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2416, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2417, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceC_SettlementInstructionsforPaymentofPremium._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2418, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceC_SettlementInstructionsforPaymentofPremium._Automaton = _BuildAutomaton_4()




MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseDate'), MT306_SequenceD_VanillaBlock_30P_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2427, 3)))

MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediateExerciseDate'), MT306_SequenceD_VanillaBlock_30Q_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2428, 3)))

MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementType'), MT306_SequenceD_VanillaBlock_26F_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2429, 3)))

MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PutCurrencyAndAmount'), MT306_SequenceD_VanillaBlock_32B_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2430, 3)))

MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StrikePrice'), MT306_SequenceD_VanillaBlock_36_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2431, 3)))

MT306_SequenceD_VanillaBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CallCurrencyAndAmount'), MT306_SequenceD_VanillaBlock_33B_Type, scope=MT306_SequenceD_VanillaBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2432, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2427, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2428, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2427, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediateExerciseDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2428, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementType')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2429, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PutCurrencyAndAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2430, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StrikePrice')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2431, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceD_VanillaBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CallCurrencyAndAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2432, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceD_VanillaBlock._Automaton = _BuildAutomaton_5()




MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), MT306_SequenceE_PayoutAmount_33E_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2440, 3)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TouchPaymentDate'), MT306_SequenceE_PayoutAmount_30H_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2441, 3)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT306_SequenceE_PayoutAmount_53A_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2443, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), MT306_SequenceE_PayoutAmount_53D_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2444, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT306_SequenceE_PayoutAmount_53J_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2445, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), MT306_SequenceE_PayoutAmount_86A_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2448, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), MT306_SequenceE_PayoutAmount_86D_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2449, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), MT306_SequenceE_PayoutAmount_86J_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2450, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT306_SequenceE_PayoutAmount_56A_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2453, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT306_SequenceE_PayoutAmount_56D_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2454, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT306_SequenceE_PayoutAmount_56J_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2455, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT306_SequenceE_PayoutAmount_57A_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2458, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), MT306_SequenceE_PayoutAmount_57D_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2459, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT306_SequenceE_PayoutAmount_57J_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2460, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT306_SequenceE_PayoutAmount_58A_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2463, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), MT306_SequenceE_PayoutAmount_58D_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2464, 4)))

MT306_SequenceE_PayoutAmount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), MT306_SequenceE_PayoutAmount_58J_Type, scope=MT306_SequenceE_PayoutAmount, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2465, 4)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2441, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2442, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2443, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2444, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2445, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2447, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2448, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2449, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2450, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2452, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2453, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2454, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2455, 4))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2462, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2463, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2464, 4))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2465, 4))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2440, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TouchPaymentDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2441, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2443, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2444, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2445, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2448, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2449, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2450, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2453, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2454, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2455, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2458, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2459, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2460, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2463, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2464, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceE_PayoutAmount._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2465, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceE_PayoutAmount._Automaton = _BuildAutomaton_6()




MT306_SequenceF_BarrierBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfBarrier'), MT306_SequenceF_BarrierBlock_22G_Type, scope=MT306_SequenceF_BarrierBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2474, 3)))

MT306_SequenceF_BarrierBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarrierLevel'), MT306_SequenceF_BarrierBlock_37J_Type, scope=MT306_SequenceF_BarrierBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2475, 3)))

MT306_SequenceF_BarrierBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerBarrierLevel'), MT306_SequenceF_BarrierBlock_37L_Type, scope=MT306_SequenceF_BarrierBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2476, 3)))

MT306_SequenceF_BarrierBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceF1_BarrierWindowBlock'), MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock, scope=MT306_SequenceF_BarrierBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2477, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2476, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2477, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfBarrier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2474, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarrierLevel')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2475, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerBarrierLevel')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2476, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceF1_BarrierWindowBlock')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2477, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceF_BarrierBlock._Automaton = _BuildAutomaton_7()




MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarrierWindowStartDateAndEndDate'), MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_30G_Type, scope=MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2485, 3)))

MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForStartDate'), MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29J_Type, scope=MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2486, 3)))

MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForEndDate'), MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_29K_Type, scope=MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2487, 3)))

MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock_14S_Type, scope=MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2488, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2488, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarrierWindowStartDateAndEndDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2485, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForStartDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2486, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocationAndTimeForEndDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2487, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2488, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceF_BarrierBlock_SubsequenceF1_BarrierWindowBlock._Automaton = _BuildAutomaton_8()




MT306_SequenceG_TriggerBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TRIGGER'), MT306_SequenceG_TriggerBlock_TRIGGER, scope=MT306_SequenceG_TriggerBlock, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2493, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TRIGGER')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2493, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceG_TriggerBlock._Automaton = _BuildAutomaton_9()




MT306_SequenceG_TriggerBlock_TRIGGER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfTrigger'), MT306_SequenceG_TriggerBlock_TRIGGER_22J_Type, scope=MT306_SequenceG_TriggerBlock_TRIGGER, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2498, 3)))

MT306_SequenceG_TriggerBlock_TRIGGER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TriggerLevel'), MT306_SequenceG_TriggerBlock_TRIGGER_37U_Type, scope=MT306_SequenceG_TriggerBlock_TRIGGER, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2499, 3)))

MT306_SequenceG_TriggerBlock_TRIGGER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerTriggerLevel'), MT306_SequenceG_TriggerBlock_TRIGGER_37P_Type, scope=MT306_SequenceG_TriggerBlock_TRIGGER, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2500, 3)))

MT306_SequenceG_TriggerBlock_TRIGGER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPair'), MT306_SequenceG_TriggerBlock_TRIGGER_32Q_Type, scope=MT306_SequenceG_TriggerBlock_TRIGGER, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2501, 3)))

MT306_SequenceG_TriggerBlock_TRIGGER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceG_TriggerBlock_TRIGGER_14S_Type, scope=MT306_SequenceG_TriggerBlock_TRIGGER, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2502, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2500, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2502, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock_TRIGGER._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfTrigger')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2498, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock_TRIGGER._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TriggerLevel')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2499, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock_TRIGGER._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerTriggerLevel')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2500, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock_TRIGGER._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPair')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2501, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceG_TriggerBlock_TRIGGER._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2502, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceG_TriggerBlock_TRIGGER._Automaton = _BuildAutomaton_10()




MT306_SequenceH_NonDeliverableOptionBlockOPT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceH_NonDeliverableOptionBlockOPT_14S_Type, scope=MT306_SequenceH_NonDeliverableOptionBlockOPT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2510, 3)))

MT306_SequenceH_NonDeliverableOptionBlockOPT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency'), MT306_SequenceH_NonDeliverableOptionBlockOPT_32E_Type, scope=MT306_SequenceH_NonDeliverableOptionBlockOPT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2511, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceH_NonDeliverableOptionBlockOPT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2510, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceH_NonDeliverableOptionBlockOPT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2511, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceH_NonDeliverableOptionBlockOPT._Automaton = _BuildAutomaton_11()




MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationStyle'), MT306_SequenceI_EarlyTermination_12G_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2519, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationDate'), MT306_SequenceI_EarlyTermination_30T_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2520, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOfEarlyTermination'), MT306_SequenceI_EarlyTermination_22Y_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2521, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_A'), MT306_SequenceI_EarlyTermination_85A_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2523, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_D'), MT306_SequenceI_EarlyTermination_85D_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2524, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_J'), MT306_SequenceI_EarlyTermination_85J_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2525, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_A'), MT306_SequenceI_EarlyTermination_88A_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2528, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_D'), MT306_SequenceI_EarlyTermination_88D_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2529, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_J'), MT306_SequenceI_EarlyTermination_88J_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2530, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A'), MT306_SequenceI_EarlyTermination_84A_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2533, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B'), MT306_SequenceI_EarlyTermination_84B_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2534, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D'), MT306_SequenceI_EarlyTermination_84D_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2535, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J'), MT306_SequenceI_EarlyTermination_84J_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2536, 4)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommencementDate'), MT306_SequenceI_EarlyTermination_30Y_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2538, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDetails'), MT306_SequenceI_EarlyTermination_29L_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2539, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseTime'), MT306_SequenceI_EarlyTermination_29E_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2540, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatestExerciseTime'), MT306_SequenceI_EarlyTermination_29M_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2541, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CashSettlement'), MT306_SequenceI_EarlyTermination_17I_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2542, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementValuationDetails'), MT306_SequenceI_EarlyTermination_29N_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2543, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementPaymentDate'), MT306_SequenceI_EarlyTermination_30Z_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2544, 3)))

MT306_SequenceI_EarlyTermination._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceI_EarlyTermination_14S_Type, scope=MT306_SequenceI_EarlyTermination, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2545, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2520, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2521, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2522, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2523, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2524, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2525, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2527, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2528, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2529, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2530, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2538, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2539, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2540, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2541, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2542, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2543, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2544, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2545, 3))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationStyle')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2519, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarlyTerminationDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2520, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOfEarlyTermination')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2521, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2523, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2524, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExercisingParty_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2525, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2528, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2529, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NonExercisingParty_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2530, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2533, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_B')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2534, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2535, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2536, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommencementDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2538, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2539, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarliestExerciseTime')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2540, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatestExerciseTime')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2541, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CashSettlement')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2542, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementValuationDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2543, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CashSettlementPaymentDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2544, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceI_EarlyTermination._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2545, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceI_EarlyTermination._Automaton = _BuildAutomaton_12()




MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT306_SequenceJ_AveragingOptionsandForwards_14S_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2553, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AverageStrikePriceCalculation'), MT306_SequenceJ_AveragingOptionsandForwards_14B_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2554, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DecimalPlaces'), MT306_SequenceJ_AveragingOptionsandForwards_16C_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2555, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SPOT'), MT306_SequenceJ_AveragingOptionsandForwards_SPOT, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2556, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STRIKE'), MT306_SequenceJ_AveragingOptionsandForwards_STRIKE, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2557, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Adjustment'), MT306_SequenceJ_AveragingOptionsandForwards_19C_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2558, 3)))

MT306_SequenceJ_AveragingOptionsandForwards._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationOfSettlementAmount'), MT306_SequenceJ_AveragingOptionsandForwards_23C_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2559, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2554, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2556, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2557, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2558, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2559, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2553, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AverageStrikePriceCalculation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2554, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DecimalPlaces')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2555, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SPOT')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2556, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STRIKE')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2557, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Adjustment')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2558, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationOfSettlementAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2559, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceJ_AveragingOptionsandForwards._Automaton = _BuildAutomaton_13()




MT306_SequenceJ_AveragingOptionsandForwards_SPOT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfSpotAveragingDates'), MT306_SPOT_18B_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_SPOT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2567, 3)))

MT306_SequenceJ_AveragingOptionsandForwards_SPOT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ1_SpotAverageDatesandWeightings'), MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings, scope=MT306_SequenceJ_AveragingOptionsandForwards_SPOT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2568, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2567, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_SPOT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfSpotAveragingDates')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2567, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_SPOT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ1_SpotAverageDatesandWeightings')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2568, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceJ_AveragingOptionsandForwards_SPOT._Automaton = _BuildAutomaton_14()




MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingDate'), MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_30M_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2573, 3)))

MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingWeightingFactor'), MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings_19Y_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2574, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2573, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpotAveragingWeightingFactor')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2574, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceJ_AveragingOptionsandForwards_SPOT_SubsequenceJ1_SpotAverageDatesandWeightings._Automaton = _BuildAutomaton_15()




MT306_SequenceJ_AveragingOptionsandForwards_STRIKE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfStrikeAveragingDates'), MT306_STRIKE_18C_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_STRIKE, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2579, 3)))

MT306_SequenceJ_AveragingOptionsandForwards_STRIKE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ2_StrikeAverageDatesandWeightings'), MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings, scope=MT306_SequenceJ_AveragingOptionsandForwards_STRIKE, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2580, 3)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2579, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfStrikeAveragingDates')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2579, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceJ2_StrikeAverageDatesandWeightings')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2580, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE._Automaton = _BuildAutomaton_16()




MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingDate'), MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_30N_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2585, 3)))

MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingWeightingFactor'), MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings_19Z_Type, scope=MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2586, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2585, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StrikeAveragingWeightingFactor')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2586, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceJ_AveragingOptionsandForwards_STRIKE_SubsequenceJ2_StrikeAverageDatesandWeightings._Automaton = _BuildAutomaton_17()




MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation'), MT306_SequenceK_AdditionalInformation_29A_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2591, 3)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DealingMethod'), MT306_SequenceK_AdditionalInformation_24D_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2592, 3)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_A'), MT306_SequenceK_AdditionalInformation_88A_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2594, 4)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_D'), MT306_SequenceK_AdditionalInformation_88D_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2595, 4)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BrokersCommission'), MT306_SequenceK_AdditionalInformation_71F_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2597, 3)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BrokersReference'), MT306_SequenceK_AdditionalInformation_21G_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2598, 3)))

MT306_SequenceK_AdditionalInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT306_SequenceK_AdditionalInformation_72_Type, scope=MT306_SequenceK_AdditionalInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2599, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2591, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2592, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2593, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2594, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2595, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2597, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2598, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2599, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2591, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DealingMethod')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2592, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2594, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BrokerIdentification_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2595, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BrokersCommission')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2597, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BrokersReference')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2598, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceK_AdditionalInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2599, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT306_SequenceK_AdditionalInformation._Automaton = _BuildAutomaton_18()




MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRepetitions'), MT306_SequenceL_AdditionalAmounts_18A_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2607, 3)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AMOUNT'), MT306_SequenceL_AdditionalAmounts_AMOUNT, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2608, 3)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT306_SequenceL_AdditionalAmounts_53A_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2610, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), MT306_SequenceL_AdditionalAmounts_53D_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2611, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT306_SequenceL_AdditionalAmounts_53J_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2612, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A'), MT306_SequenceL_AdditionalAmounts_86A_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2615, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D'), MT306_SequenceL_AdditionalAmounts_86D_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2616, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J'), MT306_SequenceL_AdditionalAmounts_86J_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2617, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT306_SequenceL_AdditionalAmounts_56A_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2620, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT306_SequenceL_AdditionalAmounts_56D_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2621, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT306_SequenceL_AdditionalAmounts_56J_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2622, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT306_SequenceL_AdditionalAmounts_57A_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2625, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), MT306_SequenceL_AdditionalAmounts_57D_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2626, 4)))

MT306_SequenceL_AdditionalAmounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT306_SequenceL_AdditionalAmounts_57J_Type, scope=MT306_SequenceL_AdditionalAmounts, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2627, 4)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2609, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2610, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2611, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2612, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2614, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2615, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2616, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2617, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2619, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2620, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2621, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2622, 4))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRepetitions')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2607, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AMOUNT')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2608, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2610, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2611, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2612, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2615, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2616, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary2_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2617, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2620, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2621, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2622, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2625, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2626, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2627, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceL_AdditionalAmounts._Automaton = _BuildAutomaton_19()




MT306_SequenceL_AdditionalAmounts_AMOUNT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaymentDate'), MT306_SequenceL_AdditionalAmounts_AMOUNT_30F_Type, scope=MT306_SequenceL_AdditionalAmounts_AMOUNT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2636, 3)))

MT306_SequenceL_AdditionalAmounts_AMOUNT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPaymentAmount'), MT306_SequenceL_AdditionalAmounts_AMOUNT_32H_Type, scope=MT306_SequenceL_AdditionalAmounts_AMOUNT, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2637, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts_AMOUNT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaymentDate')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2636, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceL_AdditionalAmounts_AMOUNT._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyPaymentAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2637, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceL_AdditionalAmounts_AMOUNT._Automaton = _BuildAutomaton_20()




MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1_ReportingParties'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2642, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_A'), MT306_SequenceM_ReportingInformation_96A_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2644, 4)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_D'), MT306_SequenceM_ReportingInformation_96D_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2645, 4)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_J'), MT306_SequenceM_ReportingInformation_96J_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2646, 4)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingBrokerIdentification'), MT306_SequenceM_ReportingInformation_22S_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2648, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearedProductIdentification'), MT306_SequenceM_ReportingInformation_22T_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2649, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingThresholdIndicator'), MT306_SequenceM_ReportingInformation_17E_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2650, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier'), MT306_SequenceM_ReportingInformation_22U_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2651, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllocationIndicator'), MT306_SequenceM_ReportingInformation_17H_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2652, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollateralisationIndicator'), MT306_SequenceM_ReportingInformation_17P_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2653, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue'), MT306_SequenceM_ReportingInformation_22V_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2654, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp'), MT306_SequenceM_ReportingInformation_98D_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2655, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NonStandardFlag'), MT306_SequenceM_ReportingInformation_17W_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2656, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinancialNatureOfTheCounterpartyIndicator'), MT306_SequenceM_ReportingInformation_17Y_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2657, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioIndicator'), MT306_SequenceM_ReportingInformation_17Z_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2658, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioCode'), MT306_SequenceM_ReportingInformation_22Q_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2659, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PortfolioCompressionIndicator'), MT306_SequenceM_ReportingInformation_17L_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2660, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CorporateSectorIndicator'), MT306_SequenceM_ReportingInformation_17M_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2661, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TradewithNonEEACounterpartyIndicator'), MT306_SequenceM_ReportingInformation_17Q_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2662, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntragroupTradeIndicator'), MT306_SequenceM_ReportingInformation_17S_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2663, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommercialorTreasuryFinancingIndicator'), MT306_SequenceM_ReportingInformation_17X_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2664, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees'), MT306_SequenceM_ReportingInformation_34C_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2665, 3)))

MT306_SequenceM_ReportingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AdditionalReportingInformation'), MT306_SequenceM_ReportingInformation_77A_Type, scope=MT306_SequenceM_ReportingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2666, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2642, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2643, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2644, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2645, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2646, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2648, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2649, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2650, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2651, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2652, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2653, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2654, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2655, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2656, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2657, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2658, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2659, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2660, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2661, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2662, 3))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2663, 3))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2664, 3))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2665, 3))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2666, 3))
    counters.add(cc_23)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1_ReportingParties')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2642, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2644, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2645, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingExceptionParty_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2646, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingBrokerIdentification')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2648, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearedProductIdentification')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2649, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingThresholdIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2650, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2651, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllocationIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2652, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollateralisationIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2653, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2654, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2655, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NonStandardFlag')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2656, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinancialNatureOfTheCounterpartyIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2657, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2658, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollateralPortfolioCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2659, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PortfolioCompressionIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2660, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CorporateSectorIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2661, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TradewithNonEEACounterpartyIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2662, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntragroupTradeIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2663, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommercialorTreasuryFinancingIndicator')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2664, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2665, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AdditionalReportingInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2666, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_23, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT306_SequenceM_ReportingInformation._Automaton = _BuildAutomaton_21()




MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_22L_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2674, 3)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_A'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91A_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2676, 4)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_D'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91D_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2677, 4)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_J'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_91J_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2678, 4)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a_UniqueTransactionIdentifier'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2680, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2674, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2675, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2676, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2677, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2678, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2680, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2674, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_A')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2676, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_D')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2677, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingParty_J')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2678, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a_UniqueTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2680, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties._Automaton = _BuildAutomaton_22()




MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22M_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2685, 3)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_22N_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2686, 3)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a1_PriorUniqueTransactionIdentifier'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2687, 3)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2685, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2687, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2685, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2686, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceM1a1_PriorUniqueTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2687, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier._Automaton = _BuildAutomaton_23()




MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22P_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2692, 3)))

MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier'), MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier_22R_Type, scope=MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2693, 3)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2692, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2693, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT306_SequenceM_ReportingInformation_SubsequenceM1_ReportingParties_SubsequenceM1a_UniqueTransactionIdentifier_SubsequenceM1a1_PriorUniqueTransactionIdentifier._Automaton = _BuildAutomaton_24()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), MT306_SequenceA_GeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2699, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails'), MT306_SequenceB_TransactionDetails, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2700, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_SettlementInstructionsforPaymentofPremium'), MT306_SequenceC_SettlementInstructionsforPaymentofPremium, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2701, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_VanillaBlock'), MT306_SequenceD_VanillaBlock, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2702, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_PayoutAmount'), MT306_SequenceE_PayoutAmount, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2703, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceF_BarrierBlock'), MT306_SequenceF_BarrierBlock, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2704, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceG_TriggerBlock'), MT306_SequenceG_TriggerBlock, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2705, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceH_NonDeliverableOptionBlockOPT'), MT306_SequenceH_NonDeliverableOptionBlockOPT, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2706, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceI_EarlyTermination'), MT306_SequenceI_EarlyTermination, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2707, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceJ_AveragingOptionsandForwards'), MT306_SequenceJ_AveragingOptionsandForwards, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2708, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceK_AdditionalInformation'), MT306_SequenceK_AdditionalInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2709, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceL_AdditionalAmounts'), MT306_SequenceL_AdditionalAmounts, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2710, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceM_ReportingInformation'), MT306_SequenceM_ReportingInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2711, 4)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2701, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2702, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2703, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2704, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2705, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2706, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2707, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2708, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2709, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2710, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2711, 4))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2699, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2700, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_SettlementInstructionsforPaymentofPremium')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2701, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_VanillaBlock')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2702, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_PayoutAmount')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2703, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceF_BarrierBlock')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2704, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceG_TriggerBlock')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2705, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceH_NonDeliverableOptionBlockOPT')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2706, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceI_EarlyTermination')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2707, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceJ_AveragingOptionsandForwards')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2708, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceK_AdditionalInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2709, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceL_AdditionalAmounts')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2710, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceM_ReportingInformation')), pyxb.utils.utility.Location('C:\\Projects\\Code\\SwiftMessagingSolution_Python3\\base\\extensions\\SwiftIntegration\\Utilities\\TemplateFiles\\MT306.xsd', 2711, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_25()


