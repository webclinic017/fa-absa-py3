import ael, time;

def trade_lvl_bm():

    # parameters

    s = '1038605,1092228,1093338,1118400,1121100,1121148,1131954,1140563,1141812,1150069,1153002,1155294,1186934,1197226,1223043,1230914,1375378,1376020,1383558,1383904,1405493,1405500,1405512,1408119,1408607,1408620,1408695,1411876,1412393,1415229,1418150,1418153,1421773,1423674,1425624,1429282,1429771,1446919,1446946,1447013,1447041,1447076,1447088,1447098,1447114,1454907,1458299,1469254,1477336,1479776,1484066,1484098,1488713,1489532,1489994,1491665,1491672,1498013,1501405,1514797,1515956,1515961,1516074,1520136,1521578,1523129,1527547,1529946,1529947,1531967,1542526,1542549,1543757,1543768,1554031,1555256,1561816,1569088,1571009,1575295,1577574,1577606,1595755,1595759,1595767,1595807,1595819,1595837,1595859,1595865,1595870,1595914,1595973,1595977,1595981,1596264,1596681,1596716,1597904,1597905,1598869,1599215,1604784,1675769,1675774,1675775,1687157,1687158,1687160,1687161,1691478,1695611,1699029,1699049,1699570,1699571,1700723,1700731,1723326,1725505,1732307,1732860,1732870,1734182,1734190,1734202,1741154,1754259,1758018,1758041,1764738,1764834,1764844,1768006,1768463,1773246,1773258,1773272,1774367,1774399,1776715,1777590,1777791,1777819,1778520,1778526,1787648,1788928,1791026,1791036,1791056,1793640,1793673,1795137,1799694,1800698,1809235,1812318,1812348,1812929,1818344,1825619,1828251,1833909,1838706,1845759,1848932,1852193,1858489,1858492,1858527,1861163,1861725,1862680,1862681,1864790,1870606,1870607,1870615,1870616,1870618,1872237,1873659,1882165,1885427,1894178,1894192,1894328,1894349,1894360,1899826,1899856,1902078,1910644,1911303,1916967,1916972,1916981,1925470,1926081,1926082,1927156,1927189,1930446,1930453,1931000,1931726,1931740,1931846,1933151,1948256,1962939,1964022,1964030,1964680,1964692,1964959,1969652,1972439,1977187,1985393,1985405,1985409,1985806,1985815,1986642,1986657,1986808,1986816,1989348,1991211,1991216,1991219,1991296,1992921,1992930,1997050,2003596,2003631,2003974,2003991,2005470,2005478,2006031,2006323,2006328,2007028,2013958,2013984,2019297,2019306,2019373,2020797,2020818,2029610,2034970,2035010,2035026,2035055,2037449,2050465,2050474,2050524,2051581,2058361,2058363,2058367,2059817,2059824,2059837,2066084,2068447,2068471,2068744,2068756,2077909,2077919,2077927,2077937,2093744,2093777,2127988,2133094,2140499,2140516,2140526,2149679,2149681,2152777,2152803,2158423,2163575,2180227,2180296,2183629,2183974,2185521,2189914,2189916,2190225,2190635,2190639,2195172,2201424,2202382,2202521,2202526,2208262,2208339,2216297,2216334,2216336,2230513,2230518,2247219,2247223,2253271,2256480,2259027,2263133,2263622,2267146,2267387,2267939,2268063,2270207,2288774,2290785,2295519,2297445,2297823,2301493,2301499,2301500,2309011,2312782,2318275,2318288,2319640,2322210,2325469,2329969,2329970,2335627,2335646,2341416,2349814,2350899,2350926,2360099,2360116,2363707,2365481,2379933,2385641,2390638,2390993,2391262,2391309,2395647,2400848,2400860,2400881,2400894,2401120,2426941,2426954,2427279,2482932,2504436,2504446,2515084,2515219,2521972,2523159,2523228,2524596,2531199,2531226,2533304,2553815,2553828,2580375,2620074,2620110,2620984,2628240,2628299,2630054,2646034,2646049,2646083,2646103,2651340,2652033,2653499,2658191,2658196,2658197,2659533,2680845,2680858,2681353,2681401,2685244,2687623,2687630,2689581,2691308,2693455,2693471,2693478,2697522,2707226,2716285,2716295,2717909,2722166,2722903,2737408,2741438,2776114,2776119,2778946,2778950,2781843,2786814,2786827,2786888,2786905,2794232,2797812,2801131,2801137,2806789,2807683,2812360,2812828,2836603,2842696,2848989,2864075,2880930,2903324,2903337,2903355,2903366,2903524,2907710,2920336,2924825,2929793,2935070,2935109,2935185,2935195,2936868,2941253,2949983,2949990,2963166,3017800,3017811,3017816,480769,573928,575011,575024,607726,624436,675593,686136,840148,847607,860408,860461,872175,872905,906812,906813,908244,920322,924098,937241,938967,953406,959797,964374,964437,964983,965236,965739,983074,986007,995285,1201546,1410267,1414461,1447270,1667137,1667138,1759460,1773210,2929779,2929784,2943318,971923,1001065,1001066,1001153,1001226,1001756,1001760,1004009,1005789,1005792,1014029,1017170,1018712,1018713,1020392,1032903,1032958,1032959,1036811,1040769,1040785,1040786,1083159,1084150,1094021,1132476,1134647,1173506,1179541,1197372,1197377,1198491,1198495,1202799,1202804,1203692,1206965,1206972,1216077,1216081,1222014,1228448,1229428,1230906,1230911,1231383,1241330,1244617,1244994,1244995,1245618,1246237,1246790,1246794,1246795,1248625,1256390,1288214,1293663,1296089,1303279,1319248,1322319,1322545,1327961,1328324,1329897,1329901,1330327,1330334,1331255,1331308,1331317,1343272,1344205,1346782,1347786,1347787,1355152,1355158,1355160,1355190,1356227,1359373,1364148,1365768,1365794,1368629,1375047,1375048,1375049,1377799,1382016,1382475,1383074,1383075,1394323,1396079,1399796,1399803,1405592,1408173,1408196,1423109,1423710,1432895,1437946,1447103,1451197,1451200,1451320,1458769,1471363,1472023,1491634,1491644,1492653,1494918,1494925,1499786,1513912,1515945,1517609,1524126,1527149,1527154,1527161,1537953,1538297,1538307,1559002,1559017,1562271,1571082,1573817,1685749,1699515,1707966,1707996,1716503,1719967,1725521,1741539,1753482,1763376,1791124,1792824,180379,180380,180499,1811138,1811139,181141,1812479,1819820,182686,1828637,1844495,1846474,1848203,1848209,1883436,1883448,1905139,193934,193935,1954273,1985861,1987871,1991291,2007464,2007467,2008782,2008812,2009038,2010504,2016544,2018788,2027835,2028517,2028522,2031230,2031552,2031899,2055696,2057957,2059577,2077915,2077945,2083421,2134877,2141818,2141819,2150172,2150181,2172636,2172643,2203001,2203009,2208233,2219596,2242953,2244646,2259220,2259229,229397,229503,230013,2312729,2312742,2312990,2313015,2325458,2325480,2341169,2341200,2343881,2353097,2363045,2363048,2383415,2383422,2385463,2391406,2396842,2400929,2426838,2426849,2434736,2441490,2441560,2444202,2459757,2459773,2460254,2460427,2460917,2460948,2464473,2464474,2488134,2489139,2489506,2492397,2498186,2498221,2510639,2521975,2562481,2562482,264495,2645955,2646065,2665469,266732,2685225,2689560,270078,2707209,2709939,2737410,2739998,2744112,2744125,2812628,2813001,2903219,2903279,2907732,2927914,2927977,2929742,2929751,2929765,2932844,293877,3001263,309531,316562,321290,321340,327093,327095,340964,340969,347620,348477,350162,351533,351544,364999,382302,394367,394458,394497,412951,458820,460715,462216,483552,485518,488711,489779,495449,517368,521359,522105,522106,522424,522425,522525,524278,524566,527795,536822,536823,536908,536911,540398,542992,543003,543856,544669,544826,547529,553303,553332,564205,564208,564209,564210,565423,570627,573784,573785,573933,575019,575020,585259,595269,595271,603127,603128,603414,607599,610001,610112,611535,614879,625762,631117,632092,632988,637586,663924,672239,688542,723552,740803,744545,746937,746939,748633,748725,750205,750654,753219,757993,759913,760531,761236,762530,767566,778917,790956,791066,791728,794618,795173,795175,796988,797967,799775,800893,801392,804645,810078,812645,817000,817786,821920,822247,822391,822392,824658,837380,837482,840205,840208,842271,842280,843704,850516,851853,851877,852299,853446,854328,858667,859784,860889,861151,867187,868914,870734,870869,870870,871674,872148,872311,872745,876155,877449,888376,888385,889159,890832,892166,897159,897282,897397,897400,897687,898456,899381,900339,901141,901142,901784,901967,905612,905613,907112,909009,911998,911999,912566,913450,913451,915769,915770,919623,924238,928308,935614,937232,940067,940070,941947,944729,947389,948113,949037,960441,972432,972436,972676,972931,974742,975585,978585,978586,986563,986671,989813,991291,991973,993231,994960,995227,996386,1004377,1021392,1058398,1127357,1201101,1204064,1304874,1304875,1355820,1368796,1392774,1392940,1393213,1398515,1405167,1425622,1431954,1458300,1466339,1495352,1495357,1504847,1508292,1547913,1548901,1573790,1573812,1576800,1602554,1602557,1675807,1678307,1713031,1792846,1816308,1862475,193813,193814,1998827,2004003,2006926,2007025,2021168,2026568,2060179,2060201,2244681,2659009,2667412,2707195,2717842,2717869,2724467,2738828,2738901,2766583,2769056,2778991,2780483,2783421,2812677,2899959,2903447,2907994,632455,658763,661162,663540,731482,746513,753610,764601,781334,781740,799781,806085,820766,822550,851094,853353,855415,857166,859442,862094,862594,863842,876170,887855,888371,888384,897386,897392,903099,908225,908804,910957,913119,913120,913618,917589,927607,929270,935641,944454,944488,964933,964980,964982,975784,996268,1085421,1110695,1110701,1115421,1116048,1116550,1121224,1182877,1208530,1241957,1395134,1422488,1447302,1447321,1499073,1504856,1504865,1505382,1508058,1518483,1518494,1658452,1658527,1658596,1665092,1665415,1667144,1667145,1672127,1672197,1689199,1758202,1758704,1801039,1809497,182053,1824840,1981488,2022219,2191729,2205143,2205900,2205924,2233129,2256971,2257130,2257206,229564,2359432,2523326,2549712,2549801,2634199,2671419,2795679,2850806,2925015,2950888,528796,741748,811421,815553,872244,972767,1259725,1259726,1325468,1332768,1410623,1418405,1440653,1440654,1455397,1455414,1709792,1829895,1829904,1846884,1957667,1958486,1971863,1973118,1990683,2051725,2257568,2312959,2312975,2392595,2634222,2634242,2679159,2680370,2680380,2717831,2914695,2929727,2929736,2948839,821382,841092,847845,870444,870446,871001,871003,877076,889142,896016,898542,901978,902897,920078,962927,1002211,1046649,1126182,1158631,1331106,1331114,1331121,1343010,1399012,1406484,1408729,1425623,1429174,1447086,1447463,1454749,1467523,1469792,1471380,1471426,1472303,1515934,1535071,1538619,1573816,1575233,1774613,1781191,1798434,1828159,1847671,1852170,1871053,1872236,1883674,1915648,1925674,1964676,1971775,2195161,2195979,2216264,2229176,2238699,2244598,2245652,2253258,2341368,2351945,2368421,2378620,2418830,2420512,2437244,2460248,2460359,2464380,2465673,2470479,2492373,2634124,2634144,2737412,2750595,2775548,2813585,2857528,2886560,2903294,2903420,2943078,2981681,625498,795180,798085,798663,800313,817392,817468,959060,963896,1000223,1001388,1001546,1002482,1003299,1010777,1012776,1013885,1014647,1014660,1018263,1018709,1018863,1019313,1026635,1028292,1032779,1033266,1035261,1035262,1035264,1035266,1035267,1035268,1035269,1035270,1035271,1035272,1035273,1035274,1035275,1035276,1035277,1035278,1035279,1035280,1035281,1035282,1035283,1035284,1035285,1035286,1035287,1035288,1035294,1035295,1035296,1035330,1035356,1035357,1035359,1035361,1035362,1035363,1035364,1035365,1035366,1035367,1035368,1035369,1035370,1035371,1035372,1035373,1035374,1035376,1035377,1035378,1038743,1038997,1068949,1071222,1076373,1077962,1085151,1097888,1100934,1101547,1110154,1112517,1113973,1114517,1157931,1202533,1258582,1279088,1314697,1457603,1469265,1499701,1554463,1573766,1575220,1575221,1597098,1601505,1607454,1766000,1766006,1793627,1798628,180598,1808699,1811140,1811141,1825156,1826299,1828209,1833249,1834709,1835244,1835370,1846444,1852529,1860213,1860249,1882113,1891375,1901870,1904912,1911061,1927220,1943117,1946954,1946958,1958391,1958394,1959468,1964264,1972365,1984466,1984470,1991299,1991870,1998859,1998861,2007401,2019290,2030592,2033864,2045866,2051513,2053746,2054772,2066249,2066634,2066650,2067045,2067071,2078359,2088276,2089026,2144089,2144095,2146801,2148906,2184892,2216891,2230111,2230118,2233139,233374,233677,2353121,2368276,238627,2391027,2391033,2408571,2420550,2427347,2441505,2441514,2465705,2467278,2469161,2469178,2477755,2510523,2510669,2538617,2538706,2540787,2541136,2549681,2602265,2642224,2642232,2654327,2665719,2693438,2715988,2724372,2727438,2727466,2739221,2739231,2744945,2764561,2766744,2801079,2812499,2819146,2887053,2895830,2902943,2920306,2922719,2925008,2927897,2968476,2979103,2981584,298219,2983236,2983270,3000494,3001271,3017571,480044,571533,571581,653952,745314,745333,746524,762348,768331,802088,856199,878225,878371,878372,895675,900332,900818,913449,929664,939996,953672,964177,964892,990233,991131,994446,1156933,1524167,1524178,1528697,1852167,1898934,847549'

    trds = s.split(',')
    
    trds.sort()

    sycs = ['ZAR-SWAP']    # you can specify multiple yield curves in the list

    sfile = 'c:\\temp\\test.xls'


    f=open(sfile, 'w')

    

    t0 = time.time()
    

    if debug == 2:

        print 'original curve'

        print yc.pp()

        print ''

    

    # create dictionary

    d = {}

    

    # add headers

    d['trade'] = []

    d['trade'].append('InsType')

    d['trade'].append('Curr')

    d['trade'].append('PV')

    

    # add header row for curve name

    d['curve'] = []

    d['curve'].append('')

    d['curve'].append('')

    d['curve'].append('')    

    

    bms = []

    

    for syc in sycs:    

        yc = ael.YieldCurve[syc].clone()        

        

        for bm in yc.benchmarks():

            ins = bm.instrument

            mat = bm_maturity(ins)

            tpl = (syc, mat, ins)

            bms.append(tpl)

    

    bms.sort()

    

    for bm in bms:

        ins = bm[2]

        d['trade'].append(ins.insid)

        d['curve'].append(bm[0])

    

    fxrt = {}

    

    for trd in trds.trades():    

        if trd.insaddr.exp_day > ael.date_today():

            ccy = trd.curr.insid

            if ccy not in fxrt.keys():

                fxrt[ccy] = get_fx_rate([[ccy]])

            

            pv0 = trd.present_value() * fxrt[ccy]

            

            d[trd.trdnbr] = []

            d[trd.trdnbr].append(trd.insaddr.instype)

            d[trd.trdnbr].append(trd.curr.insid)

            d[trd.trdnbr].append(pv0)    

    

    for k in fxrt.keys():

        print k, fxrt[k]

        

    for bm in bms:

        ins = bm[2]

        prc = ins.prices()            

        yc = ael.YieldCurve[bm[0]].clone()

        

        print 'bumping bm - ', ins.insid

 

        for p in prc:

            #print p.day, p.ptynbr.ptyid, p.settle

            if p.ptynbr.ptyid == 'SPOT':

                if debug == 2:

                    print 'found price'

                    print p.pp()

                    print ''

                    

                pc = p.clone()

                pc.settle = p.settle + 0.01

                pc.last = p.last + 0.01

                pc.bid = p.bid + 0.01

                pc.ask = p.ask + 0.01

                pc.apply()   

                

                if debug == 2:

                    print 'cloned point'

                    print pc.pp()

                    print ''

                    

        yc.calculate()

        yc.simulate()            

 

        if debug == 2:

            print 'modified curve'

            print yc.pp()

            print ''

            

        for trdnbr in d.keys():    

            if is_num(trdnbr):

                trd = ael.Trade[trdnbr]

                ccy = d[trd.trdnbr][1]

                fx = fxrt[ccy]

                pv0 = d[trd.trdnbr][2]

                pv1 = trd.present_value() * fx

                pv01 = pv1 - pv0

                d[trd.trdnbr].append(pv01)

        

                if debug == 1:

                    print trd.trdnbr, ccy, fxrt[ccy], pv0, pv1, pv01            

        

        if debug == 1:

            print ''

        

        pc.revert_apply()

        yc.calculate()

        yc.simulate()

    

    # write curve headers

    ls = d['curve']

    s = ''    

    for l in ls:        

        s = s + '\t' + str(l)

    

    s = s + '\n'

    f.write(s)

 

    # write trade headers    

    ls = d['trade']

    s = 'trade'    

    for l in ls:        

        s = s + '\t' + str(l)

    

    s = s + '\n'

    f.write(s)

    

    keys = d.keys()

    

    for key in keys:

        if key <> 'trade' and key <> 'curve':

            ls = d[key]

            s = str(key)

            k = 0

            for l in ls:        

                s = s + '\t' + str(l)

            

            s = s + '\n'

            f.write(s)

    

    f.close()

            

    print 'Done', '%.0f' % (time.time() - t0) + 'sec'
    
trade_lvl_bm()
